
EMG_Sensors_Main_EMG_Fix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ad8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00003ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020018  2**0
                  CONTENTS
  3 .bss          00000088  20000018  00003af0  00020018  2**2
                  ALLOC
  4 .stack        00002000  200000a0  00003b78  00020018  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  7 .debug_info   00022114  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cbb  00000000  00000000  000421ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000dfd2  00000000  00000000  00044e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b98  00000000  00000000  00052e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c88  00000000  00000000  000539d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bbb1  00000000  00000000  0005465a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001059e  00000000  00000000  0007020b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00091c69  00000000  00000000  000807a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f68  00000000  00000000  00112414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 20 00 20 45 06 00 00 41 06 00 00 41 06 00 00     . . E...A...A...
	...
      2c:	41 06 00 00 00 00 00 00 00 00 00 00 41 06 00 00     A...........A...
      3c:	c9 17 00 00 41 06 00 00 41 06 00 00 41 06 00 00     ....A...A...A...
      4c:	41 06 00 00 41 06 00 00 41 06 00 00 41 06 00 00     A...A...A...A...
      5c:	41 06 00 00 e1 1c 00 00 41 06 00 00 41 06 00 00     A.......A...A...
      6c:	41 06 00 00 41 06 00 00 41 06 00 00 41 06 00 00     A...A...A...A...
      7c:	41 06 00 00 41 06 00 00 41 06 00 00 41 06 00 00     A...A...A...A...
	...
      94:	41 06 00 00 41 06 00 00 41 06 00 00 41 06 00 00     A...A...A...A...
      a4:	41 06 00 00 41 06 00 00 41 06 00 00 00 00 00 00     A...A...A.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000018 	.word	0x20000018
      d4:	00000000 	.word	0x00000000
      d8:	00003ad8 	.word	0x00003ad8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000001c 	.word	0x2000001c
     108:	00003ad8 	.word	0x00003ad8
     10c:	00003ad8 	.word	0x00003ad8
     110:	00000000 	.word	0x00000000

00000114 <AD_get_bytes>:
		}
	}
	return 1;
}

uint8_t AD_get_bytes(AD_i2c_reg_t reg, uint8_t *value) {
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b083      	sub	sp, #12
     118:	ab01      	add	r3, sp, #4
     11a:	8018      	strh	r0, [r3, #0]
     11c:	000f      	movs	r7, r1
	for (uint8_t i = 0; i < reg.size; i++) {
     11e:	2400      	movs	r4, #0
     120:	e013      	b.n	14a <AD_get_bytes+0x36>
		point_addr_buf[1] = reg.addr + i;
     122:	ab01      	add	r3, sp, #4
     124:	781b      	ldrb	r3, [r3, #0]
     126:	18e3      	adds	r3, r4, r3
     128:	490b      	ldr	r1, [pc, #44]	; (158 <AD_get_bytes+0x44>)
     12a:	704b      	strb	r3, [r1, #1]
		if ((ret = io_write(i2c_mst_io, point_addr_buf, 2)) < I2C_OK) return ret;
     12c:	4e0b      	ldr	r6, [pc, #44]	; (15c <AD_get_bytes+0x48>)
     12e:	2202      	movs	r2, #2
     130:	6830      	ldr	r0, [r6, #0]
     132:	4b0b      	ldr	r3, [pc, #44]	; (160 <AD_get_bytes+0x4c>)
     134:	4798      	blx	r3
     136:	4d0b      	ldr	r5, [pc, #44]	; (164 <AD_get_bytes+0x50>)
     138:	7028      	strb	r0, [r5, #0]
		if ((ret = io_read(i2c_mst_io, &value[i], 1)) < I2C_OK) return ret;
     13a:	1939      	adds	r1, r7, r4
     13c:	6830      	ldr	r0, [r6, #0]
     13e:	2201      	movs	r2, #1
     140:	4b09      	ldr	r3, [pc, #36]	; (168 <AD_get_bytes+0x54>)
     142:	4798      	blx	r3
     144:	7028      	strb	r0, [r5, #0]
	for (uint8_t i = 0; i < reg.size; i++) {
     146:	3401      	adds	r4, #1
     148:	b2e4      	uxtb	r4, r4
     14a:	ab01      	add	r3, sp, #4
     14c:	785b      	ldrb	r3, [r3, #1]
     14e:	429c      	cmp	r4, r3
     150:	d3e7      	bcc.n	122 <AD_get_bytes+0xe>
	}
	return I2C_OK;
}
     152:	2000      	movs	r0, #0
     154:	b003      	add	sp, #12
     156:	bdf0      	pop	{r4, r5, r6, r7, pc}
     158:	20000064 	.word	0x20000064
     15c:	20000034 	.word	0x20000034
     160:	00000bad 	.word	0x00000bad
     164:	20000066 	.word	0x20000066
     168:	00000be5 	.word	0x00000be5

0000016c <AD_scan>:
uint8_t AD_scan(void) {
     16c:	b510      	push	{r4, lr}
     16e:	b082      	sub	sp, #8
	point_addr_buf[0] = AD5933_PTR;
     170:	22b0      	movs	r2, #176	; 0xb0
     172:	4b13      	ldr	r3, [pc, #76]	; (1c0 <AD_scan+0x54>)
     174:	701a      	strb	r2, [r3, #0]
	block_read_buf[0] = AD5933_BR;
     176:	4b13      	ldr	r3, [pc, #76]	; (1c4 <AD_scan+0x58>)
     178:	3a0f      	subs	r2, #15
     17a:	701a      	strb	r2, [r3, #0]
	block_read_buf[1] = 4;
     17c:	3a9d      	subs	r2, #157	; 0x9d
     17e:	705a      	strb	r2, [r3, #1]
	i2c_m_sync_get_io_descriptor(&I2C_MST, &i2c_mst_io);
     180:	4c11      	ldr	r4, [pc, #68]	; (1c8 <AD_scan+0x5c>)
     182:	4912      	ldr	r1, [pc, #72]	; (1cc <AD_scan+0x60>)
     184:	0020      	movs	r0, r4
     186:	4b12      	ldr	r3, [pc, #72]	; (1d0 <AD_scan+0x64>)
     188:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_MST, AD5933_ADDR, I2C_M_SEVEN);
     18a:	2280      	movs	r2, #128	; 0x80
     18c:	0112      	lsls	r2, r2, #4
     18e:	210d      	movs	r1, #13
     190:	0020      	movs	r0, r4
     192:	4b10      	ldr	r3, [pc, #64]	; (1d4 <AD_scan+0x68>)
     194:	4798      	blx	r3
	if (AD_get_bytes(_AD_reg[AD5933_CTRL], reg_buf) == I2C_OK) {
     196:	a901      	add	r1, sp, #4
     198:	4b0f      	ldr	r3, [pc, #60]	; (1d8 <AD_scan+0x6c>)
     19a:	6818      	ldr	r0, [r3, #0]
     19c:	4b0f      	ldr	r3, [pc, #60]	; (1dc <AD_scan+0x70>)
     19e:	4798      	blx	r3
     1a0:	2800      	cmp	r0, #0
     1a2:	d10a      	bne.n	1ba <AD_scan+0x4e>
		if((reg_buf[0] << 8 | reg_buf[1])==0xA000) {
     1a4:	aa01      	add	r2, sp, #4
     1a6:	7813      	ldrb	r3, [r2, #0]
     1a8:	021b      	lsls	r3, r3, #8
     1aa:	7852      	ldrb	r2, [r2, #1]
     1ac:	4313      	orrs	r3, r2
     1ae:	22a0      	movs	r2, #160	; 0xa0
     1b0:	0212      	lsls	r2, r2, #8
     1b2:	4293      	cmp	r3, r2
     1b4:	d002      	beq.n	1bc <AD_scan+0x50>
	return 1;
     1b6:	3001      	adds	r0, #1
     1b8:	e000      	b.n	1bc <AD_scan+0x50>
     1ba:	2001      	movs	r0, #1
}
     1bc:	b002      	add	sp, #8
     1be:	bd10      	pop	{r4, pc}
     1c0:	20000064 	.word	0x20000064
     1c4:	20000068 	.word	0x20000068
     1c8:	20000070 	.word	0x20000070
     1cc:	20000034 	.word	0x20000034
     1d0:	00000ba5 	.word	0x00000ba5
     1d4:	00000b01 	.word	0x00000b01
     1d8:	000038b0 	.word	0x000038b0
     1dc:	00000115 	.word	0x00000115

000001e0 <AD_set_bytes>:

uint8_t AD_set_bytes(AD_i2c_reg_t reg, uint8_t *value) {
     1e0:	b530      	push	{r4, r5, lr}
     1e2:	b085      	sub	sp, #20
     1e4:	ab01      	add	r3, sp, #4
     1e6:	8018      	strh	r0, [r3, #0]
     1e8:	000d      	movs	r5, r1
	uint8_t addr_d_buf[2];
	for (uint8_t i = 0; i < reg.size; i++) {
     1ea:	2400      	movs	r4, #0
     1ec:	e00f      	b.n	20e <AD_set_bytes+0x2e>
		addr_d_buf[0] = reg.addr + i;
     1ee:	ab01      	add	r3, sp, #4
     1f0:	781b      	ldrb	r3, [r3, #0]
     1f2:	18e3      	adds	r3, r4, r3
     1f4:	a903      	add	r1, sp, #12
     1f6:	700b      	strb	r3, [r1, #0]
		addr_d_buf[1] = value[i];
     1f8:	5d2b      	ldrb	r3, [r5, r4]
     1fa:	704b      	strb	r3, [r1, #1]
		if ((ret = io_write(i2c_mst_io, addr_d_buf, 2)) < I2C_OK) return ret;
     1fc:	4b07      	ldr	r3, [pc, #28]	; (21c <AD_set_bytes+0x3c>)
     1fe:	6818      	ldr	r0, [r3, #0]
     200:	2202      	movs	r2, #2
     202:	4b07      	ldr	r3, [pc, #28]	; (220 <AD_set_bytes+0x40>)
     204:	4798      	blx	r3
     206:	4b07      	ldr	r3, [pc, #28]	; (224 <AD_set_bytes+0x44>)
     208:	7018      	strb	r0, [r3, #0]
	for (uint8_t i = 0; i < reg.size; i++) {
     20a:	3401      	adds	r4, #1
     20c:	b2e4      	uxtb	r4, r4
     20e:	ab01      	add	r3, sp, #4
     210:	785b      	ldrb	r3, [r3, #1]
     212:	429c      	cmp	r4, r3
     214:	d3eb      	bcc.n	1ee <AD_set_bytes+0xe>
	}
	return I2C_OK;
}
     216:	2000      	movs	r0, #0
     218:	b005      	add	sp, #20
     21a:	bd30      	pop	{r4, r5, pc}
     21c:	20000034 	.word	0x20000034
     220:	00000bad 	.word	0x00000bad
     224:	20000066 	.word	0x20000066

00000228 <AD_reset>:

uint8_t AD_reset(void) {
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
	uint8_t val[2];
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
     22c:	a901      	add	r1, sp, #4
     22e:	4b0a      	ldr	r3, [pc, #40]	; (258 <AD_reset+0x30>)
     230:	6818      	ldr	r0, [r3, #0]
     232:	4b0a      	ldr	r3, [pc, #40]	; (25c <AD_reset+0x34>)
     234:	4798      	blx	r3
     236:	4a0a      	ldr	r2, [pc, #40]	; (260 <AD_reset+0x38>)
     238:	7010      	strb	r0, [r2, #0]
     23a:	2800      	cmp	r0, #0
     23c:	d001      	beq.n	242 <AD_reset+0x1a>
	val[1] |= CTRL_RESET;
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
}
     23e:	b003      	add	sp, #12
     240:	bd00      	pop	{pc}
	val[1] |= CTRL_RESET;
     242:	a901      	add	r1, sp, #4
     244:	784b      	ldrb	r3, [r1, #1]
     246:	2210      	movs	r2, #16
     248:	4313      	orrs	r3, r2
     24a:	704b      	strb	r3, [r1, #1]
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
     24c:	4b02      	ldr	r3, [pc, #8]	; (258 <AD_reset+0x30>)
     24e:	6818      	ldr	r0, [r3, #0]
     250:	4b04      	ldr	r3, [pc, #16]	; (264 <AD_reset+0x3c>)
     252:	4798      	blx	r3
     254:	e7f3      	b.n	23e <AD_reset+0x16>
     256:	46c0      	nop			; (mov r8, r8)
     258:	000038b0 	.word	0x000038b0
     25c:	00000115 	.word	0x00000115
     260:	20000066 	.word	0x20000066
     264:	000001e1 	.word	0x000001e1

00000268 <AD_set_control_mode>:

uint8_t AD_set_control_mode(uint8_t mode) {
     268:	b510      	push	{r4, lr}
     26a:	b082      	sub	sp, #8
     26c:	0004      	movs	r4, r0
	uint8_t val[2];
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
     26e:	a901      	add	r1, sp, #4
     270:	4b0a      	ldr	r3, [pc, #40]	; (29c <AD_set_control_mode+0x34>)
     272:	6818      	ldr	r0, [r3, #0]
     274:	4b0a      	ldr	r3, [pc, #40]	; (2a0 <AD_set_control_mode+0x38>)
     276:	4798      	blx	r3
     278:	4a0a      	ldr	r2, [pc, #40]	; (2a4 <AD_set_control_mode+0x3c>)
     27a:	7010      	strb	r0, [r2, #0]
     27c:	2800      	cmp	r0, #0
     27e:	d001      	beq.n	284 <AD_set_control_mode+0x1c>
	val[0] &= 0x0F; 
	val[0] |= mode;
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
}
     280:	b002      	add	sp, #8
     282:	bd10      	pop	{r4, pc}
	val[0] &= 0x0F; 
     284:	a901      	add	r1, sp, #4
     286:	780b      	ldrb	r3, [r1, #0]
     288:	300f      	adds	r0, #15
     28a:	4018      	ands	r0, r3
	val[0] |= mode;
     28c:	4320      	orrs	r0, r4
     28e:	7008      	strb	r0, [r1, #0]
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
     290:	4b02      	ldr	r3, [pc, #8]	; (29c <AD_set_control_mode+0x34>)
     292:	6818      	ldr	r0, [r3, #0]
     294:	4b04      	ldr	r3, [pc, #16]	; (2a8 <AD_set_control_mode+0x40>)
     296:	4798      	blx	r3
     298:	e7f2      	b.n	280 <AD_set_control_mode+0x18>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	000038b0 	.word	0x000038b0
     2a0:	00000115 	.word	0x00000115
     2a4:	20000066 	.word	0x20000066
     2a8:	000001e1 	.word	0x000001e1

000002ac <AD_set_clock_external>:
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
	val[1] = CTRL_CLOCK_INTERNAL; 
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
}

uint8_t AD_set_clock_external(void) {
     2ac:	b500      	push	{lr}
     2ae:	b083      	sub	sp, #12
	clock_ext = true;
     2b0:	2201      	movs	r2, #1
     2b2:	4b0a      	ldr	r3, [pc, #40]	; (2dc <AD_set_clock_external+0x30>)
     2b4:	711a      	strb	r2, [r3, #4]
	uint8_t val[2];
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
     2b6:	a901      	add	r1, sp, #4
     2b8:	4b09      	ldr	r3, [pc, #36]	; (2e0 <AD_set_clock_external+0x34>)
     2ba:	6818      	ldr	r0, [r3, #0]
     2bc:	4b09      	ldr	r3, [pc, #36]	; (2e4 <AD_set_clock_external+0x38>)
     2be:	4798      	blx	r3
     2c0:	4a09      	ldr	r2, [pc, #36]	; (2e8 <AD_set_clock_external+0x3c>)
     2c2:	7010      	strb	r0, [r2, #0]
     2c4:	2800      	cmp	r0, #0
     2c6:	d001      	beq.n	2cc <AD_set_clock_external+0x20>
	val[1] = CTRL_CLOCK_EXTERNAL;
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
}
     2c8:	b003      	add	sp, #12
     2ca:	bd00      	pop	{pc}
	val[1] = CTRL_CLOCK_EXTERNAL;
     2cc:	a901      	add	r1, sp, #4
     2ce:	2308      	movs	r3, #8
     2d0:	704b      	strb	r3, [r1, #1]
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <AD_set_clock_external+0x34>)
     2d4:	6818      	ldr	r0, [r3, #0]
     2d6:	4b05      	ldr	r3, [pc, #20]	; (2ec <AD_set_clock_external+0x40>)
     2d8:	4798      	blx	r3
     2da:	e7f5      	b.n	2c8 <AD_set_clock_external+0x1c>
     2dc:	20000034 	.word	0x20000034
     2e0:	000038b0 	.word	0x000038b0
     2e4:	00000115 	.word	0x00000115
     2e8:	20000066 	.word	0x20000066
     2ec:	000001e1 	.word	0x000001e1

000002f0 <AD_set_settling_cycles>:

uint8_t AD_set_settling_cycles(uint32_t time) {
     2f0:	b500      	push	{lr}
     2f2:	b083      	sub	sp, #12
	uint32_t cycles;
	uint8_t settleTime[2], val;
	
	settleTime[1] = time & 0xFF;
     2f4:	ab01      	add	r3, sp, #4
     2f6:	7058      	strb	r0, [r3, #1]
	settleTime[0] = (time >> 8) & 0xFF;
     2f8:	0a00      	lsrs	r0, r0, #8
     2fa:	b2c0      	uxtb	r0, r0
     2fc:	7018      	strb	r0, [r3, #0]
	
	cycles = (settleTime[1] | (settleTime[0] & 0x1));
	val = (uint8_t)((settleTime[0] & 0x7) >> 1);
     2fe:	0840      	lsrs	r0, r0, #1
     300:	2303      	movs	r3, #3
     302:	4018      	ands	r0, r3
	
	if ((cycles > 0x1FF) || !(val == 0 || val == 1 || val == 3))
     304:	2801      	cmp	r0, #1
     306:	d904      	bls.n	312 <AD_set_settling_cycles+0x22>
     308:	2803      	cmp	r0, #3
     30a:	d002      	beq.n	312 <AD_set_settling_cycles+0x22>
	{
		return 255;
     30c:	20ff      	movs	r0, #255	; 0xff
	}

	return (AD_set_bytes(_AD_reg[AD5933_N_CYC], settleTime));
}
     30e:	b003      	add	sp, #12
     310:	bd00      	pop	{pc}
	return (AD_set_bytes(_AD_reg[AD5933_N_CYC], settleTime));
     312:	a901      	add	r1, sp, #4
     314:	4b02      	ldr	r3, [pc, #8]	; (320 <AD_set_settling_cycles+0x30>)
     316:	6898      	ldr	r0, [r3, #8]
     318:	4b02      	ldr	r3, [pc, #8]	; (324 <AD_set_settling_cycles+0x34>)
     31a:	4798      	blx	r3
     31c:	e7f7      	b.n	30e <AD_set_settling_cycles+0x1e>
     31e:	46c0      	nop			; (mov r8, r8)
     320:	000038b0 	.word	0x000038b0
     324:	000001e1 	.word	0x000001e1

00000328 <AD_set_start_freq>:

uint8_t AD_set_start_freq(uint32_t start) {
     328:	b530      	push	{r4, r5, lr}
     32a:	b083      	sub	sp, #12
	uint32_t freqHex;
	if (clock_ext) {
     32c:	4b19      	ldr	r3, [pc, #100]	; (394 <AD_set_start_freq+0x6c>)
     32e:	791b      	ldrb	r3, [r3, #4]
     330:	2b00      	cmp	r3, #0
     332:	d011      	beq.n	358 <AD_set_start_freq+0x30>
		freqHex = (start/(ext_clock_speed/4.0))*pow(2, 27);
     334:	4b18      	ldr	r3, [pc, #96]	; (398 <AD_set_start_freq+0x70>)
     336:	4798      	blx	r3
     338:	2200      	movs	r2, #0
     33a:	4b18      	ldr	r3, [pc, #96]	; (39c <AD_set_start_freq+0x74>)
     33c:	4c18      	ldr	r4, [pc, #96]	; (3a0 <AD_set_start_freq+0x78>)
     33e:	47a0      	blx	r4
     340:	2200      	movs	r2, #0
     342:	4b18      	ldr	r3, [pc, #96]	; (3a4 <AD_set_start_freq+0x7c>)
     344:	4c18      	ldr	r4, [pc, #96]	; (3a8 <AD_set_start_freq+0x80>)
     346:	47a0      	blx	r4
     348:	4b18      	ldr	r3, [pc, #96]	; (3ac <AD_set_start_freq+0x84>)
     34a:	4798      	blx	r3
	} else {
		freqHex = (start/(clock_speed/4.0))*pow(2, 27);
	}
	if (freqHex > 0xFFFFFF) return 255;
     34c:	4b18      	ldr	r3, [pc, #96]	; (3b0 <AD_set_start_freq+0x88>)
     34e:	4298      	cmp	r0, r3
     350:	d90f      	bls.n	372 <AD_set_start_freq+0x4a>
     352:	20ff      	movs	r0, #255	; 0xff
	freq_buf[2] = freqHex & 0xFF;
	
	AD_set_bytes(_AD_reg[AD5933_START_FREQ], freq_buf);
	
	return AD_get_bytes(_AD_reg[AD5933_START_FREQ], freq_buf);
}
     354:	b003      	add	sp, #12
     356:	bd30      	pop	{r4, r5, pc}
		freqHex = (start/(clock_speed/4.0))*pow(2, 27);
     358:	4b0f      	ldr	r3, [pc, #60]	; (398 <AD_set_start_freq+0x70>)
     35a:	4798      	blx	r3
     35c:	2200      	movs	r2, #0
     35e:	4b15      	ldr	r3, [pc, #84]	; (3b4 <AD_set_start_freq+0x8c>)
     360:	4c0f      	ldr	r4, [pc, #60]	; (3a0 <AD_set_start_freq+0x78>)
     362:	47a0      	blx	r4
     364:	2200      	movs	r2, #0
     366:	4b0f      	ldr	r3, [pc, #60]	; (3a4 <AD_set_start_freq+0x7c>)
     368:	4c0f      	ldr	r4, [pc, #60]	; (3a8 <AD_set_start_freq+0x80>)
     36a:	47a0      	blx	r4
     36c:	4b0f      	ldr	r3, [pc, #60]	; (3ac <AD_set_start_freq+0x84>)
     36e:	4798      	blx	r3
     370:	e7ec      	b.n	34c <AD_set_start_freq+0x24>
	freq_buf[0] = (freqHex >> 16) & 0xFF;
     372:	0c03      	lsrs	r3, r0, #16
     374:	ac01      	add	r4, sp, #4
     376:	7023      	strb	r3, [r4, #0]
	freq_buf[1] = (freqHex >> 8) & 0xFF;
     378:	0a03      	lsrs	r3, r0, #8
     37a:	7063      	strb	r3, [r4, #1]
	freq_buf[2] = freqHex & 0xFF;
     37c:	70a0      	strb	r0, [r4, #2]
	AD_set_bytes(_AD_reg[AD5933_START_FREQ], freq_buf);
     37e:	4b0e      	ldr	r3, [pc, #56]	; (3b8 <AD_set_start_freq+0x90>)
     380:	885d      	ldrh	r5, [r3, #2]
     382:	0021      	movs	r1, r4
     384:	0028      	movs	r0, r5
     386:	4b0d      	ldr	r3, [pc, #52]	; (3bc <AD_set_start_freq+0x94>)
     388:	4798      	blx	r3
	return AD_get_bytes(_AD_reg[AD5933_START_FREQ], freq_buf);
     38a:	0021      	movs	r1, r4
     38c:	0028      	movs	r0, r5
     38e:	4b0c      	ldr	r3, [pc, #48]	; (3c0 <AD_set_start_freq+0x98>)
     390:	4798      	blx	r3
     392:	e7df      	b.n	354 <AD_set_start_freq+0x2c>
     394:	20000034 	.word	0x20000034
     398:	000034b1 	.word	0x000034b1
     39c:	410e8480 	.word	0x410e8480
     3a0:	000022b5 	.word	0x000022b5
     3a4:	41a00000 	.word	0x41a00000
     3a8:	0000291d 	.word	0x0000291d
     3ac:	00002279 	.word	0x00002279
     3b0:	00ffffff 	.word	0x00ffffff
     3b4:	414fff68 	.word	0x414fff68
     3b8:	000038b0 	.word	0x000038b0
     3bc:	000001e1 	.word	0x000001e1
     3c0:	00000115 	.word	0x00000115

000003c4 <AD_set_increment_freq>:

uint8_t AD_set_increment_freq(uint32_t increment) {
     3c4:	b510      	push	{r4, lr}
     3c6:	b082      	sub	sp, #8
	uint32_t freqHex;
	if (clock_ext) {
     3c8:	4b16      	ldr	r3, [pc, #88]	; (424 <AD_set_increment_freq+0x60>)
     3ca:	791b      	ldrb	r3, [r3, #4]
     3cc:	2b00      	cmp	r3, #0
     3ce:	d011      	beq.n	3f4 <AD_set_increment_freq+0x30>
		freqHex = (increment/(ext_clock_speed/4.0))*pow(2, 27);
     3d0:	4b15      	ldr	r3, [pc, #84]	; (428 <AD_set_increment_freq+0x64>)
     3d2:	4798      	blx	r3
     3d4:	2200      	movs	r2, #0
     3d6:	4b15      	ldr	r3, [pc, #84]	; (42c <AD_set_increment_freq+0x68>)
     3d8:	4c15      	ldr	r4, [pc, #84]	; (430 <AD_set_increment_freq+0x6c>)
     3da:	47a0      	blx	r4
     3dc:	2200      	movs	r2, #0
     3de:	4b15      	ldr	r3, [pc, #84]	; (434 <AD_set_increment_freq+0x70>)
     3e0:	4c15      	ldr	r4, [pc, #84]	; (438 <AD_set_increment_freq+0x74>)
     3e2:	47a0      	blx	r4
     3e4:	4b15      	ldr	r3, [pc, #84]	; (43c <AD_set_increment_freq+0x78>)
     3e6:	4798      	blx	r3
		} else {
		freqHex = (increment/(clock_speed/4.0))*pow(2, 27);
	}
	if (freqHex > 0xFFFFFF) return 255;
     3e8:	4b15      	ldr	r3, [pc, #84]	; (440 <AD_set_increment_freq+0x7c>)
     3ea:	4298      	cmp	r0, r3
     3ec:	d90f      	bls.n	40e <AD_set_increment_freq+0x4a>
     3ee:	20ff      	movs	r0, #255	; 0xff
	freq_buf[0] = (freqHex >> 16) & 0xFF;
	freq_buf[1] = (freqHex >> 8) & 0xFF;
	freq_buf[2] = freqHex & 0xFF;
	
	return AD_set_bytes(_AD_reg[AD5933_FREQ_INC], freq_buf);
}
     3f0:	b002      	add	sp, #8
     3f2:	bd10      	pop	{r4, pc}
		freqHex = (increment/(clock_speed/4.0))*pow(2, 27);
     3f4:	4b0c      	ldr	r3, [pc, #48]	; (428 <AD_set_increment_freq+0x64>)
     3f6:	4798      	blx	r3
     3f8:	2200      	movs	r2, #0
     3fa:	4b12      	ldr	r3, [pc, #72]	; (444 <AD_set_increment_freq+0x80>)
     3fc:	4c0c      	ldr	r4, [pc, #48]	; (430 <AD_set_increment_freq+0x6c>)
     3fe:	47a0      	blx	r4
     400:	2200      	movs	r2, #0
     402:	4b0c      	ldr	r3, [pc, #48]	; (434 <AD_set_increment_freq+0x70>)
     404:	4c0c      	ldr	r4, [pc, #48]	; (438 <AD_set_increment_freq+0x74>)
     406:	47a0      	blx	r4
     408:	4b0c      	ldr	r3, [pc, #48]	; (43c <AD_set_increment_freq+0x78>)
     40a:	4798      	blx	r3
     40c:	e7ec      	b.n	3e8 <AD_set_increment_freq+0x24>
	freq_buf[0] = (freqHex >> 16) & 0xFF;
     40e:	0c03      	lsrs	r3, r0, #16
     410:	a901      	add	r1, sp, #4
     412:	700b      	strb	r3, [r1, #0]
	freq_buf[1] = (freqHex >> 8) & 0xFF;
     414:	0a03      	lsrs	r3, r0, #8
     416:	704b      	strb	r3, [r1, #1]
	freq_buf[2] = freqHex & 0xFF;
     418:	7088      	strb	r0, [r1, #2]
	return AD_set_bytes(_AD_reg[AD5933_FREQ_INC], freq_buf);
     41a:	4b0b      	ldr	r3, [pc, #44]	; (448 <AD_set_increment_freq+0x84>)
     41c:	6858      	ldr	r0, [r3, #4]
     41e:	4b0b      	ldr	r3, [pc, #44]	; (44c <AD_set_increment_freq+0x88>)
     420:	4798      	blx	r3
     422:	e7e5      	b.n	3f0 <AD_set_increment_freq+0x2c>
     424:	20000034 	.word	0x20000034
     428:	000034b1 	.word	0x000034b1
     42c:	410e8480 	.word	0x410e8480
     430:	000022b5 	.word	0x000022b5
     434:	41a00000 	.word	0x41a00000
     438:	0000291d 	.word	0x0000291d
     43c:	00002279 	.word	0x00002279
     440:	00ffffff 	.word	0x00ffffff
     444:	414fff68 	.word	0x414fff68
     448:	000038b0 	.word	0x000038b0
     44c:	000001e1 	.word	0x000001e1

00000450 <AD_set_n_increments>:

uint8_t AD_set_n_increments(uint32_t n) {
     450:	b500      	push	{lr}
     452:	b083      	sub	sp, #12
	if (n > 511) return 255;
     454:	4b07      	ldr	r3, [pc, #28]	; (474 <AD_set_n_increments+0x24>)
     456:	4298      	cmp	r0, r3
     458:	d902      	bls.n	460 <AD_set_n_increments+0x10>
     45a:	20ff      	movs	r0, #255	; 0xff
	uint8_t val[2];
	val[0] = (n >> 8) & 0xFF;
	val[1] = n & 0xFF;
	
	return AD_set_bytes(_AD_reg[AD5933_N_INC], val);
}
     45c:	b003      	add	sp, #12
     45e:	bd00      	pop	{pc}
	val[0] = (n >> 8) & 0xFF;
     460:	0a03      	lsrs	r3, r0, #8
     462:	a901      	add	r1, sp, #4
     464:	700b      	strb	r3, [r1, #0]
	val[1] = n & 0xFF;
     466:	7048      	strb	r0, [r1, #1]
	return AD_set_bytes(_AD_reg[AD5933_N_INC], val);
     468:	4b03      	ldr	r3, [pc, #12]	; (478 <AD_set_n_increments+0x28>)
     46a:	88d8      	ldrh	r0, [r3, #6]
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <AD_set_n_increments+0x2c>)
     46e:	4798      	blx	r3
     470:	e7f4      	b.n	45c <AD_set_n_increments+0xc>
     472:	46c0      	nop			; (mov r8, r8)
     474:	000001ff 	.word	0x000001ff
     478:	000038b0 	.word	0x000038b0
     47c:	000001e1 	.word	0x000001e1

00000480 <AD_set_PGA_gain>:

uint8_t AD_set_PGA_gain(uint8_t gain) {
     480:	b510      	push	{r4, lr}
     482:	b082      	sub	sp, #8
     484:	0004      	movs	r4, r0
	uint8_t val[2];
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
     486:	a901      	add	r1, sp, #4
     488:	4b0e      	ldr	r3, [pc, #56]	; (4c4 <AD_set_PGA_gain+0x44>)
     48a:	6818      	ldr	r0, [r3, #0]
     48c:	4b0e      	ldr	r3, [pc, #56]	; (4c8 <AD_set_PGA_gain+0x48>)
     48e:	4798      	blx	r3
     490:	4a0e      	ldr	r2, [pc, #56]	; (4cc <AD_set_PGA_gain+0x4c>)
     492:	7010      	strb	r0, [r2, #0]
     494:	2800      	cmp	r0, #0
     496:	d111      	bne.n	4bc <AD_set_PGA_gain+0x3c>
	
	val[0] &= 0xFE;
     498:	aa01      	add	r2, sp, #4
     49a:	7813      	ldrb	r3, [r2, #0]
     49c:	2101      	movs	r1, #1
     49e:	438b      	bics	r3, r1
     4a0:	7013      	strb	r3, [r2, #0]
	
	switch (gain) {
     4a2:	2c00      	cmp	r4, #0
     4a4:	d005      	beq.n	4b2 <AD_set_PGA_gain+0x32>
     4a6:	2c01      	cmp	r4, #1
     4a8:	d10a      	bne.n	4c0 <AD_set_PGA_gain+0x40>
		case CTRL_PGA_GAIN_X1:
			val[0] |= CTRL_PGA_GAIN_X1;
     4aa:	2201      	movs	r2, #1
     4ac:	4313      	orrs	r3, r2
     4ae:	aa01      	add	r2, sp, #4
     4b0:	7013      	strb	r3, [r2, #0]
			break;		
		default:
			return 255;
	}
	
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
     4b2:	a901      	add	r1, sp, #4
     4b4:	4b03      	ldr	r3, [pc, #12]	; (4c4 <AD_set_PGA_gain+0x44>)
     4b6:	6818      	ldr	r0, [r3, #0]
     4b8:	4b05      	ldr	r3, [pc, #20]	; (4d0 <AD_set_PGA_gain+0x50>)
     4ba:	4798      	blx	r3
}
     4bc:	b002      	add	sp, #8
     4be:	bd10      	pop	{r4, pc}
			return 255;
     4c0:	20ff      	movs	r0, #255	; 0xff
     4c2:	e7fb      	b.n	4bc <AD_set_PGA_gain+0x3c>
     4c4:	000038b0 	.word	0x000038b0
     4c8:	00000115 	.word	0x00000115
     4cc:	20000066 	.word	0x20000066
     4d0:	000001e1 	.word	0x000001e1

000004d4 <AD_set_range>:

uint8_t AD_set_range(uint8_t range) {
     4d4:	b510      	push	{r4, lr}
     4d6:	b082      	sub	sp, #8
     4d8:	0004      	movs	r4, r0
	uint8_t val[2];
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
     4da:	a901      	add	r1, sp, #4
     4dc:	4b13      	ldr	r3, [pc, #76]	; (52c <AD_set_range+0x58>)
     4de:	6818      	ldr	r0, [r3, #0]
     4e0:	4b13      	ldr	r3, [pc, #76]	; (530 <AD_set_range+0x5c>)
     4e2:	4798      	blx	r3
     4e4:	4a13      	ldr	r2, [pc, #76]	; (534 <AD_set_range+0x60>)
     4e6:	7010      	strb	r0, [r2, #0]
     4e8:	2800      	cmp	r0, #0
     4ea:	d118      	bne.n	51e <AD_set_range+0x4a>
	
	val[0] &= 0xF9;
     4ec:	aa01      	add	r2, sp, #4
     4ee:	7813      	ldrb	r3, [r2, #0]
     4f0:	2106      	movs	r1, #6
     4f2:	438b      	bics	r3, r1
     4f4:	7013      	strb	r3, [r2, #0]
	
	switch (range) {
     4f6:	2c04      	cmp	r4, #4
     4f8:	d013      	beq.n	522 <AD_set_range+0x4e>
     4fa:	2c06      	cmp	r4, #6
     4fc:	d006      	beq.n	50c <AD_set_range+0x38>
     4fe:	2c00      	cmp	r4, #0
     500:	d008      	beq.n	514 <AD_set_range+0x40>
			break;
		case CTRL_OUTPUT_RANGE_3:
			val[0] |= CTRL_OUTPUT_RANGE_3; // 400mv p-p
			break;
		default:
			val[0] |= CTRL_OUTPUT_RANGE_4; // 200mv p-p
     502:	2202      	movs	r2, #2
     504:	4313      	orrs	r3, r2
     506:	aa01      	add	r2, sp, #4
     508:	7013      	strb	r3, [r2, #0]
     50a:	e003      	b.n	514 <AD_set_range+0x40>
			val[0] |= CTRL_OUTPUT_RANGE_2; // 1v p-p
     50c:	2206      	movs	r2, #6
     50e:	4313      	orrs	r3, r2
     510:	aa01      	add	r2, sp, #4
     512:	7013      	strb	r3, [r2, #0]
	}
	
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
     514:	a901      	add	r1, sp, #4
     516:	4b05      	ldr	r3, [pc, #20]	; (52c <AD_set_range+0x58>)
     518:	6818      	ldr	r0, [r3, #0]
     51a:	4b07      	ldr	r3, [pc, #28]	; (538 <AD_set_range+0x64>)
     51c:	4798      	blx	r3
}
     51e:	b002      	add	sp, #8
     520:	bd10      	pop	{r4, pc}
			val[0] |= CTRL_OUTPUT_RANGE_3; // 400mv p-p
     522:	2204      	movs	r2, #4
     524:	4313      	orrs	r3, r2
     526:	aa01      	add	r2, sp, #4
     528:	7013      	strb	r3, [r2, #0]
			break;
     52a:	e7f3      	b.n	514 <AD_set_range+0x40>
     52c:	000038b0 	.word	0x000038b0
     530:	00000115 	.word	0x00000115
     534:	20000066 	.word	0x20000066
     538:	000001e1 	.word	0x000001e1

0000053c <AD_set_power_mode>:
													 // what if it isn't how do we want to handle this here? TODO: test
	
	return AD_set_power_mode(POWER_STANDBY);
}

uint8_t AD_set_power_mode(uint8_t level) {
     53c:	b510      	push	{r4, lr}
	switch(level) {
     53e:	28a0      	cmp	r0, #160	; 0xa0
     540:	d00c      	beq.n	55c <AD_set_power_mode+0x20>
     542:	28b0      	cmp	r0, #176	; 0xb0
     544:	d006      	beq.n	554 <AD_set_power_mode+0x18>
     546:	2800      	cmp	r0, #0
     548:	d001      	beq.n	54e <AD_set_power_mode+0x12>
		case POWER_STANDBY:
			return AD_set_control_mode(CTRL_STANDBY_MODE);
		case POWER_DOWN:
			return AD_set_control_mode(CTRL_POWER_DOWN_MODE);
		default:
			return 255;
     54a:	20ff      	movs	r0, #255	; 0xff
     54c:	e001      	b.n	552 <AD_set_power_mode+0x16>
			return AD_set_control_mode(CTRL_NO_OPERATION);
     54e:	4b05      	ldr	r3, [pc, #20]	; (564 <AD_set_power_mode+0x28>)
     550:	4798      	blx	r3
	}
     552:	bd10      	pop	{r4, pc}
			return AD_set_control_mode(CTRL_STANDBY_MODE);
     554:	20b0      	movs	r0, #176	; 0xb0
     556:	4b03      	ldr	r3, [pc, #12]	; (564 <AD_set_power_mode+0x28>)
     558:	4798      	blx	r3
     55a:	e7fa      	b.n	552 <AD_set_power_mode+0x16>
			return AD_set_control_mode(CTRL_POWER_DOWN_MODE);
     55c:	20a0      	movs	r0, #160	; 0xa0
     55e:	4b01      	ldr	r3, [pc, #4]	; (564 <AD_set_power_mode+0x28>)
     560:	4798      	blx	r3
     562:	e7f6      	b.n	552 <AD_set_power_mode+0x16>
     564:	00000269 	.word	0x00000269

00000568 <AD_get_complex_data>:
uint8_t AD_get_complex_data(uint8_t *real, uint8_t *img) {
     568:	b530      	push	{r4, r5, lr}
     56a:	b083      	sub	sp, #12
     56c:	0004      	movs	r4, r0
     56e:	000d      	movs	r5, r1
	if ((ret = AD_set_power_mode(POWER_STANDBY)) != I2C_OK) return ret;
     570:	20b0      	movs	r0, #176	; 0xb0
     572:	4b2b      	ldr	r3, [pc, #172]	; (620 <AD_get_complex_data+0xb8>)
     574:	4798      	blx	r3
     576:	1e03      	subs	r3, r0, #0
     578:	4a2a      	ldr	r2, [pc, #168]	; (624 <AD_get_complex_data+0xbc>)
     57a:	7010      	strb	r0, [r2, #0]
     57c:	d002      	beq.n	584 <AD_get_complex_data+0x1c>
}
     57e:	0018      	movs	r0, r3
     580:	b003      	add	sp, #12
     582:	bd30      	pop	{r4, r5, pc}
	if ((ret = AD_set_control_mode(CTRL_INIT_START_FREQ)) != I2C_OK) return ret;
     584:	2010      	movs	r0, #16
     586:	4b28      	ldr	r3, [pc, #160]	; (628 <AD_get_complex_data+0xc0>)
     588:	4798      	blx	r3
     58a:	1e03      	subs	r3, r0, #0
     58c:	4a25      	ldr	r2, [pc, #148]	; (624 <AD_get_complex_data+0xbc>)
     58e:	7010      	strb	r0, [r2, #0]
     590:	d1f5      	bne.n	57e <AD_get_complex_data+0x16>
	if ((ret = AD_set_control_mode(CTRL_START_FREQ_SWEEP)) != I2C_OK) return ret;
     592:	2020      	movs	r0, #32
     594:	4b24      	ldr	r3, [pc, #144]	; (628 <AD_get_complex_data+0xc0>)
     596:	4798      	blx	r3
     598:	1e03      	subs	r3, r0, #0
     59a:	4a22      	ldr	r2, [pc, #136]	; (624 <AD_get_complex_data+0xbc>)
     59c:	7010      	strb	r0, [r2, #0]
     59e:	d1ee      	bne.n	57e <AD_get_complex_data+0x16>
	uint8_t status_reg = 0;
     5a0:	2200      	movs	r2, #0
     5a2:	466b      	mov	r3, sp
     5a4:	71da      	strb	r2, [r3, #7]
		if ((ret = AD_get_bytes(_AD_reg[AD5933_STAT], &status_reg)) != I2C_OK) return ret; // can we save cycles by not pointing?
     5a6:	4b21      	ldr	r3, [pc, #132]	; (62c <AD_get_complex_data+0xc4>)
     5a8:	8958      	ldrh	r0, [r3, #10]
     5aa:	466b      	mov	r3, sp
     5ac:	1dd9      	adds	r1, r3, #7
     5ae:	4b20      	ldr	r3, [pc, #128]	; (630 <AD_get_complex_data+0xc8>)
     5b0:	4798      	blx	r3
     5b2:	1e03      	subs	r3, r0, #0
     5b4:	4a1b      	ldr	r2, [pc, #108]	; (624 <AD_get_complex_data+0xbc>)
     5b6:	7010      	strb	r0, [r2, #0]
     5b8:	d1e1      	bne.n	57e <AD_get_complex_data+0x16>
	} while((status_reg & STATUS_DATA_VALID) != STATUS_DATA_VALID);
     5ba:	466b      	mov	r3, sp
     5bc:	3307      	adds	r3, #7
     5be:	781b      	ldrb	r3, [r3, #0]
     5c0:	079b      	lsls	r3, r3, #30
     5c2:	d5f0      	bpl.n	5a6 <AD_get_complex_data+0x3e>
	if ((ret = AD_get_bytes(_AD_reg[AD5933_REAL], real)) != I2C_OK) return ret;
     5c4:	4b19      	ldr	r3, [pc, #100]	; (62c <AD_get_complex_data+0xc4>)
     5c6:	89d8      	ldrh	r0, [r3, #14]
     5c8:	0021      	movs	r1, r4
     5ca:	4b19      	ldr	r3, [pc, #100]	; (630 <AD_get_complex_data+0xc8>)
     5cc:	4798      	blx	r3
     5ce:	1e03      	subs	r3, r0, #0
     5d0:	4a14      	ldr	r2, [pc, #80]	; (624 <AD_get_complex_data+0xbc>)
     5d2:	7010      	strb	r0, [r2, #0]
     5d4:	d1d3      	bne.n	57e <AD_get_complex_data+0x16>
	if ((ret = AD_get_bytes(_AD_reg[AD5933_IMGY], img))  != I2C_OK) return ret;
     5d6:	0029      	movs	r1, r5
     5d8:	4b14      	ldr	r3, [pc, #80]	; (62c <AD_get_complex_data+0xc4>)
     5da:	6918      	ldr	r0, [r3, #16]
     5dc:	4b14      	ldr	r3, [pc, #80]	; (630 <AD_get_complex_data+0xc8>)
     5de:	4798      	blx	r3
     5e0:	1e03      	subs	r3, r0, #0
     5e2:	4a10      	ldr	r2, [pc, #64]	; (624 <AD_get_complex_data+0xbc>)
     5e4:	7010      	strb	r0, [r2, #0]
     5e6:	d1ca      	bne.n	57e <AD_get_complex_data+0x16>
	if ((ret = AD_set_control_mode(CTRL_INCREMENT_FREQ)) != I2C_OK) return ret;
     5e8:	2030      	movs	r0, #48	; 0x30
     5ea:	4b0f      	ldr	r3, [pc, #60]	; (628 <AD_get_complex_data+0xc0>)
     5ec:	4798      	blx	r3
     5ee:	1e03      	subs	r3, r0, #0
     5f0:	4a0c      	ldr	r2, [pc, #48]	; (624 <AD_get_complex_data+0xbc>)
     5f2:	7010      	strb	r0, [r2, #0]
     5f4:	d1c3      	bne.n	57e <AD_get_complex_data+0x16>
		if ((ret = AD_get_bytes(_AD_reg[AD5933_STAT], &status_reg)) != I2C_OK) return ret;
     5f6:	4b0d      	ldr	r3, [pc, #52]	; (62c <AD_get_complex_data+0xc4>)
     5f8:	8958      	ldrh	r0, [r3, #10]
     5fa:	466b      	mov	r3, sp
     5fc:	1dd9      	adds	r1, r3, #7
     5fe:	4b0c      	ldr	r3, [pc, #48]	; (630 <AD_get_complex_data+0xc8>)
     600:	4798      	blx	r3
     602:	1e03      	subs	r3, r0, #0
     604:	4a07      	ldr	r2, [pc, #28]	; (624 <AD_get_complex_data+0xbc>)
     606:	7010      	strb	r0, [r2, #0]
     608:	d1b9      	bne.n	57e <AD_get_complex_data+0x16>
	} while ((status_reg & STATUS_SWEEP_DONE) != STATUS_SWEEP_DONE); // sweep should be done as we have no increments expected
     60a:	466b      	mov	r3, sp
     60c:	3307      	adds	r3, #7
     60e:	781b      	ldrb	r3, [r3, #0]
     610:	075b      	lsls	r3, r3, #29
     612:	d5f0      	bpl.n	5f6 <AD_get_complex_data+0x8e>
	return AD_set_power_mode(POWER_STANDBY);
     614:	20b0      	movs	r0, #176	; 0xb0
     616:	4b02      	ldr	r3, [pc, #8]	; (620 <AD_get_complex_data+0xb8>)
     618:	4798      	blx	r3
     61a:	0003      	movs	r3, r0
     61c:	e7af      	b.n	57e <AD_get_complex_data+0x16>
     61e:	46c0      	nop			; (mov r8, r8)
     620:	0000053d 	.word	0x0000053d
     624:	20000066 	.word	0x20000066
     628:	00000269 	.word	0x00000269
     62c:	000038b0 	.word	0x000038b0
     630:	00000115 	.word	0x00000115

00000634 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     634:	b510      	push	{r4, lr}
	system_init();
     636:	4b01      	ldr	r3, [pc, #4]	; (63c <atmel_start_init+0x8>)
     638:	4798      	blx	r3
}
     63a:	bd10      	pop	{r4, pc}
     63c:	000007dd 	.word	0x000007dd

00000640 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     640:	e7fe      	b.n	640 <Dummy_Handler>
	...

00000644 <Reset_Handler>:
{
     644:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     646:	4a12      	ldr	r2, [pc, #72]	; (690 <Reset_Handler+0x4c>)
     648:	4b12      	ldr	r3, [pc, #72]	; (694 <Reset_Handler+0x50>)
     64a:	429a      	cmp	r2, r3
     64c:	d009      	beq.n	662 <Reset_Handler+0x1e>
     64e:	4b11      	ldr	r3, [pc, #68]	; (694 <Reset_Handler+0x50>)
     650:	4a0f      	ldr	r2, [pc, #60]	; (690 <Reset_Handler+0x4c>)
     652:	e003      	b.n	65c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     654:	6811      	ldr	r1, [r2, #0]
     656:	6019      	str	r1, [r3, #0]
     658:	3304      	adds	r3, #4
     65a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     65c:	490e      	ldr	r1, [pc, #56]	; (698 <Reset_Handler+0x54>)
     65e:	428b      	cmp	r3, r1
     660:	d3f8      	bcc.n	654 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     662:	4b0e      	ldr	r3, [pc, #56]	; (69c <Reset_Handler+0x58>)
     664:	e002      	b.n	66c <Reset_Handler+0x28>
                *pDest++ = 0;
     666:	2200      	movs	r2, #0
     668:	601a      	str	r2, [r3, #0]
     66a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     66c:	4a0c      	ldr	r2, [pc, #48]	; (6a0 <Reset_Handler+0x5c>)
     66e:	4293      	cmp	r3, r2
     670:	d3f9      	bcc.n	666 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     672:	4a0c      	ldr	r2, [pc, #48]	; (6a4 <Reset_Handler+0x60>)
     674:	21ff      	movs	r1, #255	; 0xff
     676:	4b0c      	ldr	r3, [pc, #48]	; (6a8 <Reset_Handler+0x64>)
     678:	438b      	bics	r3, r1
     67a:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     67c:	4a0b      	ldr	r2, [pc, #44]	; (6ac <Reset_Handler+0x68>)
     67e:	6851      	ldr	r1, [r2, #4]
     680:	2380      	movs	r3, #128	; 0x80
     682:	430b      	orrs	r3, r1
     684:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     686:	4b0a      	ldr	r3, [pc, #40]	; (6b0 <Reset_Handler+0x6c>)
     688:	4798      	blx	r3
        main();
     68a:	4b0a      	ldr	r3, [pc, #40]	; (6b4 <Reset_Handler+0x70>)
     68c:	4798      	blx	r3
     68e:	e7fe      	b.n	68e <Reset_Handler+0x4a>
     690:	00003ad8 	.word	0x00003ad8
     694:	20000000 	.word	0x20000000
     698:	20000018 	.word	0x20000018
     69c:	20000018 	.word	0x20000018
     6a0:	200000a0 	.word	0x200000a0
     6a4:	e000ed00 	.word	0xe000ed00
     6a8:	00000000 	.word	0x00000000
     6ac:	41004000 	.word	0x41004000
     6b0:	000037d9 	.word	0x000037d9
     6b4:	0000188d 	.word	0x0000188d

000006b8 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6b8:	2280      	movs	r2, #128	; 0x80
     6ba:	23c0      	movs	r3, #192	; 0xc0
     6bc:	05db      	lsls	r3, r3, #23
     6be:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6c0:	4a0a      	ldr	r2, [pc, #40]	; (6ec <ADC_0_PORT_init+0x34>)
     6c2:	4b0b      	ldr	r3, [pc, #44]	; (6f0 <ADC_0_PORT_init+0x38>)
     6c4:	6293      	str	r3, [r2, #40]	; 0x28
     6c6:	23c0      	movs	r3, #192	; 0xc0
     6c8:	061b      	lsls	r3, r3, #24
     6ca:	6293      	str	r3, [r2, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6cc:	2147      	movs	r1, #71	; 0x47
     6ce:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6d0:	2001      	movs	r0, #1
     6d2:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6d4:	4303      	orrs	r3, r0
     6d6:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6d8:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6da:	3914      	subs	r1, #20
     6dc:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6de:	200f      	movs	r0, #15
     6e0:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     6e2:	2010      	movs	r0, #16
     6e4:	4303      	orrs	r3, r0
     6e6:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6e8:	5453      	strb	r3, [r2, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(EMG_ADC, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(EMG_ADC, PINMUX_PA07B_ADC_AIN7);
}
     6ea:	4770      	bx	lr
     6ec:	40002800 	.word	0x40002800
     6f0:	40000080 	.word	0x40000080

000006f4 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC;
     6f4:	4a04      	ldr	r2, [pc, #16]	; (708 <ADC_0_CLOCK_init+0x14>)
     6f6:	6a13      	ldr	r3, [r2, #32]
     6f8:	2108      	movs	r1, #8
     6fa:	430b      	orrs	r3, r1
     6fc:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     6fe:	313a      	adds	r1, #58	; 0x3a
     700:	23f8      	movs	r3, #248	; 0xf8
     702:	4a02      	ldr	r2, [pc, #8]	; (70c <ADC_0_CLOCK_init+0x18>)
     704:	50d1      	str	r1, [r2, r3]

void ADC_0_CLOCK_init(void)
{
	hri_mclk_set_APBDMASK_ADC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC_GCLK_ID, CONF_GCLK_ADC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     706:	4770      	bx	lr
     708:	40000400 	.word	0x40000400
     70c:	40001800 	.word	0x40001800

00000710 <ADC_0_init>:

void ADC_0_init(void)
{
     710:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     712:	4b05      	ldr	r3, [pc, #20]	; (728 <ADC_0_init+0x18>)
     714:	4798      	blx	r3
	ADC_0_PORT_init();
     716:	4b05      	ldr	r3, [pc, #20]	; (72c <ADC_0_init+0x1c>)
     718:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     71a:	2200      	movs	r2, #0
     71c:	4904      	ldr	r1, [pc, #16]	; (730 <ADC_0_init+0x20>)
     71e:	4805      	ldr	r0, [pc, #20]	; (734 <ADC_0_init+0x24>)
     720:	4b05      	ldr	r3, [pc, #20]	; (738 <ADC_0_init+0x28>)
     722:	4798      	blx	r3
}
     724:	bd10      	pop	{r4, pc}
     726:	46c0      	nop			; (mov r8, r8)
     728:	000006f5 	.word	0x000006f5
     72c:	000006b9 	.word	0x000006b9
     730:	43000c00 	.word	0x43000c00
     734:	2000006c 	.word	0x2000006c
     738:	00000919 	.word	0x00000919

0000073c <I2C_MST_PORT_init>:

void I2C_MST_PORT_init(void)
{
     73c:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     73e:	4b13      	ldr	r3, [pc, #76]	; (78c <I2C_MST_PORT_init+0x50>)
     740:	2050      	movs	r0, #80	; 0x50
     742:	5c19      	ldrb	r1, [r3, r0]
     744:	2204      	movs	r2, #4
     746:	4391      	bics	r1, r2
     748:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     74a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     74c:	2501      	movs	r5, #1
     74e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     750:	2401      	movs	r4, #1
     752:	4321      	orrs	r1, r4
     754:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     756:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     758:	3818      	subs	r0, #24
     75a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     75c:	260f      	movs	r6, #15
     75e:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     760:	2602      	movs	r6, #2
     762:	4331      	orrs	r1, r6
     764:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     766:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     768:	2151      	movs	r1, #81	; 0x51
     76a:	5c5e      	ldrb	r6, [r3, r1]
     76c:	4396      	bics	r6, r2
     76e:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     770:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     772:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     774:	4322      	orrs	r2, r4
     776:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     778:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     77a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     77c:	3942      	subs	r1, #66	; 0x42
     77e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     780:	2120      	movs	r1, #32
     782:	430a      	orrs	r2, r1
     784:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     786:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(I2C_SCL, PINMUX_PA17C_SERCOM1_PAD1);
}
     788:	bd70      	pop	{r4, r5, r6, pc}
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	40002800 	.word	0x40002800

00000790 <I2C_MST_CLOCK_init>:
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <I2C_MST_CLOCK_init+0x1c>)
     792:	2142      	movs	r1, #66	; 0x42
     794:	22cc      	movs	r2, #204	; 0xcc
     796:	5099      	str	r1, [r3, r2]
     798:	3101      	adds	r1, #1
     79a:	3a08      	subs	r2, #8
     79c:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     79e:	4a04      	ldr	r2, [pc, #16]	; (7b0 <I2C_MST_CLOCK_init+0x20>)
     7a0:	69d3      	ldr	r3, [r2, #28]
     7a2:	3941      	subs	r1, #65	; 0x41
     7a4:	430b      	orrs	r3, r1
     7a6:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
}
     7a8:	4770      	bx	lr
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	40001800 	.word	0x40001800
     7b0:	40000400 	.word	0x40000400

000007b4 <I2C_MST_init>:

void I2C_MST_init(void)
{
     7b4:	b510      	push	{r4, lr}
	I2C_MST_CLOCK_init();
     7b6:	4b04      	ldr	r3, [pc, #16]	; (7c8 <I2C_MST_init+0x14>)
     7b8:	4798      	blx	r3
	i2c_m_sync_init(&I2C_MST, SERCOM1);
     7ba:	4904      	ldr	r1, [pc, #16]	; (7cc <I2C_MST_init+0x18>)
     7bc:	4804      	ldr	r0, [pc, #16]	; (7d0 <I2C_MST_init+0x1c>)
     7be:	4b05      	ldr	r3, [pc, #20]	; (7d4 <I2C_MST_init+0x20>)
     7c0:	4798      	blx	r3
	I2C_MST_PORT_init();
     7c2:	4b05      	ldr	r3, [pc, #20]	; (7d8 <I2C_MST_init+0x24>)
     7c4:	4798      	blx	r3
}
     7c6:	bd10      	pop	{r4, pc}
     7c8:	00000791 	.word	0x00000791
     7cc:	42000400 	.word	0x42000400
     7d0:	20000070 	.word	0x20000070
     7d4:	00000ab5 	.word	0x00000ab5
     7d8:	0000073d 	.word	0x0000073d

000007dc <system_init>:

void system_init(void)
{
     7dc:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     7de:	4b42      	ldr	r3, [pc, #264]	; (8e8 <system_init+0x10c>)
     7e0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7e2:	4b42      	ldr	r3, [pc, #264]	; (8ec <system_init+0x110>)
     7e4:	2248      	movs	r2, #72	; 0x48
     7e6:	5c99      	ldrb	r1, [r3, r2]
     7e8:	2604      	movs	r6, #4
     7ea:	43b1      	bics	r1, r6
     7ec:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ee:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f0:	2101      	movs	r1, #1
     7f2:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f4:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7f6:	3201      	adds	r2, #1
     7f8:	5c98      	ldrb	r0, [r3, r2]
     7fa:	43b0      	bics	r0, r6
     7fc:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7fe:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     800:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     802:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     804:	22c0      	movs	r2, #192	; 0xc0
     806:	05d2      	lsls	r2, r2, #23
     808:	2080      	movs	r0, #128	; 0x80
     80a:	00c0      	lsls	r0, r0, #3
     80c:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     80e:	4c38      	ldr	r4, [pc, #224]	; (8f0 <system_init+0x114>)
     810:	629c      	str	r4, [r3, #40]	; 0x28
     812:	24c0      	movs	r4, #192	; 0xc0
     814:	0624      	lsls	r4, r4, #24
     816:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     818:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     81a:	254a      	movs	r5, #74	; 0x4a
     81c:	5d58      	ldrb	r0, [r3, r5]
     81e:	43b0      	bics	r0, r6
     820:	5558      	strb	r0, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     822:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     824:	4388      	bics	r0, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     826:	2601      	movs	r6, #1
     828:	4330      	orrs	r0, r6
     82a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     82c:	5558      	strb	r0, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     82e:	3d15      	subs	r5, #21
     830:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     832:	260f      	movs	r6, #15
     834:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
     836:	2607      	movs	r6, #7
     838:	4330      	orrs	r0, r6
     83a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     83c:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     83e:	2080      	movs	r0, #128	; 0x80
     840:	0100      	lsls	r0, r0, #4
     842:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     844:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     846:	482b      	ldr	r0, [pc, #172]	; (8f4 <system_init+0x118>)
     848:	6298      	str	r0, [r3, #40]	; 0x28
     84a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     84c:	3516      	adds	r5, #22
     84e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     850:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     852:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     854:	2080      	movs	r0, #128	; 0x80
     856:	01c0      	lsls	r0, r0, #7
     858:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     85a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     85c:	4826      	ldr	r0, [pc, #152]	; (8f8 <system_init+0x11c>)
     85e:	6298      	str	r0, [r3, #40]	; 0x28
     860:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     862:	3503      	adds	r5, #3
     864:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     866:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     868:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     86a:	2080      	movs	r0, #128	; 0x80
     86c:	0200      	lsls	r0, r0, #8
     86e:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     870:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     872:	4822      	ldr	r0, [pc, #136]	; (8fc <system_init+0x120>)
     874:	6298      	str	r0, [r3, #40]	; 0x28
     876:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     878:	244f      	movs	r4, #79	; 0x4f
     87a:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     87c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     87e:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     880:	2080      	movs	r0, #128	; 0x80
     882:	03c0      	lsls	r0, r0, #15
     884:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     886:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     888:	2080      	movs	r0, #128	; 0x80
     88a:	05c0      	lsls	r0, r0, #23
     88c:	6298      	str	r0, [r3, #40]	; 0x28
     88e:	4c1c      	ldr	r4, [pc, #112]	; (900 <system_init+0x124>)
     890:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     892:	3508      	adds	r5, #8
     894:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     896:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     898:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     89a:	2480      	movs	r4, #128	; 0x80
     89c:	0424      	lsls	r4, r4, #16
     89e:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8a0:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8a2:	6298      	str	r0, [r3, #40]	; 0x28
     8a4:	4c17      	ldr	r4, [pc, #92]	; (904 <system_init+0x128>)
     8a6:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8a8:	3501      	adds	r5, #1
     8aa:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ac:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8ae:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8b0:	2480      	movs	r4, #128	; 0x80
     8b2:	0464      	lsls	r4, r4, #17
     8b4:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8b6:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8b8:	6298      	str	r0, [r3, #40]	; 0x28
     8ba:	4c13      	ldr	r4, [pc, #76]	; (908 <system_init+0x12c>)
     8bc:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8be:	3501      	adds	r5, #1
     8c0:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8c2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8c4:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8c6:	2480      	movs	r4, #128	; 0x80
     8c8:	04a4      	lsls	r4, r4, #18
     8ca:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8cc:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8ce:	6298      	str	r0, [r3, #40]	; 0x28
     8d0:	4a0e      	ldr	r2, [pc, #56]	; (90c <system_init+0x130>)
     8d2:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8d4:	2059      	movs	r0, #89	; 0x59
     8d6:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8d8:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8da:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(SW_IMP, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SW_IMP, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     8dc:	4b0c      	ldr	r3, [pc, #48]	; (910 <system_init+0x134>)
     8de:	4798      	blx	r3

	I2C_MST_init();
     8e0:	4b0c      	ldr	r3, [pc, #48]	; (914 <system_init+0x138>)
     8e2:	4798      	blx	r3
}
     8e4:	bd70      	pop	{r4, r5, r6, pc}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	00000e59 	.word	0x00000e59
     8ec:	40002800 	.word	0x40002800
     8f0:	40000400 	.word	0x40000400
     8f4:	40000800 	.word	0x40000800
     8f8:	40004000 	.word	0x40004000
     8fc:	40008000 	.word	0x40008000
     900:	c0000040 	.word	0xc0000040
     904:	c0000080 	.word	0xc0000080
     908:	c0000100 	.word	0xc0000100
     90c:	c0000200 	.word	0xc0000200
     910:	00000711 	.word	0x00000711
     914:	000007b5 	.word	0x000007b5

00000918 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     918:	b570      	push	{r4, r5, r6, lr}
     91a:	0004      	movs	r4, r0
     91c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     91e:	2800      	cmp	r0, #0
     920:	d00d      	beq.n	93e <adc_sync_init+0x26>
     922:	2900      	cmp	r1, #0
     924:	d009      	beq.n	93a <adc_sync_init+0x22>
     926:	2001      	movs	r0, #1
     928:	2239      	movs	r2, #57	; 0x39
     92a:	4906      	ldr	r1, [pc, #24]	; (944 <adc_sync_init+0x2c>)
     92c:	4b06      	ldr	r3, [pc, #24]	; (948 <adc_sync_init+0x30>)
     92e:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     930:	0029      	movs	r1, r5
     932:	0020      	movs	r0, r4
     934:	4b05      	ldr	r3, [pc, #20]	; (94c <adc_sync_init+0x34>)
     936:	4798      	blx	r3
}
     938:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     93a:	2000      	movs	r0, #0
     93c:	e7f4      	b.n	928 <adc_sync_init+0x10>
     93e:	2000      	movs	r0, #0
     940:	e7f2      	b.n	928 <adc_sync_init+0x10>
     942:	46c0      	nop			; (mov r8, r8)
     944:	000038c4 	.word	0x000038c4
     948:	00000c1d 	.word	0x00000c1d
     94c:	00000db1 	.word	0x00000db1

00000950 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     950:	b570      	push	{r4, r5, r6, lr}
     952:	0004      	movs	r4, r0
     954:	000d      	movs	r5, r1
	ASSERT(descr);
     956:	1e43      	subs	r3, r0, #1
     958:	4198      	sbcs	r0, r3
     95a:	b2c0      	uxtb	r0, r0
     95c:	224e      	movs	r2, #78	; 0x4e
     95e:	4904      	ldr	r1, [pc, #16]	; (970 <adc_sync_enable_channel+0x20>)
     960:	4b04      	ldr	r3, [pc, #16]	; (974 <adc_sync_enable_channel+0x24>)
     962:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     964:	0029      	movs	r1, r5
     966:	0020      	movs	r0, r4
     968:	4b03      	ldr	r3, [pc, #12]	; (978 <adc_sync_enable_channel+0x28>)
     96a:	4798      	blx	r3

	return ERR_NONE;
}
     96c:	2000      	movs	r0, #0
     96e:	bd70      	pop	{r4, r5, r6, pc}
     970:	000038c4 	.word	0x000038c4
     974:	00000c1d 	.word	0x00000c1d
     978:	00000de9 	.word	0x00000de9

0000097c <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     97e:	46ce      	mov	lr, r9
     980:	4647      	mov	r7, r8
     982:	b580      	push	{r7, lr}
     984:	0006      	movs	r6, r0
     986:	000d      	movs	r5, r1
     988:	4690      	mov	r8, r2
     98a:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     98c:	2800      	cmp	r0, #0
     98e:	d01a      	beq.n	9c6 <adc_sync_read_channel+0x4a>
     990:	2a00      	cmp	r2, #0
     992:	d01a      	beq.n	9ca <adc_sync_read_channel+0x4e>
     994:	464b      	mov	r3, r9
     996:	2b00      	cmp	r3, #0
     998:	d119      	bne.n	9ce <adc_sync_read_channel+0x52>
     99a:	2000      	movs	r0, #0
     99c:	2267      	movs	r2, #103	; 0x67
     99e:	491c      	ldr	r1, [pc, #112]	; (a10 <adc_sync_read_channel+0x94>)
     9a0:	4f1c      	ldr	r7, [pc, #112]	; (a14 <adc_sync_read_channel+0x98>)
     9a2:	47b8      	blx	r7
	data_size = _adc_sync_get_data_size(&descr->device);
     9a4:	0034      	movs	r4, r6
     9a6:	0030      	movs	r0, r6
     9a8:	4b1b      	ldr	r3, [pc, #108]	; (a18 <adc_sync_read_channel+0x9c>)
     9aa:	4798      	blx	r3
     9ac:	0001      	movs	r1, r0
     9ae:	0006      	movs	r6, r0
	ASSERT(!(length % data_size));
     9b0:	4648      	mov	r0, r9
     9b2:	4b1a      	ldr	r3, [pc, #104]	; (a1c <adc_sync_read_channel+0xa0>)
     9b4:	4798      	blx	r3
     9b6:	4248      	negs	r0, r1
     9b8:	4148      	adcs	r0, r1
     9ba:	b2c0      	uxtb	r0, r0
     9bc:	2269      	movs	r2, #105	; 0x69
     9be:	4914      	ldr	r1, [pc, #80]	; (a10 <adc_sync_read_channel+0x94>)
     9c0:	47b8      	blx	r7
	uint16_t offset = 0;
     9c2:	2700      	movs	r7, #0
     9c4:	e009      	b.n	9da <adc_sync_read_channel+0x5e>
	ASSERT(descr && buffer && length);
     9c6:	2000      	movs	r0, #0
     9c8:	e7e8      	b.n	99c <adc_sync_read_channel+0x20>
     9ca:	2000      	movs	r0, #0
     9cc:	e7e6      	b.n	99c <adc_sync_read_channel+0x20>
     9ce:	2001      	movs	r0, #1
     9d0:	e7e4      	b.n	99c <adc_sync_read_channel+0x20>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
     9d2:	19bf      	adds	r7, r7, r6
     9d4:	b2bf      	uxth	r7, r7
	} while (offset < length);
     9d6:	45b9      	cmp	r9, r7
     9d8:	d915      	bls.n	a06 <adc_sync_read_channel+0x8a>
		_adc_sync_convert(&descr->device);
     9da:	0020      	movs	r0, r4
     9dc:	4b10      	ldr	r3, [pc, #64]	; (a20 <adc_sync_read_channel+0xa4>)
     9de:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     9e0:	0029      	movs	r1, r5
     9e2:	0020      	movs	r0, r4
     9e4:	4b0f      	ldr	r3, [pc, #60]	; (a24 <adc_sync_read_channel+0xa8>)
     9e6:	4798      	blx	r3
     9e8:	2800      	cmp	r0, #0
     9ea:	d0f9      	beq.n	9e0 <adc_sync_read_channel+0x64>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     9ec:	0029      	movs	r1, r5
     9ee:	0020      	movs	r0, r4
     9f0:	4b0d      	ldr	r3, [pc, #52]	; (a28 <adc_sync_read_channel+0xac>)
     9f2:	4798      	blx	r3
		buffer[offset] = result;
     9f4:	4643      	mov	r3, r8
     9f6:	55d8      	strb	r0, [r3, r7]
		if (1 < data_size) {
     9f8:	2e01      	cmp	r6, #1
     9fa:	d9ea      	bls.n	9d2 <adc_sync_read_channel+0x56>
			buffer[offset + 1] = result >> 8;
     9fc:	1c7b      	adds	r3, r7, #1
     9fe:	0a00      	lsrs	r0, r0, #8
     a00:	4642      	mov	r2, r8
     a02:	54d0      	strb	r0, [r2, r3]
     a04:	e7e5      	b.n	9d2 <adc_sync_read_channel+0x56>

	return offset;
}
     a06:	0038      	movs	r0, r7
     a08:	bc0c      	pop	{r2, r3}
     a0a:	4690      	mov	r8, r2
     a0c:	4699      	mov	r9, r3
     a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a10:	000038c4 	.word	0x000038c4
     a14:	00000c1d 	.word	0x00000c1d
     a18:	00000dfd 	.word	0x00000dfd
     a1c:	0000226d 	.word	0x0000226d
     a20:	00000e1d 	.word	0x00000e1d
     a24:	00000e13 	.word	0x00000e13
     a28:	00000e31 	.word	0x00000e31

00000a2c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     a2c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     a2e:	4b04      	ldr	r3, [pc, #16]	; (a40 <delay_us+0x14>)
     a30:	681c      	ldr	r4, [r3, #0]
     a32:	4b04      	ldr	r3, [pc, #16]	; (a44 <delay_us+0x18>)
     a34:	4798      	blx	r3
     a36:	0001      	movs	r1, r0
     a38:	0020      	movs	r0, r4
     a3a:	4b03      	ldr	r3, [pc, #12]	; (a48 <delay_us+0x1c>)
     a3c:	4798      	blx	r3
}
     a3e:	bd10      	pop	{r4, pc}
     a40:	2000003c 	.word	0x2000003c
     a44:	00000e39 	.word	0x00000e39
     a48:	00000e51 	.word	0x00000e51

00000a4c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     a4c:	b510      	push	{r4, lr}
     a4e:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     a50:	3814      	subs	r0, #20
     a52:	8b84      	ldrh	r4, [r0, #28]
     a54:	ab01      	add	r3, sp, #4
     a56:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     a58:	0014      	movs	r4, r2
     a5a:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     a5c:	4a06      	ldr	r2, [pc, #24]	; (a78 <i2c_m_sync_write+0x2c>)
     a5e:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     a60:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a62:	0019      	movs	r1, r3
     a64:	4b05      	ldr	r3, [pc, #20]	; (a7c <i2c_m_sync_write+0x30>)
     a66:	4798      	blx	r3

	if (ret) {
     a68:	2800      	cmp	r0, #0
     a6a:	d102      	bne.n	a72 <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     a6c:	0020      	movs	r0, r4
     a6e:	b004      	add	sp, #16
     a70:	bd10      	pop	{r4, pc}
		return ret;
     a72:	0004      	movs	r4, r0
     a74:	e7fa      	b.n	a6c <i2c_m_sync_write+0x20>
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	ffff8000 	.word	0xffff8000
     a7c:	000014b5 	.word	0x000014b5

00000a80 <i2c_m_sync_read>:
{
     a80:	b510      	push	{r4, lr}
     a82:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     a84:	3814      	subs	r0, #20
     a86:	8b84      	ldrh	r4, [r0, #28]
     a88:	ab01      	add	r3, sp, #4
     a8a:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     a8c:	0014      	movs	r4, r2
     a8e:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     a90:	4a06      	ldr	r2, [pc, #24]	; (aac <i2c_m_sync_read+0x2c>)
     a92:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     a94:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a96:	0019      	movs	r1, r3
     a98:	4b05      	ldr	r3, [pc, #20]	; (ab0 <i2c_m_sync_read+0x30>)
     a9a:	4798      	blx	r3
	if (ret) {
     a9c:	2800      	cmp	r0, #0
     a9e:	d102      	bne.n	aa6 <i2c_m_sync_read+0x26>
}
     aa0:	0020      	movs	r0, r4
     aa2:	b004      	add	sp, #16
     aa4:	bd10      	pop	{r4, pc}
		return ret;
     aa6:	0004      	movs	r4, r0
     aa8:	e7fa      	b.n	aa0 <i2c_m_sync_read+0x20>
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	ffff8001 	.word	0xffff8001
     ab0:	000014b5 	.word	0x000014b5

00000ab4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     ab4:	b570      	push	{r4, r5, r6, lr}
     ab6:	0004      	movs	r4, r0
     ab8:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     aba:	1e43      	subs	r3, r0, #1
     abc:	4198      	sbcs	r0, r3
     abe:	b2c0      	uxtb	r0, r0
     ac0:	225e      	movs	r2, #94	; 0x5e
     ac2:	4907      	ldr	r1, [pc, #28]	; (ae0 <i2c_m_sync_init+0x2c>)
     ac4:	4b07      	ldr	r3, [pc, #28]	; (ae4 <i2c_m_sync_init+0x30>)
     ac6:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     ac8:	0029      	movs	r1, r5
     aca:	0020      	movs	r0, r4
     acc:	4b06      	ldr	r3, [pc, #24]	; (ae8 <i2c_m_sync_init+0x34>)
     ace:	4798      	blx	r3
	if (init_status) {
     ad0:	2800      	cmp	r0, #0
     ad2:	d103      	bne.n	adc <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     ad4:	4b05      	ldr	r3, [pc, #20]	; (aec <i2c_m_sync_init+0x38>)
     ad6:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     ad8:	4b05      	ldr	r3, [pc, #20]	; (af0 <i2c_m_sync_init+0x3c>)
     ada:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     adc:	bd70      	pop	{r4, r5, r6, pc}
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	000038e0 	.word	0x000038e0
     ae4:	00000c1d 	.word	0x00000c1d
     ae8:	00001405 	.word	0x00001405
     aec:	00000a81 	.word	0x00000a81
     af0:	00000a4d 	.word	0x00000a4d

00000af4 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     af4:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     af6:	4b01      	ldr	r3, [pc, #4]	; (afc <i2c_m_sync_enable+0x8>)
     af8:	4798      	blx	r3
}
     afa:	bd10      	pop	{r4, pc}
     afc:	00001435 	.word	0x00001435

00000b00 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     b00:	0589      	lsls	r1, r1, #22
     b02:	0d89      	lsrs	r1, r1, #22
     b04:	2380      	movs	r3, #128	; 0x80
     b06:	00db      	lsls	r3, r3, #3
     b08:	401a      	ands	r2, r3
     b0a:	430a      	orrs	r2, r1
     b0c:	8382      	strh	r2, [r0, #28]
}
     b0e:	0010      	movs	r0, r2
     b10:	4770      	bx	lr
	...

00000b14 <i2c_m_sync_cmd_write>:

/**
 * \brief Sync version of i2c write command
 */
int32_t i2c_m_sync_cmd_write(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     b14:	b570      	push	{r4, r5, r6, lr}
     b16:	b086      	sub	sp, #24
     b18:	0004      	movs	r4, r0
     b1a:	0016      	movs	r6, r2
     b1c:	001d      	movs	r5, r3
     b1e:	466b      	mov	r3, sp
     b20:	71d9      	strb	r1, [r3, #7]
     b22:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     b24:	8b82      	ldrh	r2, [r0, #28]
     b26:	a903      	add	r1, sp, #12
     b28:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     b2a:	2201      	movs	r2, #1
     b2c:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     b2e:	2200      	movs	r2, #0
     b30:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     b32:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     b34:	4b07      	ldr	r3, [pc, #28]	; (b54 <i2c_m_sync_cmd_write+0x40>)
     b36:	4798      	blx	r3

	if (ret != 0) {
     b38:	2800      	cmp	r0, #0
     b3a:	d001      	beq.n	b40 <i2c_m_sync_cmd_write+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     b3c:	b006      	add	sp, #24
     b3e:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP;
     b40:	a903      	add	r1, sp, #12
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <i2c_m_sync_cmd_write+0x44>)
     b44:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     b46:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     b48:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     b4a:	0020      	movs	r0, r4
     b4c:	4b01      	ldr	r3, [pc, #4]	; (b54 <i2c_m_sync_cmd_write+0x40>)
     b4e:	4798      	blx	r3
     b50:	e7f4      	b.n	b3c <i2c_m_sync_cmd_write+0x28>
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	000014b5 	.word	0x000014b5
     b58:	ffff8000 	.word	0xffff8000

00000b5c <i2c_m_sync_cmd_read>:

/**
 * \brief Sync version of i2c read command
 */
int32_t i2c_m_sync_cmd_read(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     b5c:	b570      	push	{r4, r5, r6, lr}
     b5e:	b086      	sub	sp, #24
     b60:	0004      	movs	r4, r0
     b62:	0016      	movs	r6, r2
     b64:	001d      	movs	r5, r3
     b66:	466b      	mov	r3, sp
     b68:	71d9      	strb	r1, [r3, #7]
     b6a:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     b6c:	8b82      	ldrh	r2, [r0, #28]
     b6e:	a903      	add	r1, sp, #12
     b70:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     b72:	2201      	movs	r2, #1
     b74:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     b76:	2200      	movs	r2, #0
     b78:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     b7a:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     b7c:	4b07      	ldr	r3, [pc, #28]	; (b9c <i2c_m_sync_cmd_read+0x40>)
     b7e:	4798      	blx	r3

	if (ret != 0) {
     b80:	2800      	cmp	r0, #0
     b82:	d001      	beq.n	b88 <i2c_m_sync_cmd_read+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     b84:	b006      	add	sp, #24
     b86:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     b88:	a903      	add	r1, sp, #12
     b8a:	4b05      	ldr	r3, [pc, #20]	; (ba0 <i2c_m_sync_cmd_read+0x44>)
     b8c:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     b8e:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     b90:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     b92:	0020      	movs	r0, r4
     b94:	4b01      	ldr	r3, [pc, #4]	; (b9c <i2c_m_sync_cmd_read+0x40>)
     b96:	4798      	blx	r3
     b98:	e7f4      	b.n	b84 <i2c_m_sync_cmd_read+0x28>
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	000014b5 	.word	0x000014b5
     ba0:	ffff8001 	.word	0xffff8001

00000ba4 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     ba4:	3014      	adds	r0, #20
     ba6:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     ba8:	2000      	movs	r0, #0
     baa:	4770      	bx	lr

00000bac <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     bac:	b570      	push	{r4, r5, r6, lr}
     bae:	0004      	movs	r4, r0
     bb0:	000d      	movs	r5, r1
     bb2:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     bb4:	2800      	cmp	r0, #0
     bb6:	d00e      	beq.n	bd6 <io_write+0x2a>
     bb8:	2900      	cmp	r1, #0
     bba:	d00a      	beq.n	bd2 <io_write+0x26>
     bbc:	2001      	movs	r0, #1
     bbe:	2234      	movs	r2, #52	; 0x34
     bc0:	4906      	ldr	r1, [pc, #24]	; (bdc <io_write+0x30>)
     bc2:	4b07      	ldr	r3, [pc, #28]	; (be0 <io_write+0x34>)
     bc4:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     bc6:	6823      	ldr	r3, [r4, #0]
     bc8:	0032      	movs	r2, r6
     bca:	0029      	movs	r1, r5
     bcc:	0020      	movs	r0, r4
     bce:	4798      	blx	r3
}
     bd0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     bd2:	2000      	movs	r0, #0
     bd4:	e7f3      	b.n	bbe <io_write+0x12>
     bd6:	2000      	movs	r0, #0
     bd8:	e7f1      	b.n	bbe <io_write+0x12>
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	000038fc 	.word	0x000038fc
     be0:	00000c1d 	.word	0x00000c1d

00000be4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     be4:	b570      	push	{r4, r5, r6, lr}
     be6:	0004      	movs	r4, r0
     be8:	000d      	movs	r5, r1
     bea:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     bec:	2800      	cmp	r0, #0
     bee:	d00e      	beq.n	c0e <io_read+0x2a>
     bf0:	2900      	cmp	r1, #0
     bf2:	d00a      	beq.n	c0a <io_read+0x26>
     bf4:	2001      	movs	r0, #1
     bf6:	223d      	movs	r2, #61	; 0x3d
     bf8:	4906      	ldr	r1, [pc, #24]	; (c14 <io_read+0x30>)
     bfa:	4b07      	ldr	r3, [pc, #28]	; (c18 <io_read+0x34>)
     bfc:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     bfe:	6863      	ldr	r3, [r4, #4]
     c00:	0032      	movs	r2, r6
     c02:	0029      	movs	r1, r5
     c04:	0020      	movs	r0, r4
     c06:	4798      	blx	r3
}
     c08:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     c0a:	2000      	movs	r0, #0
     c0c:	e7f3      	b.n	bf6 <io_read+0x12>
     c0e:	2000      	movs	r0, #0
     c10:	e7f1      	b.n	bf6 <io_read+0x12>
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	000038fc 	.word	0x000038fc
     c18:	00000c1d 	.word	0x00000c1d

00000c1c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     c1c:	2800      	cmp	r0, #0
     c1e:	d100      	bne.n	c22 <assert+0x6>
		__asm("BKPT #0");
     c20:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     c22:	4770      	bx	lr

00000c24 <_adc_get_hardware_index>:
static uint8_t _adc_get_hardware_index(const void *const hw)
{

	(void)hw;
	return 0;
}
     c24:	2000      	movs	r0, #0
     c26:	4770      	bx	lr

00000c28 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
     c28:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     c2a:	4b0b      	ldr	r3, [pc, #44]	; (c58 <_adc_get_regs+0x30>)
     c2c:	4798      	blx	r3
     c2e:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     c30:	2000      	movs	r0, #0
     c32:	2800      	cmp	r0, #0
     c34:	d006      	beq.n	c44 <_adc_get_regs+0x1c>
		if (_adcs[i].number == n) {
			return i;
		}
	}

	ASSERT(false);
     c36:	228c      	movs	r2, #140	; 0x8c
     c38:	4908      	ldr	r1, [pc, #32]	; (c5c <_adc_get_regs+0x34>)
     c3a:	2000      	movs	r0, #0
     c3c:	4b08      	ldr	r3, [pc, #32]	; (c60 <_adc_get_regs+0x38>)
     c3e:	4798      	blx	r3
	return 0;
     c40:	2000      	movs	r0, #0
}
     c42:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     c44:	00c3      	lsls	r3, r0, #3
     c46:	1a1b      	subs	r3, r3, r0
     c48:	0099      	lsls	r1, r3, #2
     c4a:	4b06      	ldr	r3, [pc, #24]	; (c64 <_adc_get_regs+0x3c>)
     c4c:	5ccb      	ldrb	r3, [r1, r3]
     c4e:	429a      	cmp	r2, r3
     c50:	d0f7      	beq.n	c42 <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     c52:	3001      	adds	r0, #1
     c54:	b2c0      	uxtb	r0, r0
     c56:	e7ec      	b.n	c32 <_adc_get_regs+0xa>
     c58:	00000c25 	.word	0x00000c25
     c5c:	0000392c 	.word	0x0000392c
     c60:	00000c1d 	.word	0x00000c1d
     c64:	00003910 	.word	0x00003910

00000c68 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     c68:	b570      	push	{r4, r5, r6, lr}
     c6a:	0004      	movs	r4, r0
     c6c:	000d      	movs	r5, r1
	uint16_t calib_reg = 0;
	calib_reg          = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC_FUSES_BIASREFBUF_ADDR >> ADC_FUSES_BIASREFBUF_Pos))
     c6e:	4b4b      	ldr	r3, [pc, #300]	; (d9c <_adc_init+0x134>)
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	021e      	lsls	r6, r3, #8
     c74:	22e0      	movs	r2, #224	; 0xe0
     c76:	00d2      	lsls	r2, r2, #3
     c78:	4032      	ands	r2, r6
	            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC_FUSES_BIASCOMP_ADDR >> ADC_FUSES_BIASCOMP_Pos));
     c7a:	08db      	lsrs	r3, r3, #3
     c7c:	2607      	movs	r6, #7
     c7e:	401e      	ands	r6, r3
	calib_reg          = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC_FUSES_BIASREFBUF_ADDR >> ADC_FUSES_BIASREFBUF_Pos))
     c80:	4316      	orrs	r6, r2

	ASSERT(hw == ADC);
     c82:	4b47      	ldr	r3, [pc, #284]	; (da0 <_adc_init+0x138>)
     c84:	18c0      	adds	r0, r0, r3
     c86:	4243      	negs	r3, r0
     c88:	4158      	adcs	r0, r3
     c8a:	b2c0      	uxtb	r0, r0
     c8c:	22ad      	movs	r2, #173	; 0xad
     c8e:	4945      	ldr	r1, [pc, #276]	; (da4 <_adc_init+0x13c>)
     c90:	4b45      	ldr	r3, [pc, #276]	; (da8 <_adc_init+0x140>)
     c92:	4798      	blx	r3
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     c94:	8c23      	ldrh	r3, [r4, #32]

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     c96:	07db      	lsls	r3, r3, #31
     c98:	d414      	bmi.n	cc4 <_adc_init+0x5c>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c9a:	8c23      	ldrh	r3, [r4, #32]
     c9c:	079b      	lsls	r3, r3, #30
     c9e:	d1fc      	bne.n	c9a <_adc_init+0x32>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     ca0:	7823      	ldrb	r3, [r4, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     ca2:	079b      	lsls	r3, r3, #30
     ca4:	d509      	bpl.n	cba <_adc_init+0x52>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     ca6:	7823      	ldrb	r3, [r4, #0]
     ca8:	2202      	movs	r2, #2
     caa:	4393      	bics	r3, r2
     cac:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cae:	8c23      	ldrh	r3, [r4, #32]
     cb0:	079b      	lsls	r3, r3, #30
     cb2:	d1fc      	bne.n	cae <_adc_init+0x46>
     cb4:	8c23      	ldrh	r3, [r4, #32]
     cb6:	079b      	lsls	r3, r3, #30
     cb8:	d4fc      	bmi.n	cb4 <_adc_init+0x4c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     cba:	2301      	movs	r3, #1
     cbc:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cbe:	8c23      	ldrh	r3, [r4, #32]
     cc0:	079b      	lsls	r3, r3, #30
     cc2:	d1fc      	bne.n	cbe <_adc_init+0x56>
     cc4:	8c23      	ldrh	r3, [r4, #32]
     cc6:	07db      	lsls	r3, r3, #31
     cc8:	d4fc      	bmi.n	cc4 <_adc_init+0x5c>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     cca:	85a6      	strh	r6, [r4, #44]	; 0x2c
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     ccc:	00ea      	lsls	r2, r5, #3
     cce:	1b52      	subs	r2, r2, r5
     cd0:	0091      	lsls	r1, r2, #2
     cd2:	4b36      	ldr	r3, [pc, #216]	; (dac <_adc_init+0x144>)
     cd4:	185b      	adds	r3, r3, r1
     cd6:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->CTRLB.reg = data;
     cd8:	7062      	strb	r2, [r4, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     cda:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->REFCTRL.reg = data;
     cdc:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     cde:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->EVCTRL.reg = data;
     ce0:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     ce2:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->INPUTCTRL.reg = data;
     ce4:	8123      	strh	r3, [r4, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ce6:	8c23      	ldrh	r3, [r4, #32]
     ce8:	055b      	lsls	r3, r3, #21
     cea:	d1fc      	bne.n	ce6 <_adc_init+0x7e>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     cec:	00eb      	lsls	r3, r5, #3
     cee:	1b5b      	subs	r3, r3, r5
     cf0:	009a      	lsls	r2, r3, #2
     cf2:	4b2e      	ldr	r3, [pc, #184]	; (dac <_adc_init+0x144>)
     cf4:	189b      	adds	r3, r3, r2
     cf6:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->CTRLC.reg = data;
     cf8:	8163      	strh	r3, [r4, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cfa:	8c23      	ldrh	r3, [r4, #32]
     cfc:	055b      	lsls	r3, r3, #21
     cfe:	d1fc      	bne.n	cfa <_adc_init+0x92>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     d00:	00eb      	lsls	r3, r5, #3
     d02:	1b5b      	subs	r3, r3, r5
     d04:	009a      	lsls	r2, r3, #2
     d06:	4b29      	ldr	r3, [pc, #164]	; (dac <_adc_init+0x144>)
     d08:	189b      	adds	r3, r3, r2
     d0a:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
     d0c:	7323      	strb	r3, [r4, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d0e:	8c23      	ldrh	r3, [r4, #32]
     d10:	055b      	lsls	r3, r3, #21
     d12:	d1fc      	bne.n	d0e <_adc_init+0xa6>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     d14:	00eb      	lsls	r3, r5, #3
     d16:	1b5b      	subs	r3, r3, r5
     d18:	009a      	lsls	r2, r3, #2
     d1a:	4b24      	ldr	r3, [pc, #144]	; (dac <_adc_init+0x144>)
     d1c:	189b      	adds	r3, r3, r2
     d1e:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
     d20:	7363      	strb	r3, [r4, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d22:	8c23      	ldrh	r3, [r4, #32]
     d24:	055b      	lsls	r3, r3, #21
     d26:	d1fc      	bne.n	d22 <_adc_init+0xba>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     d28:	00eb      	lsls	r3, r5, #3
     d2a:	1b5b      	subs	r3, r3, r5
     d2c:	009a      	lsls	r2, r3, #2
     d2e:	4b1f      	ldr	r3, [pc, #124]	; (dac <_adc_init+0x144>)
     d30:	189b      	adds	r3, r3, r2
     d32:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
     d34:	81e3      	strh	r3, [r4, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d36:	8c23      	ldrh	r3, [r4, #32]
     d38:	065b      	lsls	r3, r3, #25
     d3a:	d4fc      	bmi.n	d36 <_adc_init+0xce>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     d3c:	00eb      	lsls	r3, r5, #3
     d3e:	1b5b      	subs	r3, r3, r5
     d40:	009a      	lsls	r2, r3, #2
     d42:	4b1a      	ldr	r3, [pc, #104]	; (dac <_adc_init+0x144>)
     d44:	189b      	adds	r3, r3, r2
     d46:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
     d48:	8223      	strh	r3, [r4, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d4a:	8c23      	ldrh	r3, [r4, #32]
     d4c:	061b      	lsls	r3, r3, #24
     d4e:	d4fc      	bmi.n	d4a <_adc_init+0xe2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     d50:	00eb      	lsls	r3, r5, #3
     d52:	1b5b      	subs	r3, r3, r5
     d54:	009a      	lsls	r2, r3, #2
     d56:	4b15      	ldr	r3, [pc, #84]	; (dac <_adc_init+0x144>)
     d58:	189b      	adds	r3, r3, r2
     d5a:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
     d5c:	8263      	strh	r3, [r4, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d5e:	8c23      	ldrh	r3, [r4, #32]
     d60:	05db      	lsls	r3, r3, #23
     d62:	d4fc      	bmi.n	d5e <_adc_init+0xf6>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     d64:	00eb      	lsls	r3, r5, #3
     d66:	1b5b      	subs	r3, r3, r5
     d68:	009a      	lsls	r2, r3, #2
     d6a:	4b10      	ldr	r3, [pc, #64]	; (dac <_adc_init+0x144>)
     d6c:	189b      	adds	r3, r3, r2
     d6e:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
     d70:	82a3      	strh	r3, [r4, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d72:	8c23      	ldrh	r3, [r4, #32]
     d74:	059b      	lsls	r3, r3, #22
     d76:	d4fc      	bmi.n	d72 <_adc_init+0x10a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     d78:	4a0c      	ldr	r2, [pc, #48]	; (dac <_adc_init+0x144>)
     d7a:	00eb      	lsls	r3, r5, #3
     d7c:	1b58      	subs	r0, r3, r5
     d7e:	0081      	lsls	r1, r0, #2
     d80:	0008      	movs	r0, r1
     d82:	1851      	adds	r1, r2, r1
     d84:	7d09      	ldrb	r1, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
     d86:	7721      	strb	r1, [r4, #28]
	((Adc *)hw)->SEQCTRL.reg = data;
     d88:	2100      	movs	r1, #0
     d8a:	62a1      	str	r1, [r4, #40]	; 0x28
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     d8c:	1812      	adds	r2, r2, r0
     d8e:	7853      	ldrb	r3, [r2, #1]
	((Adc *)hw)->CTRLA.reg = data;
     d90:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d92:	8c23      	ldrh	r3, [r4, #32]
     d94:	079b      	lsls	r3, r3, #30
     d96:	d1fc      	bne.n	d92 <_adc_init+0x12a>

	return ERR_NONE;
}
     d98:	2000      	movs	r0, #0
     d9a:	bd70      	pop	{r4, r5, r6, pc}
     d9c:	00806020 	.word	0x00806020
     da0:	bcfff400 	.word	0xbcfff400
     da4:	0000392c 	.word	0x0000392c
     da8:	00000c1d 	.word	0x00000c1d
     dac:	00003910 	.word	0x00003910

00000db0 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     db0:	b570      	push	{r4, r5, r6, lr}
     db2:	0005      	movs	r5, r0
     db4:	000c      	movs	r4, r1
	ASSERT(device);
     db6:	1e43      	subs	r3, r0, #1
     db8:	4198      	sbcs	r0, r3
     dba:	b2c0      	uxtb	r0, r0
     dbc:	22db      	movs	r2, #219	; 0xdb
     dbe:	4906      	ldr	r1, [pc, #24]	; (dd8 <_adc_sync_init+0x28>)
     dc0:	4b06      	ldr	r3, [pc, #24]	; (ddc <_adc_sync_init+0x2c>)
     dc2:	4798      	blx	r3

	device->hw = hw;
     dc4:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     dc6:	0020      	movs	r0, r4
     dc8:	4b05      	ldr	r3, [pc, #20]	; (de0 <_adc_sync_init+0x30>)
     dca:	4798      	blx	r3
     dcc:	0001      	movs	r1, r0
     dce:	0020      	movs	r0, r4
     dd0:	4b04      	ldr	r3, [pc, #16]	; (de4 <_adc_sync_init+0x34>)
     dd2:	4798      	blx	r3
}
     dd4:	bd70      	pop	{r4, r5, r6, pc}
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	0000392c 	.word	0x0000392c
     ddc:	00000c1d 	.word	0x00000c1d
     de0:	00000c29 	.word	0x00000c29
     de4:	00000c69 	.word	0x00000c69

00000de8 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     de8:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     dea:	7813      	ldrb	r3, [r2, #0]
     dec:	2102      	movs	r1, #2
     dee:	430b      	orrs	r3, r1
     df0:	b2db      	uxtb	r3, r3
     df2:	7013      	strb	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     df4:	8c13      	ldrh	r3, [r2, #32]
     df6:	079b      	lsls	r3, r3, #30
     df8:	d1fc      	bne.n	df4 <_adc_sync_enable_channel+0xc>
}
     dfa:	4770      	bx	lr

00000dfc <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     dfc:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLC.reg;
     dfe:	895a      	ldrh	r2, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
     e00:	0912      	lsrs	r2, r2, #4
     e02:	2303      	movs	r3, #3
     e04:	4013      	ands	r3, r2
     e06:	2b03      	cmp	r3, #3
     e08:	d001      	beq.n	e0e <_adc_sync_get_data_size+0x12>
     e0a:	2002      	movs	r0, #2
}
     e0c:	4770      	bx	lr
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     e0e:	2001      	movs	r0, #1
     e10:	e7fc      	b.n	e0c <_adc_sync_get_data_size+0x10>

00000e12 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
     e12:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
     e14:	7998      	ldrb	r0, [r3, #6]
     e16:	2301      	movs	r3, #1
     e18:	4018      	ands	r0, r3
}
     e1a:	4770      	bx	lr

00000e1c <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
     e1c:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
     e1e:	7e13      	ldrb	r3, [r2, #24]
     e20:	2102      	movs	r1, #2
     e22:	430b      	orrs	r3, r1
     e24:	b2db      	uxtb	r3, r3
     e26:	7613      	strb	r3, [r2, #24]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     e28:	8c13      	ldrh	r3, [r2, #32]
     e2a:	055b      	lsls	r3, r3, #21
     e2c:	d1fc      	bne.n	e28 <_adc_sync_convert+0xc>
}
     e2e:	4770      	bx	lr

00000e30 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
     e30:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
     e32:	8c98      	ldrh	r0, [r3, #36]	; 0x24
     e34:	b280      	uxth	r0, r0
}
     e36:	4770      	bx	lr

00000e38 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     e38:	b510      	push	{r4, lr}
		return (us * (freq / 100000) + 29) / 30;
     e3a:	0103      	lsls	r3, r0, #4
     e3c:	1a1b      	subs	r3, r3, r0
     e3e:	0158      	lsls	r0, r3, #5
     e40:	301d      	adds	r0, #29
     e42:	211e      	movs	r1, #30
     e44:	4b01      	ldr	r3, [pc, #4]	; (e4c <_get_cycles_for_us+0x14>)
     e46:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     e48:	bd10      	pop	{r4, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	00001f8d 	.word	0x00001f8d

00000e50 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     e50:	3901      	subs	r1, #1
     e52:	d8fd      	bhi.n	e50 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     e54:	4770      	bx	lr
	...

00000e58 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e58:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     e5a:	4a0b      	ldr	r2, [pc, #44]	; (e88 <_init_chip+0x30>)
     e5c:	6853      	ldr	r3, [r2, #4]
     e5e:	2106      	movs	r1, #6
     e60:	430b      	orrs	r3, r1
     e62:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     e64:	2002      	movs	r0, #2
     e66:	4b09      	ldr	r3, [pc, #36]	; (e8c <_init_chip+0x34>)
     e68:	4798      	blx	r3

	_osc32kctrl_init_sources();
     e6a:	4b09      	ldr	r3, [pc, #36]	; (e90 <_init_chip+0x38>)
     e6c:	4798      	blx	r3
	_oscctrl_init_sources();
     e6e:	4b09      	ldr	r3, [pc, #36]	; (e94 <_init_chip+0x3c>)
     e70:	4798      	blx	r3
	_mclk_init();
     e72:	4b09      	ldr	r3, [pc, #36]	; (e98 <_init_chip+0x40>)
     e74:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     e76:	2002      	movs	r0, #2
     e78:	4c08      	ldr	r4, [pc, #32]	; (e9c <_init_chip+0x44>)
     e7a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     e7c:	4b08      	ldr	r3, [pc, #32]	; (ea0 <_init_chip+0x48>)
     e7e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e80:	20fd      	movs	r0, #253	; 0xfd
     e82:	47a0      	blx	r4
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     e84:	bd10      	pop	{r4, pc}
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	41004000 	.word	0x41004000
     e8c:	00001031 	.word	0x00001031
     e90:	00000f25 	.word	0x00000f25
     e94:	00000f59 	.word	0x00000f59
     e98:	00000f11 	.word	0x00000f11
     e9c:	00000ea5 	.word	0x00000ea5
     ea0:	00000f91 	.word	0x00000f91

00000ea4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     ea4:	07c3      	lsls	r3, r0, #31
     ea6:	d507      	bpl.n	eb8 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ea8:	4a13      	ldr	r2, [pc, #76]	; (ef8 <_gclk_init_generators_by_fref+0x54>)
     eaa:	4b14      	ldr	r3, [pc, #80]	; (efc <_gclk_init_generators_by_fref+0x58>)
     eac:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     eae:	4b13      	ldr	r3, [pc, #76]	; (efc <_gclk_init_generators_by_fref+0x58>)
     eb0:	685a      	ldr	r2, [r3, #4]
     eb2:	4b13      	ldr	r3, [pc, #76]	; (f00 <_gclk_init_generators_by_fref+0x5c>)
     eb4:	421a      	tst	r2, r3
     eb6:	d1fa      	bne.n	eae <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     eb8:	0783      	lsls	r3, r0, #30
     eba:	d507      	bpl.n	ecc <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ebc:	4a11      	ldr	r2, [pc, #68]	; (f04 <_gclk_init_generators_by_fref+0x60>)
     ebe:	4b0f      	ldr	r3, [pc, #60]	; (efc <_gclk_init_generators_by_fref+0x58>)
     ec0:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ec2:	4b0e      	ldr	r3, [pc, #56]	; (efc <_gclk_init_generators_by_fref+0x58>)
     ec4:	685a      	ldr	r2, [r3, #4]
     ec6:	4b0e      	ldr	r3, [pc, #56]	; (f00 <_gclk_init_generators_by_fref+0x5c>)
     ec8:	421a      	tst	r2, r3
     eca:	d1fa      	bne.n	ec2 <_gclk_init_generators_by_fref+0x1e>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     ecc:	0743      	lsls	r3, r0, #29
     ece:	d507      	bpl.n	ee0 <_gclk_init_generators_by_fref+0x3c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ed0:	4a0d      	ldr	r2, [pc, #52]	; (f08 <_gclk_init_generators_by_fref+0x64>)
     ed2:	4b0a      	ldr	r3, [pc, #40]	; (efc <_gclk_init_generators_by_fref+0x58>)
     ed4:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ed6:	4b09      	ldr	r3, [pc, #36]	; (efc <_gclk_init_generators_by_fref+0x58>)
     ed8:	685a      	ldr	r2, [r3, #4]
     eda:	4b09      	ldr	r3, [pc, #36]	; (f00 <_gclk_init_generators_by_fref+0x5c>)
     edc:	421a      	tst	r2, r3
     ede:	d1fa      	bne.n	ed6 <_gclk_init_generators_by_fref+0x32>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
     ee0:	06c3      	lsls	r3, r0, #27
     ee2:	d507      	bpl.n	ef4 <_gclk_init_generators_by_fref+0x50>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ee4:	4a09      	ldr	r2, [pc, #36]	; (f0c <_gclk_init_generators_by_fref+0x68>)
     ee6:	4b05      	ldr	r3, [pc, #20]	; (efc <_gclk_init_generators_by_fref+0x58>)
     ee8:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     eea:	4b04      	ldr	r3, [pc, #16]	; (efc <_gclk_init_generators_by_fref+0x58>)
     eec:	685a      	ldr	r2, [r3, #4]
     eee:	4b04      	ldr	r3, [pc, #16]	; (f00 <_gclk_init_generators_by_fref+0x5c>)
     ef0:	421a      	tst	r2, r3
     ef2:	d1fa      	bne.n	eea <_gclk_init_generators_by_fref+0x46>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     ef4:	4770      	bx	lr
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00010107 	.word	0x00010107
     efc:	40001800 	.word	0x40001800
     f00:	000007fd 	.word	0x000007fd
     f04:	00010103 	.word	0x00010103
     f08:	000c0107 	.word	0x000c0107
     f0c:	00080906 	.word	0x00080906

00000f10 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     f10:	4b03      	ldr	r3, [pc, #12]	; (f20 <_mclk_init+0x10>)
     f12:	2208      	movs	r2, #8
     f14:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     f16:	3a04      	subs	r2, #4
     f18:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     f1a:	3a03      	subs	r2, #3
     f1c:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     f1e:	4770      	bx	lr
     f20:	40000400 	.word	0x40000400

00000f24 <_osc32kctrl_init_sources>:

#endif

#if CONF_OSC32K_CONFIG == 1
	/* OSC32K calibration value at bit 12:6 of memory 0x00806020 */
	calib = (*((uint32_t *)0x00806020) & 0x0001FC0) >> 6;
     f24:	4b09      	ldr	r3, [pc, #36]	; (f4c <_osc32kctrl_init_sources+0x28>)
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	099b      	lsrs	r3, r3, #6
     f2a:	227f      	movs	r2, #127	; 0x7f
     f2c:	4013      	ands	r3, r2
	hri_osc32kctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	    OSC32KCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    OSC32KCTRL_OSC32K_CALIB(calib) |
     f2e:	041b      	lsls	r3, r3, #16
#endif
	        OSC32KCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP) | (CONF_OSC32K_ONDEMAND << OSC32KCTRL_OSC32K_ONDEMAND_Pos)
	        | (CONF_OSC32K_RUNSTDBY << OSC32KCTRL_OSC32K_RUNSTDBY_Pos)
	        | (CONF_OSC32K_EN1K << OSC32KCTRL_OSC32K_EN1K_Pos) | (CONF_OSC32K_EN32K << OSC32KCTRL_OSC32K_EN32K_Pos)
	        | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
     f30:	4a07      	ldr	r2, [pc, #28]	; (f50 <_osc32kctrl_init_sources+0x2c>)
     f32:	4313      	orrs	r3, r2
}

static inline void hri_osc32kctrl_write_OSC32K_reg(const void *const hw, hri_osc32kctrl_osc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSC32K.reg = data;
     f34:	4a07      	ldr	r2, [pc, #28]	; (f54 <_osc32kctrl_init_sources+0x30>)
     f36:	6193      	str	r3, [r2, #24]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     f38:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     f3a:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     f3c:	021b      	lsls	r3, r3, #8
     f3e:	21f8      	movs	r1, #248	; 0xf8
     f40:	0149      	lsls	r1, r1, #5
     f42:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     f44:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     f46:	2301      	movs	r3, #1
     f48:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     f4a:	4770      	bx	lr
     f4c:	00806020 	.word	0x00806020
     f50:	00000686 	.word	0x00000686
     f54:	40001000 	.word	0x40001000

00000f58 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     f58:	2286      	movs	r2, #134	; 0x86
     f5a:	4b0c      	ldr	r3, [pc, #48]	; (f8c <_oscctrl_init_sources+0x34>)
     f5c:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f5e:	2338      	movs	r3, #56	; 0x38
     f60:	4a0a      	ldr	r2, [pc, #40]	; (f8c <_oscctrl_init_sources+0x34>)
     f62:	5cd3      	ldrb	r3, [r2, r3]
     f64:	079b      	lsls	r3, r3, #30
     f66:	d4fa      	bmi.n	f5e <_oscctrl_init_sources+0x6>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     f68:	4b08      	ldr	r3, [pc, #32]	; (f8c <_oscctrl_init_sources+0x34>)
     f6a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     f6c:	06db      	lsls	r3, r3, #27
     f6e:	d5fb      	bpl.n	f68 <_oscctrl_init_sources+0x10>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     f70:	4a06      	ldr	r2, [pc, #24]	; (f8c <_oscctrl_init_sources+0x34>)
     f72:	7d13      	ldrb	r3, [r2, #20]
     f74:	2180      	movs	r1, #128	; 0x80
     f76:	4249      	negs	r1, r1
     f78:	430b      	orrs	r3, r1
     f7a:	b2db      	uxtb	r3, r3
     f7c:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f7e:	2338      	movs	r3, #56	; 0x38
     f80:	4a02      	ldr	r2, [pc, #8]	; (f8c <_oscctrl_init_sources+0x34>)
     f82:	5cd2      	ldrb	r2, [r2, r3]
     f84:	3b2a      	subs	r3, #42	; 0x2a
     f86:	421a      	tst	r2, r3
     f88:	d1f9      	bne.n	f7e <_oscctrl_init_sources+0x26>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     f8a:	4770      	bx	lr
     f8c:	40000c00 	.word	0x40000c00

00000f90 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_OVERWRITE_CALIBRATION == 0
#define NVM_DFLL_COARSE_POS 26
#define NVM_DFLL_COARSE_SIZE 6
	uint32_t coarse;
	coarse = *((uint32_t *)(NVMCTRL_OTP5)) >> NVM_DFLL_COARSE_POS;
     f90:	4b23      	ldr	r3, [pc, #140]	; (1020 <_oscctrl_init_referenced_generators+0x90>)
     f92:	6819      	ldr	r1, [r3, #0]
     f94:	0e89      	lsrs	r1, r1, #26
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     f96:	2041      	movs	r0, #65	; 0x41
     f98:	2380      	movs	r3, #128	; 0x80
     f9a:	4a22      	ldr	r2, [pc, #136]	; (1024 <_oscctrl_init_referenced_generators+0x94>)
     f9c:	50d0      	str	r0, [r2, r3]
}

static inline void hri_oscctrl_write_DFLLCTRL_reg(const void *const hw, hri_oscctrl_dfllctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRL.reg = data;
     f9e:	2202      	movs	r2, #2
     fa0:	4b21      	ldr	r3, [pc, #132]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
     fa2:	831a      	strh	r2, [r3, #24]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     fa4:	2338      	movs	r3, #56	; 0x38
     fa6:	4a20      	ldr	r2, [pc, #128]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
     fa8:	5cd3      	ldrb	r3, [r2, r3]
     faa:	079b      	lsls	r3, r3, #30
     fac:	d4fa      	bmi.n	fa4 <_oscctrl_init_referenced_generators+0x14>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     fae:	4b1e      	ldr	r3, [pc, #120]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
     fb0:	68db      	ldr	r3, [r3, #12]
#endif
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(GCLK, 0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif
	hri_oscctrl_write_DFLLCTRL_reg(hw, OSCCTRL_DFLLCTRL_ENABLE);
	while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     fb2:	05db      	lsls	r3, r3, #23
     fb4:	d5fb      	bpl.n	fae <_oscctrl_init_referenced_generators+0x1e>
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     fb6:	4a1d      	ldr	r2, [pc, #116]	; (102c <_oscctrl_init_referenced_generators+0x9c>)
     fb8:	4b1b      	ldr	r3, [pc, #108]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
     fba:	621a      	str	r2, [r3, #32]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     fbc:	4b1a      	ldr	r3, [pc, #104]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
     fbe:	68db      	ldr	r3, [r3, #12]
		;
	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     fc0:	05db      	lsls	r3, r3, #23
     fc2:	d5fb      	bpl.n	fbc <_oscctrl_init_referenced_generators+0x2c>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 0
	/* FINE is set to fixed value, which defined by DFLL48M Characteristics */
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(coarse) | OSCCTRL_DFLLVAL_FINE(512));
     fc4:	0289      	lsls	r1, r1, #10
     fc6:	2380      	movs	r3, #128	; 0x80
     fc8:	009b      	lsls	r3, r3, #2
     fca:	430b      	orrs	r3, r1
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     fcc:	4a16      	ldr	r2, [pc, #88]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
     fce:	61d3      	str	r3, [r2, #28]
	((Oscctrl *)hw)->DFLLCTRL.reg = data;
     fd0:	2306      	movs	r3, #6
     fd2:	8313      	strh	r3, [r2, #24]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     fd4:	2338      	movs	r3, #56	; 0x38
     fd6:	4a14      	ldr	r2, [pc, #80]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
     fd8:	5cd3      	ldrb	r3, [r2, r3]
     fda:	079b      	lsls	r3, r3, #30
     fdc:	d4fa      	bmi.n	fd4 <_oscctrl_init_referenced_generators+0x44>
	tmp = ((Oscctrl *)hw)->DFLLCTRL.reg;
     fde:	8b13      	ldrh	r3, [r2, #24]
	                                    | (CONF_DPLL_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRL_MODE_bit(hw)) {
     fe0:	075b      	lsls	r3, r3, #29
     fe2:	d517      	bpl.n	1014 <_oscctrl_init_referenced_generators+0x84>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     fe4:	4b10      	ldr	r3, [pc, #64]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
     fe6:	68db      	ldr	r3, [r3, #12]
	tmp &= mask;
     fe8:	2290      	movs	r2, #144	; 0x90
     fea:	0112      	lsls	r2, r2, #4
     fec:	4013      	ands	r3, r2
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     fee:	4293      	cmp	r3, r2
     ff0:	d1f8      	bne.n	fe4 <_oscctrl_init_referenced_generators+0x54>
	((Oscctrl *)hw)->DFLLCTRL.reg |= OSCCTRL_DFLLCTRL_ONDEMAND;
     ff2:	4a0d      	ldr	r2, [pc, #52]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
     ff4:	8b13      	ldrh	r3, [r2, #24]
     ff6:	2180      	movs	r1, #128	; 0x80
     ff8:	430b      	orrs	r3, r1
     ffa:	b29b      	uxth	r3, r3
     ffc:	8313      	strh	r3, [r2, #24]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     ffe:	2338      	movs	r3, #56	; 0x38
    1000:	4a09      	ldr	r2, [pc, #36]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
    1002:	5cd2      	ldrb	r2, [r2, r3]
    1004:	3b2a      	subs	r3, #42	; 0x2a
    1006:	421a      	tst	r2, r3
    1008:	d1f9      	bne.n	ffe <_oscctrl_init_referenced_generators+0x6e>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    100a:	4b06      	ldr	r3, [pc, #24]	; (1024 <_oscctrl_init_referenced_generators+0x94>)
    100c:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    100e:	2b00      	cmp	r3, #0
    1010:	d1fb      	bne.n	100a <_oscctrl_init_referenced_generators+0x7a>
		;
#endif
	(void)hw, (void)tmp;
}
    1012:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1014:	4b04      	ldr	r3, [pc, #16]	; (1028 <_oscctrl_init_referenced_generators+0x98>)
    1016:	68db      	ldr	r3, [r3, #12]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1018:	05db      	lsls	r3, r3, #23
    101a:	d5fb      	bpl.n	1014 <_oscctrl_init_referenced_generators+0x84>
    101c:	e7e9      	b.n	ff2 <_oscctrl_init_referenced_generators+0x62>
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00806020 	.word	0x00806020
    1024:	40001800 	.word	0x40001800
    1028:	40000c00 	.word	0x40000c00
    102c:	040105b9 	.word	0x040105b9

00001030 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    1030:	2380      	movs	r3, #128	; 0x80
    1032:	05db      	lsls	r3, r3, #23
    1034:	789b      	ldrb	r3, [r3, #2]
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    1036:	2203      	movs	r2, #3
    1038:	4013      	ands	r3, r2
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    103a:	4298      	cmp	r0, r3
    103c:	d00e      	beq.n	105c <_set_performance_level+0x2c>
	((Pm *)hw)->INTFLAG.reg = mask;
    103e:	2280      	movs	r2, #128	; 0x80
    1040:	05d2      	lsls	r2, r2, #23
    1042:	23ff      	movs	r3, #255	; 0xff
    1044:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    1046:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    1048:	2103      	movs	r1, #3
    104a:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
    104c:	4008      	ands	r0, r1
    104e:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
    1050:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    1052:	2380      	movs	r3, #128	; 0x80
    1054:	05db      	lsls	r3, r3, #23
    1056:	799b      	ldrb	r3, [r3, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    1058:	2b00      	cmp	r3, #0
    105a:	d0fa      	beq.n	1052 <_set_performance_level+0x22>
			;
	}
}
    105c:	4770      	bx	lr
	...

00001060 <_sercom_get_hardware_index>:
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    1060:	4b05      	ldr	r3, [pc, #20]	; (1078 <_sercom_get_hardware_index+0x18>)
    1062:	4298      	cmp	r0, r3
    1064:	d006      	beq.n	1074 <_sercom_get_hardware_index+0x14>
		return 5;
	}

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1066:	23be      	movs	r3, #190	; 0xbe
    1068:	061b      	lsls	r3, r3, #24
    106a:	469c      	mov	ip, r3
    106c:	4460      	add	r0, ip
    106e:	0a80      	lsrs	r0, r0, #10
    1070:	b2c0      	uxtb	r0, r0
}
    1072:	4770      	bx	lr
		return 5;
    1074:	2005      	movs	r0, #5
    1076:	e7fc      	b.n	1072 <_sercom_get_hardware_index+0x12>
    1078:	43000400 	.word	0x43000400

0000107c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    107c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    107e:	4b0d      	ldr	r3, [pc, #52]	; (10b4 <_get_i2cm_index+0x38>)
    1080:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1082:	2300      	movs	r3, #0
    1084:	2b00      	cmp	r3, #0
    1086:	d007      	beq.n	1098 <_get_i2cm_index+0x1c>
		if (_i2cms[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1088:	4a0b      	ldr	r2, [pc, #44]	; (10b8 <_get_i2cm_index+0x3c>)
    108a:	490c      	ldr	r1, [pc, #48]	; (10bc <_get_i2cm_index+0x40>)
    108c:	2000      	movs	r0, #0
    108e:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <_get_i2cm_index+0x44>)
    1090:	4798      	blx	r3
	return -1;
    1092:	2001      	movs	r0, #1
    1094:	4240      	negs	r0, r0
}
    1096:	bd10      	pop	{r4, pc}
		if (_i2cms[i].number == sercom_offset) {
    1098:	005a      	lsls	r2, r3, #1
    109a:	18d2      	adds	r2, r2, r3
    109c:	00d1      	lsls	r1, r2, #3
    109e:	4a09      	ldr	r2, [pc, #36]	; (10c4 <_get_i2cm_index+0x48>)
    10a0:	1852      	adds	r2, r2, r1
    10a2:	7d12      	ldrb	r2, [r2, #20]
    10a4:	4290      	cmp	r0, r2
    10a6:	d002      	beq.n	10ae <_get_i2cm_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    10a8:	3301      	adds	r3, #1
    10aa:	b2db      	uxtb	r3, r3
    10ac:	e7ea      	b.n	1084 <_get_i2cm_index+0x8>
			return i;
    10ae:	b258      	sxtb	r0, r3
    10b0:	e7f1      	b.n	1096 <_get_i2cm_index+0x1a>
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	00001061 	.word	0x00001061
    10b8:	0000039b 	.word	0x0000039b
    10bc:	00003994 	.word	0x00003994
    10c0:	00000c1d 	.word	0x00000c1d
    10c4:	00003944 	.word	0x00003944

000010c8 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    10c8:	b570      	push	{r4, r5, r6, lr}
    10ca:	0005      	movs	r5, r0
    10cc:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    10ce:	0008      	movs	r0, r1
    10d0:	4b2d      	ldr	r3, [pc, #180]	; (1188 <_i2c_m_sync_init_impl+0xc0>)
    10d2:	4798      	blx	r3
    10d4:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    10d6:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    10d8:	07db      	lsls	r3, r3, #31
    10da:	d41d      	bmi.n	1118 <_i2c_m_sync_init_impl+0x50>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    10dc:	0043      	lsls	r3, r0, #1
    10de:	181b      	adds	r3, r3, r0
    10e0:	00da      	lsls	r2, r3, #3
    10e2:	4b2a      	ldr	r3, [pc, #168]	; (118c <_i2c_m_sync_init_impl+0xc4>)
    10e4:	189b      	adds	r3, r3, r2
    10e6:	699a      	ldr	r2, [r3, #24]
    10e8:	231c      	movs	r3, #28
    10ea:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10ec:	69e3      	ldr	r3, [r4, #28]
    10ee:	079b      	lsls	r3, r3, #30
    10f0:	d1fc      	bne.n	10ec <_i2c_m_sync_init_impl+0x24>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    10f2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    10f4:	079b      	lsls	r3, r3, #30
    10f6:	d509      	bpl.n	110c <_i2c_m_sync_init_impl+0x44>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    10f8:	6823      	ldr	r3, [r4, #0]
    10fa:	2102      	movs	r1, #2
    10fc:	438b      	bics	r3, r1
    10fe:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1100:	69e3      	ldr	r3, [r4, #28]
    1102:	079b      	lsls	r3, r3, #30
    1104:	d1fc      	bne.n	1100 <_i2c_m_sync_init_impl+0x38>
    1106:	69e3      	ldr	r3, [r4, #28]
    1108:	079b      	lsls	r3, r3, #30
    110a:	d4fc      	bmi.n	1106 <_i2c_m_sync_init_impl+0x3e>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    110c:	2301      	movs	r3, #1
    110e:	4313      	orrs	r3, r2
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1110:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1112:	69e3      	ldr	r3, [r4, #28]
    1114:	079b      	lsls	r3, r3, #30
    1116:	d1fc      	bne.n	1112 <_i2c_m_sync_init_impl+0x4a>
    1118:	69e3      	ldr	r3, [r4, #28]
    111a:	07db      	lsls	r3, r3, #31
    111c:	d4fc      	bmi.n	1118 <_i2c_m_sync_init_impl+0x50>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    111e:	0043      	lsls	r3, r0, #1
    1120:	181b      	adds	r3, r3, r0
    1122:	00da      	lsls	r2, r3, #3
    1124:	4b19      	ldr	r3, [pc, #100]	; (118c <_i2c_m_sync_init_impl+0xc4>)
    1126:	189b      	adds	r3, r3, r2
    1128:	699b      	ldr	r3, [r3, #24]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    112a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    112c:	69e3      	ldr	r3, [r4, #28]
    112e:	079b      	lsls	r3, r3, #30
    1130:	d1fc      	bne.n	112c <_i2c_m_sync_init_impl+0x64>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1132:	0043      	lsls	r3, r0, #1
    1134:	181b      	adds	r3, r3, r0
    1136:	00da      	lsls	r2, r3, #3
    1138:	4b14      	ldr	r3, [pc, #80]	; (118c <_i2c_m_sync_init_impl+0xc4>)
    113a:	189b      	adds	r3, r3, r2
    113c:	69db      	ldr	r3, [r3, #28]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    113e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1140:	69e3      	ldr	r3, [r4, #28]
    1142:	075b      	lsls	r3, r3, #29
    1144:	d4fc      	bmi.n	1140 <_i2c_m_sync_init_impl+0x78>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1146:	0042      	lsls	r2, r0, #1
    1148:	1812      	adds	r2, r2, r0
    114a:	00d1      	lsls	r1, r2, #3
    114c:	4b0f      	ldr	r3, [pc, #60]	; (118c <_i2c_m_sync_init_impl+0xc4>)
    114e:	185b      	adds	r3, r3, r1
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1150:	6a1a      	ldr	r2, [r3, #32]
    1152:	60e2      	str	r2, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1154:	7eda      	ldrb	r2, [r3, #27]
    1156:	2303      	movs	r3, #3
    1158:	401a      	ands	r2, r3
    115a:	81aa      	strh	r2, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    115c:	3b02      	subs	r3, #2
    115e:	4293      	cmp	r3, r2
    1160:	419b      	sbcs	r3, r3
    1162:	425b      	negs	r3, r3

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1164:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1166:	490a      	ldr	r1, [pc, #40]	; (1190 <_i2c_m_sync_init_impl+0xc8>)
    1168:	400a      	ands	r2, r1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    116a:	039b      	lsls	r3, r3, #14
    116c:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    116e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1170:	69e3      	ldr	r3, [r4, #28]
    1172:	075b      	lsls	r3, r3, #29
    1174:	d4fc      	bmi.n	1170 <_i2c_m_sync_init_impl+0xa8>

	service->trise = _i2cms[i].trise;
    1176:	0043      	lsls	r3, r0, #1
    1178:	1818      	adds	r0, r3, r0
    117a:	00c2      	lsls	r2, r0, #3
    117c:	4b03      	ldr	r3, [pc, #12]	; (118c <_i2c_m_sync_init_impl+0xc4>)
    117e:	189b      	adds	r3, r3, r2
    1180:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    1182:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1184:	2000      	movs	r0, #0
    1186:	bd70      	pop	{r4, r5, r6, pc}
    1188:	0000107d 	.word	0x0000107d
    118c:	00003944 	.word	0x00003944
    1190:	ffffbfff 	.word	0xffffbfff

00001194 <_sercom_i2c_sync_send_address>:
{
    1194:	b570      	push	{r4, r5, r6, lr}
    1196:	0005      	movs	r5, r0
	void *             hw    = i2c_dev->hw;
    1198:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    119a:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    119c:	0edb      	lsrs	r3, r3, #27
    119e:	2601      	movs	r6, #1
    11a0:	401e      	ands	r6, r3
	ASSERT(i2c_dev);
    11a2:	1e43      	subs	r3, r0, #1
    11a4:	4198      	sbcs	r0, r3
    11a6:	b2c0      	uxtb	r0, r0
    11a8:	4a8e      	ldr	r2, [pc, #568]	; (13e4 <_sercom_i2c_sync_send_address+0x250>)
    11aa:	498f      	ldr	r1, [pc, #572]	; (13e8 <_sercom_i2c_sync_send_address+0x254>)
    11ac:	4b8f      	ldr	r3, [pc, #572]	; (13ec <_sercom_i2c_sync_send_address+0x258>)
    11ae:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    11b0:	686b      	ldr	r3, [r5, #4]
    11b2:	2b01      	cmp	r3, #1
    11b4:	d04d      	beq.n	1252 <_sercom_i2c_sync_send_address+0xbe>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    11b6:	6863      	ldr	r3, [r4, #4]
    11b8:	4a8d      	ldr	r2, [pc, #564]	; (13f0 <_sercom_i2c_sync_send_address+0x25c>)
    11ba:	4013      	ands	r3, r2
    11bc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11be:	69e3      	ldr	r3, [r4, #28]
    11c0:	075b      	lsls	r3, r3, #29
    11c2:	d4fc      	bmi.n	11be <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    11c4:	882b      	ldrh	r3, [r5, #0]
    11c6:	055a      	lsls	r2, r3, #21
    11c8:	d54e      	bpl.n	1268 <_sercom_i2c_sync_send_address+0xd4>
		if (msg->flags & I2C_M_RD) {
    11ca:	886a      	ldrh	r2, [r5, #2]
    11cc:	07d2      	lsls	r2, r2, #31
    11ce:	d504      	bpl.n	11da <_sercom_i2c_sync_send_address+0x46>
			msg->flags |= I2C_M_TEN;
    11d0:	886a      	ldrh	r2, [r5, #2]
    11d2:	2180      	movs	r1, #128	; 0x80
    11d4:	00c9      	lsls	r1, r1, #3
    11d6:	430a      	orrs	r2, r1
    11d8:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    11da:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    11dc:	4a85      	ldr	r2, [pc, #532]	; (13f4 <_sercom_i2c_sync_send_address+0x260>)
    11de:	401a      	ands	r2, r3
    11e0:	69e3      	ldr	r3, [r4, #28]
    11e2:	075b      	lsls	r3, r3, #29
    11e4:	d4fc      	bmi.n	11e0 <_sercom_i2c_sync_send_address+0x4c>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    11e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    11e8:	2180      	movs	r1, #128	; 0x80
    11ea:	01c9      	lsls	r1, r1, #7
    11ec:	400b      	ands	r3, r1
    11ee:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    11f0:	2280      	movs	r2, #128	; 0x80
    11f2:	0212      	lsls	r2, r2, #8
    11f4:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    11f6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11f8:	69e3      	ldr	r3, [r4, #28]
    11fa:	075b      	lsls	r3, r3, #29
    11fc:	d4fc      	bmi.n	11f8 <_sercom_i2c_sync_send_address+0x64>
	void *   hw      = i2c_dev->hw;
    11fe:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    1200:	4a7d      	ldr	r2, [pc, #500]	; (13f8 <_sercom_i2c_sync_send_address+0x264>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1202:	7e33      	ldrb	r3, [r6, #24]
    1204:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1206:	0018      	movs	r0, r3
		if (timeout-- == 0) {
    1208:	1e51      	subs	r1, r2, #1
    120a:	2a00      	cmp	r2, #0
    120c:	d002      	beq.n	1214 <_sercom_i2c_sync_send_address+0x80>
    120e:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1210:	079b      	lsls	r3, r3, #30
    1212:	d0f6      	beq.n	1202 <_sercom_i2c_sync_send_address+0x6e>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1214:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1216:	0edb      	lsrs	r3, r3, #27
    1218:	2201      	movs	r2, #1
    121a:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    121c:	69e3      	ldr	r3, [r4, #28]
    121e:	075b      	lsls	r3, r3, #29
    1220:	d4fc      	bmi.n	121c <_sercom_i2c_sync_send_address+0x88>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1222:	8b63      	ldrh	r3, [r4, #26]
    1224:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1226:	07c1      	lsls	r1, r0, #31
    1228:	d400      	bmi.n	122c <_sercom_i2c_sync_send_address+0x98>
    122a:	e08f      	b.n	134c <_sercom_i2c_sync_send_address+0x1b8>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    122c:	079a      	lsls	r2, r3, #30
    122e:	d52f      	bpl.n	1290 <_sercom_i2c_sync_send_address+0xfc>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1230:	2201      	movs	r2, #1
    1232:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1234:	886a      	ldrh	r2, [r5, #2]
    1236:	2180      	movs	r1, #128	; 0x80
    1238:	0149      	lsls	r1, r1, #5
    123a:	430a      	orrs	r2, r1
    123c:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    123e:	886a      	ldrh	r2, [r5, #2]
    1240:	496e      	ldr	r1, [pc, #440]	; (13fc <_sercom_i2c_sync_send_address+0x268>)
    1242:	400a      	ands	r2, r1
    1244:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1246:	07db      	lsls	r3, r3, #31
    1248:	d400      	bmi.n	124c <_sercom_i2c_sync_send_address+0xb8>
    124a:	e0c6      	b.n	13da <_sercom_i2c_sync_send_address+0x246>
				return I2C_ERR_BUS;
    124c:	2005      	movs	r0, #5
    124e:	4240      	negs	r0, r0
    1250:	e0a2      	b.n	1398 <_sercom_i2c_sync_send_address+0x204>
	if (msg->len == 1 && sclsm) {
    1252:	2e00      	cmp	r6, #0
    1254:	d0af      	beq.n	11b6 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1256:	6862      	ldr	r2, [r4, #4]
    1258:	2380      	movs	r3, #128	; 0x80
    125a:	02db      	lsls	r3, r3, #11
    125c:	4313      	orrs	r3, r2
    125e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1260:	69e3      	ldr	r3, [r4, #28]
    1262:	075b      	lsls	r3, r3, #29
    1264:	d4fc      	bmi.n	1260 <_sercom_i2c_sync_send_address+0xcc>
    1266:	e7ad      	b.n	11c4 <_sercom_i2c_sync_send_address+0x30>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1268:	005b      	lsls	r3, r3, #1
    126a:	22ff      	movs	r2, #255	; 0xff
    126c:	4013      	ands	r3, r2
    126e:	886a      	ldrh	r2, [r5, #2]
    1270:	2101      	movs	r1, #1
    1272:	400a      	ands	r2, r1
    1274:	431a      	orrs	r2, r3
    1276:	69e3      	ldr	r3, [r4, #28]
    1278:	075b      	lsls	r3, r3, #29
    127a:	d4fc      	bmi.n	1276 <_sercom_i2c_sync_send_address+0xe2>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    127c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    127e:	2180      	movs	r1, #128	; 0x80
    1280:	01c9      	lsls	r1, r1, #7
    1282:	400b      	ands	r3, r1
		hri_sercomi2cm_write_ADDR_reg(hw,
    1284:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1286:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1288:	69e3      	ldr	r3, [r4, #28]
    128a:	075b      	lsls	r3, r3, #29
    128c:	d4fc      	bmi.n	1288 <_sercom_i2c_sync_send_address+0xf4>
    128e:	e7b6      	b.n	11fe <_sercom_i2c_sync_send_address+0x6a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1290:	075b      	lsls	r3, r3, #29
    1292:	d41b      	bmi.n	12cc <_sercom_i2c_sync_send_address+0x138>
			if (msg->flags & I2C_M_TEN) {
    1294:	886b      	ldrh	r3, [r5, #2]
    1296:	055b      	lsls	r3, r3, #21
    1298:	d534      	bpl.n	1304 <_sercom_i2c_sync_send_address+0x170>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    129a:	882a      	ldrh	r2, [r5, #0]
    129c:	1212      	asrs	r2, r2, #8
    129e:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    12a0:	2306      	movs	r3, #6
    12a2:	401a      	ands	r2, r3
    12a4:	69e3      	ldr	r3, [r4, #28]
    12a6:	075b      	lsls	r3, r3, #29
    12a8:	d4fc      	bmi.n	12a4 <_sercom_i2c_sync_send_address+0x110>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    12aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12ac:	2180      	movs	r1, #128	; 0x80
    12ae:	01c9      	lsls	r1, r1, #7
    12b0:	400b      	ands	r3, r1
    12b2:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    12b4:	22f1      	movs	r2, #241	; 0xf1
    12b6:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    12b8:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12ba:	69e3      	ldr	r3, [r4, #28]
    12bc:	075b      	lsls	r3, r3, #29
    12be:	d4fc      	bmi.n	12ba <_sercom_i2c_sync_send_address+0x126>
				msg->flags &= ~I2C_M_TEN;
    12c0:	886b      	ldrh	r3, [r5, #2]
    12c2:	4a4f      	ldr	r2, [pc, #316]	; (1400 <_sercom_i2c_sync_send_address+0x26c>)
    12c4:	4013      	ands	r3, r2
    12c6:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    12c8:	2000      	movs	r0, #0
    12ca:	e065      	b.n	1398 <_sercom_i2c_sync_send_address+0x204>
				if (msg->len > 0) {
    12cc:	686b      	ldr	r3, [r5, #4]
    12ce:	2b00      	cmp	r3, #0
    12d0:	dd04      	ble.n	12dc <_sercom_i2c_sync_send_address+0x148>
					msg->flags |= I2C_M_FAIL;
    12d2:	886b      	ldrh	r3, [r5, #2]
    12d4:	2280      	movs	r2, #128	; 0x80
    12d6:	0152      	lsls	r2, r2, #5
    12d8:	4313      	orrs	r3, r2
    12da:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    12dc:	886b      	ldrh	r3, [r5, #2]
    12de:	b21b      	sxth	r3, r3
    12e0:	2b00      	cmp	r3, #0
    12e2:	db06      	blt.n	12f2 <_sercom_i2c_sync_send_address+0x15e>
				msg->flags &= ~I2C_M_BUSY;
    12e4:	886b      	ldrh	r3, [r5, #2]
    12e6:	4a45      	ldr	r2, [pc, #276]	; (13fc <_sercom_i2c_sync_send_address+0x268>)
    12e8:	4013      	ands	r3, r2
    12ea:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    12ec:	2002      	movs	r0, #2
    12ee:	4240      	negs	r0, r0
    12f0:	e052      	b.n	1398 <_sercom_i2c_sync_send_address+0x204>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    12f2:	6862      	ldr	r2, [r4, #4]
    12f4:	23c0      	movs	r3, #192	; 0xc0
    12f6:	029b      	lsls	r3, r3, #10
    12f8:	4313      	orrs	r3, r2
    12fa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12fc:	69e3      	ldr	r3, [r4, #28]
    12fe:	075b      	lsls	r3, r3, #29
    1300:	d4fc      	bmi.n	12fc <_sercom_i2c_sync_send_address+0x168>
    1302:	e7ef      	b.n	12e4 <_sercom_i2c_sync_send_address+0x150>
			if (msg->len == 0) {
    1304:	6868      	ldr	r0, [r5, #4]
    1306:	2800      	cmp	r0, #0
    1308:	d111      	bne.n	132e <_sercom_i2c_sync_send_address+0x19a>
				if (msg->flags & I2C_M_STOP) {
    130a:	886b      	ldrh	r3, [r5, #2]
    130c:	b21b      	sxth	r3, r3
    130e:	2b00      	cmp	r3, #0
    1310:	db04      	blt.n	131c <_sercom_i2c_sync_send_address+0x188>
				msg->flags &= ~I2C_M_BUSY;
    1312:	886b      	ldrh	r3, [r5, #2]
    1314:	4a39      	ldr	r2, [pc, #228]	; (13fc <_sercom_i2c_sync_send_address+0x268>)
    1316:	4013      	ands	r3, r2
    1318:	806b      	strh	r3, [r5, #2]
    131a:	e03d      	b.n	1398 <_sercom_i2c_sync_send_address+0x204>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    131c:	6862      	ldr	r2, [r4, #4]
    131e:	23c0      	movs	r3, #192	; 0xc0
    1320:	029b      	lsls	r3, r3, #10
    1322:	4313      	orrs	r3, r2
    1324:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1326:	69e3      	ldr	r3, [r4, #28]
    1328:	075b      	lsls	r3, r3, #29
    132a:	d4fc      	bmi.n	1326 <_sercom_i2c_sync_send_address+0x192>
    132c:	e7f1      	b.n	1312 <_sercom_i2c_sync_send_address+0x17e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    132e:	68ab      	ldr	r3, [r5, #8]
    1330:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1332:	2328      	movs	r3, #40	; 0x28
    1334:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1336:	69e3      	ldr	r3, [r4, #28]
    1338:	075b      	lsls	r3, r3, #29
    133a:	d4fc      	bmi.n	1336 <_sercom_i2c_sync_send_address+0x1a2>
				msg->buffer++;
    133c:	68ab      	ldr	r3, [r5, #8]
    133e:	3301      	adds	r3, #1
    1340:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1342:	686b      	ldr	r3, [r5, #4]
    1344:	3b01      	subs	r3, #1
    1346:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1348:	2000      	movs	r0, #0
    134a:	e025      	b.n	1398 <_sercom_i2c_sync_send_address+0x204>
	} else if (flags & SB_FLAG) {
    134c:	0781      	lsls	r1, r0, #30
    134e:	d547      	bpl.n	13e0 <_sercom_i2c_sync_send_address+0x24c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1350:	6869      	ldr	r1, [r5, #4]
    1352:	2900      	cmp	r1, #0
    1354:	d03c      	beq.n	13d0 <_sercom_i2c_sync_send_address+0x23c>
    1356:	075b      	lsls	r3, r3, #29
    1358:	d43a      	bmi.n	13d0 <_sercom_i2c_sync_send_address+0x23c>
			msg->len--;
    135a:	3901      	subs	r1, #1
    135c:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    135e:	2900      	cmp	r1, #0
    1360:	d101      	bne.n	1366 <_sercom_i2c_sync_send_address+0x1d2>
    1362:	2a00      	cmp	r2, #0
    1364:	d01b      	beq.n	139e <_sercom_i2c_sync_send_address+0x20a>
    1366:	2901      	cmp	r1, #1
    1368:	d017      	beq.n	139a <_sercom_i2c_sync_send_address+0x206>
			if (msg->len == 0) {
    136a:	686b      	ldr	r3, [r5, #4]
    136c:	2b00      	cmp	r3, #0
    136e:	d107      	bne.n	1380 <_sercom_i2c_sync_send_address+0x1ec>
				if (msg->flags & I2C_M_STOP) {
    1370:	886b      	ldrh	r3, [r5, #2]
    1372:	b21b      	sxth	r3, r3
    1374:	2b00      	cmp	r3, #0
    1376:	db1b      	blt.n	13b0 <_sercom_i2c_sync_send_address+0x21c>
				msg->flags &= ~I2C_M_BUSY;
    1378:	886b      	ldrh	r3, [r5, #2]
    137a:	4a20      	ldr	r2, [pc, #128]	; (13fc <_sercom_i2c_sync_send_address+0x268>)
    137c:	4013      	ands	r3, r2
    137e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1380:	68aa      	ldr	r2, [r5, #8]
    1382:	1c53      	adds	r3, r2, #1
    1384:	60ab      	str	r3, [r5, #8]
    1386:	69e3      	ldr	r3, [r4, #28]
    1388:	075b      	lsls	r3, r3, #29
    138a:	d4fc      	bmi.n	1386 <_sercom_i2c_sync_send_address+0x1f2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    138c:	2328      	movs	r3, #40	; 0x28
    138e:	5ce3      	ldrb	r3, [r4, r3]
    1390:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1392:	2302      	movs	r3, #2
    1394:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1396:	2000      	movs	r0, #0
}
    1398:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    139a:	2a00      	cmp	r2, #0
    139c:	d0e5      	beq.n	136a <_sercom_i2c_sync_send_address+0x1d6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    139e:	6862      	ldr	r2, [r4, #4]
    13a0:	2380      	movs	r3, #128	; 0x80
    13a2:	02db      	lsls	r3, r3, #11
    13a4:	4313      	orrs	r3, r2
    13a6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13a8:	69e3      	ldr	r3, [r4, #28]
    13aa:	075b      	lsls	r3, r3, #29
    13ac:	d4fc      	bmi.n	13a8 <_sercom_i2c_sync_send_address+0x214>
    13ae:	e7dc      	b.n	136a <_sercom_i2c_sync_send_address+0x1d6>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    13b0:	6863      	ldr	r3, [r4, #4]
    13b2:	4a12      	ldr	r2, [pc, #72]	; (13fc <_sercom_i2c_sync_send_address+0x268>)
    13b4:	4013      	ands	r3, r2
    13b6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13b8:	69e3      	ldr	r3, [r4, #28]
    13ba:	075b      	lsls	r3, r3, #29
    13bc:	d4fc      	bmi.n	13b8 <_sercom_i2c_sync_send_address+0x224>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    13be:	6862      	ldr	r2, [r4, #4]
    13c0:	23c0      	movs	r3, #192	; 0xc0
    13c2:	029b      	lsls	r3, r3, #10
    13c4:	4313      	orrs	r3, r2
    13c6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13c8:	69e3      	ldr	r3, [r4, #28]
    13ca:	075b      	lsls	r3, r3, #29
    13cc:	d4fc      	bmi.n	13c8 <_sercom_i2c_sync_send_address+0x234>
    13ce:	e7d3      	b.n	1378 <_sercom_i2c_sync_send_address+0x1e4>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    13d0:	2302      	movs	r3, #2
    13d2:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    13d4:	2002      	movs	r0, #2
    13d6:	4240      	negs	r0, r0
    13d8:	e7de      	b.n	1398 <_sercom_i2c_sync_send_address+0x204>
			return I2C_ERR_BAD_ADDRESS;
    13da:	2004      	movs	r0, #4
    13dc:	4240      	negs	r0, r0
    13de:	e7db      	b.n	1398 <_sercom_i2c_sync_send_address+0x204>
	return I2C_OK;
    13e0:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    13e2:	e7d9      	b.n	1398 <_sercom_i2c_sync_send_address+0x204>
    13e4:	00000597 	.word	0x00000597
    13e8:	00003994 	.word	0x00003994
    13ec:	00000c1d 	.word	0x00000c1d
    13f0:	fffbffff 	.word	0xfffbffff
    13f4:	000007fe 	.word	0x000007fe
    13f8:	0000ffff 	.word	0x0000ffff
    13fc:	fffffeff 	.word	0xfffffeff
    1400:	fffffbff 	.word	0xfffffbff

00001404 <_i2c_m_sync_init>:
{
    1404:	b570      	push	{r4, r5, r6, lr}
    1406:	0004      	movs	r4, r0
    1408:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    140a:	1e43      	subs	r3, r0, #1
    140c:	4198      	sbcs	r0, r3
    140e:	b2c0      	uxtb	r0, r0
    1410:	4a04      	ldr	r2, [pc, #16]	; (1424 <_i2c_m_sync_init+0x20>)
    1412:	4905      	ldr	r1, [pc, #20]	; (1428 <_i2c_m_sync_init+0x24>)
    1414:	4b05      	ldr	r3, [pc, #20]	; (142c <_i2c_m_sync_init+0x28>)
    1416:	4798      	blx	r3
	i2c_dev->hw = hw;
    1418:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    141a:	0029      	movs	r1, r5
    141c:	0020      	movs	r0, r4
    141e:	4b04      	ldr	r3, [pc, #16]	; (1430 <_i2c_m_sync_init+0x2c>)
    1420:	4798      	blx	r3
}
    1422:	bd70      	pop	{r4, r5, r6, pc}
    1424:	0000050a 	.word	0x0000050a
    1428:	00003994 	.word	0x00003994
    142c:	00000c1d 	.word	0x00000c1d
    1430:	000010c9 	.word	0x000010c9

00001434 <_i2c_m_sync_enable>:
{
    1434:	b570      	push	{r4, r5, r6, lr}
    1436:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
    1438:	4d19      	ldr	r5, [pc, #100]	; (14a0 <_i2c_m_sync_enable+0x6c>)
    143a:	1e43      	subs	r3, r0, #1
    143c:	4198      	sbcs	r0, r3
    143e:	b2c0      	uxtb	r0, r0
    1440:	4a18      	ldr	r2, [pc, #96]	; (14a4 <_i2c_m_sync_enable+0x70>)
    1442:	0029      	movs	r1, r5
    1444:	4e18      	ldr	r6, [pc, #96]	; (14a8 <_i2c_m_sync_enable+0x74>)
    1446:	47b0      	blx	r6
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1448:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    144a:	0020      	movs	r0, r4
    144c:	1e43      	subs	r3, r0, #1
    144e:	4198      	sbcs	r0, r3
    1450:	b2c0      	uxtb	r0, r0
    1452:	4a16      	ldr	r2, [pc, #88]	; (14ac <_i2c_m_sync_enable+0x78>)
    1454:	0029      	movs	r1, r5
    1456:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1458:	6823      	ldr	r3, [r4, #0]
    145a:	2202      	movs	r2, #2
    145c:	4313      	orrs	r3, r2
    145e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1460:	69e3      	ldr	r3, [r4, #28]
    1462:	079b      	lsls	r3, r3, #30
    1464:	d1fc      	bne.n	1460 <_i2c_m_sync_enable+0x2c>
    1466:	2004      	movs	r0, #4
    1468:	4911      	ldr	r1, [pc, #68]	; (14b0 <_i2c_m_sync_enable+0x7c>)
    146a:	69e3      	ldr	r3, [r4, #28]
    146c:	075b      	lsls	r3, r3, #29
    146e:	d4fc      	bmi.n	146a <_i2c_m_sync_enable+0x36>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1470:	8b62      	ldrh	r2, [r4, #26]
    1472:	0912      	lsrs	r2, r2, #4
    1474:	2303      	movs	r3, #3
    1476:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1478:	2b01      	cmp	r3, #1
    147a:	d00b      	beq.n	1494 <_i2c_m_sync_enable+0x60>
		timeout--;
    147c:	3901      	subs	r1, #1
		if (timeout <= 0) {
    147e:	2900      	cmp	r1, #0
    1480:	dcf3      	bgt.n	146a <_i2c_m_sync_enable+0x36>
			if (--timeout_attempt)
    1482:	3801      	subs	r0, #1
    1484:	2800      	cmp	r0, #0
    1486:	d007      	beq.n	1498 <_i2c_m_sync_enable+0x64>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1488:	2310      	movs	r3, #16
    148a:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    148c:	69e3      	ldr	r3, [r4, #28]
    148e:	075b      	lsls	r3, r3, #29
    1490:	d4fc      	bmi.n	148c <_i2c_m_sync_enable+0x58>
    1492:	e7e9      	b.n	1468 <_i2c_m_sync_enable+0x34>
	return ERR_NONE;
    1494:	2000      	movs	r0, #0
}
    1496:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    1498:	2006      	movs	r0, #6
    149a:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
    149c:	e7fb      	b.n	1496 <_i2c_m_sync_enable+0x62>
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	00003994 	.word	0x00003994
    14a4:	00000527 	.word	0x00000527
    14a8:	00000c1d 	.word	0x00000c1d
    14ac:	000005f7 	.word	0x000005f7
    14b0:	0000ffff 	.word	0x0000ffff

000014b4 <_i2c_m_sync_transfer>:
{
    14b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14b6:	0005      	movs	r5, r0
    14b8:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
    14ba:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    14bc:	1e43      	subs	r3, r0, #1
    14be:	4198      	sbcs	r0, r3
    14c0:	b2c0      	uxtb	r0, r0
    14c2:	4a92      	ldr	r2, [pc, #584]	; (170c <_i2c_m_sync_transfer+0x258>)
    14c4:	4992      	ldr	r1, [pc, #584]	; (1710 <_i2c_m_sync_transfer+0x25c>)
    14c6:	4f93      	ldr	r7, [pc, #588]	; (1714 <_i2c_m_sync_transfer+0x260>)
    14c8:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    14ca:	6928      	ldr	r0, [r5, #16]
    14cc:	1e43      	subs	r3, r0, #1
    14ce:	4198      	sbcs	r0, r3
    14d0:	b2c0      	uxtb	r0, r0
    14d2:	4a91      	ldr	r2, [pc, #580]	; (1718 <_i2c_m_sync_transfer+0x264>)
    14d4:	498e      	ldr	r1, [pc, #568]	; (1710 <_i2c_m_sync_transfer+0x25c>)
    14d6:	47b8      	blx	r7
	ASSERT(msg);
    14d8:	0030      	movs	r0, r6
    14da:	1e43      	subs	r3, r0, #1
    14dc:	4198      	sbcs	r0, r3
    14de:	b2c0      	uxtb	r0, r0
    14e0:	4a8e      	ldr	r2, [pc, #568]	; (171c <_i2c_m_sync_transfer+0x268>)
    14e2:	498b      	ldr	r1, [pc, #556]	; (1710 <_i2c_m_sync_transfer+0x25c>)
    14e4:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    14e6:	886b      	ldrh	r3, [r5, #2]
    14e8:	05db      	lsls	r3, r3, #23
    14ea:	d500      	bpl.n	14ee <_i2c_m_sync_transfer+0x3a>
    14ec:	e10b      	b.n	1706 <_i2c_m_sync_transfer+0x252>
	msg->flags |= I2C_M_BUSY;
    14ee:	8872      	ldrh	r2, [r6, #2]
    14f0:	2380      	movs	r3, #128	; 0x80
    14f2:	005b      	lsls	r3, r3, #1
    14f4:	469c      	mov	ip, r3
    14f6:	431a      	orrs	r2, r3
    14f8:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    14fa:	002a      	movs	r2, r5
    14fc:	0031      	movs	r1, r6
    14fe:	c989      	ldmia	r1!, {r0, r3, r7}
    1500:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1502:	6862      	ldr	r2, [r4, #4]
    1504:	4663      	mov	r3, ip
    1506:	4313      	orrs	r3, r2
    1508:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    150a:	69e3      	ldr	r3, [r4, #28]
    150c:	075b      	lsls	r3, r3, #29
    150e:	d4fc      	bmi.n	150a <_i2c_m_sync_transfer+0x56>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    1510:	0028      	movs	r0, r5
    1512:	4b83      	ldr	r3, [pc, #524]	; (1720 <_i2c_m_sync_transfer+0x26c>)
    1514:	4798      	blx	r3
	if (ret) {
    1516:	2800      	cmp	r0, #0
    1518:	d100      	bne.n	151c <_i2c_m_sync_transfer+0x68>
    151a:	e09d      	b.n	1658 <_i2c_m_sync_transfer+0x1a4>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    151c:	886b      	ldrh	r3, [r5, #2]
    151e:	4a81      	ldr	r2, [pc, #516]	; (1724 <_i2c_m_sync_transfer+0x270>)
    1520:	4013      	ands	r3, r2
    1522:	806b      	strh	r3, [r5, #2]
}
    1524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    1526:	2005      	movs	r0, #5
    1528:	4240      	negs	r0, r0
    152a:	e0a6      	b.n	167a <_i2c_m_sync_transfer+0x1c6>
			if (msg->flags & I2C_M_STOP) {
    152c:	8873      	ldrh	r3, [r6, #2]
    152e:	b21b      	sxth	r3, r3
    1530:	2b00      	cmp	r3, #0
    1532:	db04      	blt.n	153e <_i2c_m_sync_transfer+0x8a>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1534:	886b      	ldrh	r3, [r5, #2]
    1536:	4a7b      	ldr	r2, [pc, #492]	; (1724 <_i2c_m_sync_transfer+0x270>)
    1538:	4013      	ands	r3, r2
    153a:	806b      	strh	r3, [r5, #2]
			return ret;
    153c:	e7f2      	b.n	1524 <_i2c_m_sync_transfer+0x70>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    153e:	6862      	ldr	r2, [r4, #4]
    1540:	23c0      	movs	r3, #192	; 0xc0
    1542:	029b      	lsls	r3, r3, #10
    1544:	4313      	orrs	r3, r2
    1546:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1548:	69e3      	ldr	r3, [r4, #28]
    154a:	075b      	lsls	r3, r3, #29
    154c:	d4fc      	bmi.n	1548 <_i2c_m_sync_transfer+0x94>
    154e:	e7f1      	b.n	1534 <_i2c_m_sync_transfer+0x80>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1550:	0753      	lsls	r3, r2, #29
    1552:	d41b      	bmi.n	158c <_i2c_m_sync_transfer+0xd8>
			if (msg->flags & I2C_M_TEN) {
    1554:	886b      	ldrh	r3, [r5, #2]
    1556:	055b      	lsls	r3, r3, #21
    1558:	d534      	bpl.n	15c4 <_i2c_m_sync_transfer+0x110>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    155a:	882a      	ldrh	r2, [r5, #0]
    155c:	1212      	asrs	r2, r2, #8
    155e:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1560:	2306      	movs	r3, #6
    1562:	401a      	ands	r2, r3
    1564:	69e3      	ldr	r3, [r4, #28]
    1566:	075b      	lsls	r3, r3, #29
    1568:	d4fc      	bmi.n	1564 <_i2c_m_sync_transfer+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    156a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    156c:	2180      	movs	r1, #128	; 0x80
    156e:	01c9      	lsls	r1, r1, #7
    1570:	400b      	ands	r3, r1
    1572:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1574:	22f1      	movs	r2, #241	; 0xf1
    1576:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1578:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    157a:	69e3      	ldr	r3, [r4, #28]
    157c:	075b      	lsls	r3, r3, #29
    157e:	d4fc      	bmi.n	157a <_i2c_m_sync_transfer+0xc6>
				msg->flags &= ~I2C_M_TEN;
    1580:	886b      	ldrh	r3, [r5, #2]
    1582:	4a69      	ldr	r2, [pc, #420]	; (1728 <_i2c_m_sync_transfer+0x274>)
    1584:	4013      	ands	r3, r2
    1586:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1588:	2000      	movs	r0, #0
    158a:	e065      	b.n	1658 <_i2c_m_sync_transfer+0x1a4>
				if (msg->len > 0) {
    158c:	686b      	ldr	r3, [r5, #4]
    158e:	2b00      	cmp	r3, #0
    1590:	dd04      	ble.n	159c <_i2c_m_sync_transfer+0xe8>
					msg->flags |= I2C_M_FAIL;
    1592:	886b      	ldrh	r3, [r5, #2]
    1594:	2280      	movs	r2, #128	; 0x80
    1596:	0152      	lsls	r2, r2, #5
    1598:	4313      	orrs	r3, r2
    159a:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    159c:	886b      	ldrh	r3, [r5, #2]
    159e:	b21b      	sxth	r3, r3
    15a0:	2b00      	cmp	r3, #0
    15a2:	db06      	blt.n	15b2 <_i2c_m_sync_transfer+0xfe>
				msg->flags &= ~I2C_M_BUSY;
    15a4:	886b      	ldrh	r3, [r5, #2]
    15a6:	4a5f      	ldr	r2, [pc, #380]	; (1724 <_i2c_m_sync_transfer+0x270>)
    15a8:	4013      	ands	r3, r2
    15aa:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    15ac:	2002      	movs	r0, #2
    15ae:	4240      	negs	r0, r0
    15b0:	e052      	b.n	1658 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15b2:	6862      	ldr	r2, [r4, #4]
    15b4:	23c0      	movs	r3, #192	; 0xc0
    15b6:	029b      	lsls	r3, r3, #10
    15b8:	4313      	orrs	r3, r2
    15ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15bc:	69e3      	ldr	r3, [r4, #28]
    15be:	075b      	lsls	r3, r3, #29
    15c0:	d4fc      	bmi.n	15bc <_i2c_m_sync_transfer+0x108>
    15c2:	e7ef      	b.n	15a4 <_i2c_m_sync_transfer+0xf0>
			if (msg->len == 0) {
    15c4:	6868      	ldr	r0, [r5, #4]
    15c6:	2800      	cmp	r0, #0
    15c8:	d111      	bne.n	15ee <_i2c_m_sync_transfer+0x13a>
				if (msg->flags & I2C_M_STOP) {
    15ca:	886b      	ldrh	r3, [r5, #2]
    15cc:	b21b      	sxth	r3, r3
    15ce:	2b00      	cmp	r3, #0
    15d0:	db04      	blt.n	15dc <_i2c_m_sync_transfer+0x128>
				msg->flags &= ~I2C_M_BUSY;
    15d2:	886b      	ldrh	r3, [r5, #2]
    15d4:	4a53      	ldr	r2, [pc, #332]	; (1724 <_i2c_m_sync_transfer+0x270>)
    15d6:	4013      	ands	r3, r2
    15d8:	806b      	strh	r3, [r5, #2]
    15da:	e03d      	b.n	1658 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15dc:	6862      	ldr	r2, [r4, #4]
    15de:	23c0      	movs	r3, #192	; 0xc0
    15e0:	029b      	lsls	r3, r3, #10
    15e2:	4313      	orrs	r3, r2
    15e4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15e6:	69e3      	ldr	r3, [r4, #28]
    15e8:	075b      	lsls	r3, r3, #29
    15ea:	d4fc      	bmi.n	15e6 <_i2c_m_sync_transfer+0x132>
    15ec:	e7f1      	b.n	15d2 <_i2c_m_sync_transfer+0x11e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    15ee:	68ab      	ldr	r3, [r5, #8]
    15f0:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    15f2:	2328      	movs	r3, #40	; 0x28
    15f4:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15f6:	69e3      	ldr	r3, [r4, #28]
    15f8:	075b      	lsls	r3, r3, #29
    15fa:	d4fc      	bmi.n	15f6 <_i2c_m_sync_transfer+0x142>
				msg->buffer++;
    15fc:	68ab      	ldr	r3, [r5, #8]
    15fe:	3301      	adds	r3, #1
    1600:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1602:	686b      	ldr	r3, [r5, #4]
    1604:	3b01      	subs	r3, #1
    1606:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1608:	2000      	movs	r0, #0
    160a:	e025      	b.n	1658 <_i2c_m_sync_transfer+0x1a4>
	} else if (flags & SB_FLAG) {
    160c:	07bb      	lsls	r3, r7, #30
    160e:	d578      	bpl.n	1702 <_i2c_m_sync_transfer+0x24e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1610:	686b      	ldr	r3, [r5, #4]
    1612:	2b00      	cmp	r3, #0
    1614:	d06d      	beq.n	16f2 <_i2c_m_sync_transfer+0x23e>
    1616:	0752      	lsls	r2, r2, #29
    1618:	d46b      	bmi.n	16f2 <_i2c_m_sync_transfer+0x23e>
			msg->len--;
    161a:	3b01      	subs	r3, #1
    161c:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    161e:	2b00      	cmp	r3, #0
    1620:	d101      	bne.n	1626 <_i2c_m_sync_transfer+0x172>
    1622:	2900      	cmp	r1, #0
    1624:	d04c      	beq.n	16c0 <_i2c_m_sync_transfer+0x20c>
    1626:	2b01      	cmp	r3, #1
    1628:	d048      	beq.n	16bc <_i2c_m_sync_transfer+0x208>
			if (msg->len == 0) {
    162a:	686b      	ldr	r3, [r5, #4]
    162c:	2b00      	cmp	r3, #0
    162e:	d107      	bne.n	1640 <_i2c_m_sync_transfer+0x18c>
				if (msg->flags & I2C_M_STOP) {
    1630:	886b      	ldrh	r3, [r5, #2]
    1632:	b21b      	sxth	r3, r3
    1634:	2b00      	cmp	r3, #0
    1636:	db4c      	blt.n	16d2 <_i2c_m_sync_transfer+0x21e>
				msg->flags &= ~I2C_M_BUSY;
    1638:	886b      	ldrh	r3, [r5, #2]
    163a:	4a3a      	ldr	r2, [pc, #232]	; (1724 <_i2c_m_sync_transfer+0x270>)
    163c:	4013      	ands	r3, r2
    163e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1640:	68aa      	ldr	r2, [r5, #8]
    1642:	1c53      	adds	r3, r2, #1
    1644:	60ab      	str	r3, [r5, #8]
    1646:	69e3      	ldr	r3, [r4, #28]
    1648:	075b      	lsls	r3, r3, #29
    164a:	d4fc      	bmi.n	1646 <_i2c_m_sync_transfer+0x192>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    164c:	2328      	movs	r3, #40	; 0x28
    164e:	5ce3      	ldrb	r3, [r4, r3]
    1650:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1652:	2302      	movs	r3, #2
    1654:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1656:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1658:	886b      	ldrh	r3, [r5, #2]
    165a:	05db      	lsls	r3, r3, #23
    165c:	d400      	bmi.n	1660 <_i2c_m_sync_transfer+0x1ac>
    165e:	e761      	b.n	1524 <_i2c_m_sync_transfer+0x70>
	void *   hw      = i2c_dev->hw;
    1660:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    1662:	4a32      	ldr	r2, [pc, #200]	; (172c <_i2c_m_sync_transfer+0x278>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1664:	7e03      	ldrb	r3, [r0, #24]
    1666:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1668:	001f      	movs	r7, r3
		if (timeout-- == 0) {
    166a:	1e51      	subs	r1, r2, #1
    166c:	2a00      	cmp	r2, #0
    166e:	d100      	bne.n	1672 <_i2c_m_sync_transfer+0x1be>
    1670:	e759      	b.n	1526 <_i2c_m_sync_transfer+0x72>
    1672:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1674:	079b      	lsls	r3, r3, #30
    1676:	d0f5      	beq.n	1664 <_i2c_m_sync_transfer+0x1b0>
	return I2C_OK;
    1678:	2000      	movs	r0, #0
		if (ret) {
    167a:	2800      	cmp	r0, #0
    167c:	d000      	beq.n	1680 <_i2c_m_sync_transfer+0x1cc>
    167e:	e755      	b.n	152c <_i2c_m_sync_transfer+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1680:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1682:	0edb      	lsrs	r3, r3, #27
    1684:	2101      	movs	r1, #1
    1686:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1688:	69e3      	ldr	r3, [r4, #28]
    168a:	075b      	lsls	r3, r3, #29
    168c:	d4fc      	bmi.n	1688 <_i2c_m_sync_transfer+0x1d4>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    168e:	8b62      	ldrh	r2, [r4, #26]
    1690:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    1692:	07fb      	lsls	r3, r7, #31
    1694:	d5ba      	bpl.n	160c <_i2c_m_sync_transfer+0x158>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1696:	0793      	lsls	r3, r2, #30
    1698:	d400      	bmi.n	169c <_i2c_m_sync_transfer+0x1e8>
    169a:	e759      	b.n	1550 <_i2c_m_sync_transfer+0x9c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    169c:	2301      	movs	r3, #1
    169e:	7623      	strb	r3, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    16a0:	886b      	ldrh	r3, [r5, #2]
    16a2:	2180      	movs	r1, #128	; 0x80
    16a4:	0149      	lsls	r1, r1, #5
    16a6:	430b      	orrs	r3, r1
    16a8:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    16aa:	886b      	ldrh	r3, [r5, #2]
    16ac:	491d      	ldr	r1, [pc, #116]	; (1724 <_i2c_m_sync_transfer+0x270>)
    16ae:	400b      	ands	r3, r1
    16b0:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    16b2:	07d3      	lsls	r3, r2, #31
    16b4:	d522      	bpl.n	16fc <_i2c_m_sync_transfer+0x248>
				return I2C_ERR_BUS;
    16b6:	2005      	movs	r0, #5
    16b8:	4240      	negs	r0, r0
    16ba:	e7cd      	b.n	1658 <_i2c_m_sync_transfer+0x1a4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    16bc:	2900      	cmp	r1, #0
    16be:	d0b4      	beq.n	162a <_i2c_m_sync_transfer+0x176>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    16c0:	6862      	ldr	r2, [r4, #4]
    16c2:	2380      	movs	r3, #128	; 0x80
    16c4:	02db      	lsls	r3, r3, #11
    16c6:	4313      	orrs	r3, r2
    16c8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16ca:	69e3      	ldr	r3, [r4, #28]
    16cc:	075b      	lsls	r3, r3, #29
    16ce:	d4fc      	bmi.n	16ca <_i2c_m_sync_transfer+0x216>
    16d0:	e7ab      	b.n	162a <_i2c_m_sync_transfer+0x176>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    16d2:	6863      	ldr	r3, [r4, #4]
    16d4:	4a13      	ldr	r2, [pc, #76]	; (1724 <_i2c_m_sync_transfer+0x270>)
    16d6:	4013      	ands	r3, r2
    16d8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16da:	69e3      	ldr	r3, [r4, #28]
    16dc:	075b      	lsls	r3, r3, #29
    16de:	d4fc      	bmi.n	16da <_i2c_m_sync_transfer+0x226>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    16e0:	6862      	ldr	r2, [r4, #4]
    16e2:	23c0      	movs	r3, #192	; 0xc0
    16e4:	029b      	lsls	r3, r3, #10
    16e6:	4313      	orrs	r3, r2
    16e8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16ea:	69e3      	ldr	r3, [r4, #28]
    16ec:	075b      	lsls	r3, r3, #29
    16ee:	d4fc      	bmi.n	16ea <_i2c_m_sync_transfer+0x236>
    16f0:	e7a2      	b.n	1638 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    16f2:	2302      	movs	r3, #2
    16f4:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    16f6:	2002      	movs	r0, #2
    16f8:	4240      	negs	r0, r0
    16fa:	e7ad      	b.n	1658 <_i2c_m_sync_transfer+0x1a4>
			return I2C_ERR_BAD_ADDRESS;
    16fc:	2004      	movs	r0, #4
    16fe:	4240      	negs	r0, r0
    1700:	e7aa      	b.n	1658 <_i2c_m_sync_transfer+0x1a4>
	return I2C_OK;
    1702:	2000      	movs	r0, #0
    1704:	e7a8      	b.n	1658 <_i2c_m_sync_transfer+0x1a4>
		return I2C_ERR_BUSY;
    1706:	2006      	movs	r0, #6
    1708:	4240      	negs	r0, r0
    170a:	e70b      	b.n	1524 <_i2c_m_sync_transfer+0x70>
    170c:	000005c2 	.word	0x000005c2
    1710:	00003994 	.word	0x00003994
    1714:	00000c1d 	.word	0x00000c1d
    1718:	000005c3 	.word	0x000005c3
    171c:	000005c4 	.word	0x000005c4
    1720:	00001195 	.word	0x00001195
    1724:	fffffeff 	.word	0xfffffeff
    1728:	fffffbff 	.word	0xfffffbff
    172c:	0000ffff 	.word	0x0000ffff

00001730 <i2c_init>:
			read_rdy[0] = 1;
		}
	}
}

static void i2c_init(void) {
    1730:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1732:	4b20      	ldr	r3, [pc, #128]	; (17b4 <i2c_init+0x84>)
    1734:	2248      	movs	r2, #72	; 0x48
    1736:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1738:	2401      	movs	r4, #1
    173a:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    173c:	2501      	movs	r5, #1
    173e:	4329      	orrs	r1, r5
    1740:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1742:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1744:	2034      	movs	r0, #52	; 0x34
    1746:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1748:	3a39      	subs	r2, #57	; 0x39
    174a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    174c:	2202      	movs	r2, #2
    174e:	4311      	orrs	r1, r2
    1750:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1752:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1754:	2149      	movs	r1, #73	; 0x49
    1756:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1758:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    175a:	432a      	orrs	r2, r5
    175c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    175e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1760:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1762:	393a      	subs	r1, #58	; 0x3a
    1764:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1766:	2120      	movs	r1, #32
    1768:	430a      	orrs	r2, r1
    176a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    176c:	541a      	strb	r2, [r3, r0]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    176e:	4b12      	ldr	r3, [pc, #72]	; (17b8 <i2c_init+0x88>)
    1770:	2142      	movs	r1, #66	; 0x42
    1772:	22c8      	movs	r2, #200	; 0xc8
    1774:	5099      	str	r1, [r3, r2]
    1776:	3101      	adds	r1, #1
    1778:	3a04      	subs	r2, #4
    177a:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
    177c:	4a0f      	ldr	r2, [pc, #60]	; (17bc <i2c_init+0x8c>)
    177e:	69d3      	ldr	r3, [r2, #28]
    1780:	431c      	orrs	r4, r3
    1782:	61d4      	str	r4, [r2, #28]
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, GCLK_PCHCTRL_GEN_GCLK2_Val | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, GCLK_PCHCTRL_GEN_GCLK3_Val | (1 << GCLK_PCHCTRL_CHEN_Pos));
	
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);

	I2C_SERCOM->I2CS.ADDR.reg = I2C_BASE_ADDRESS;
    1784:	2384      	movs	r3, #132	; 0x84
    1786:	05db      	lsls	r3, r3, #23
    1788:	2212      	movs	r2, #18
    178a:	625a      	str	r2, [r3, #36]	; 0x24
	I2C_SERCOM->I2CS.CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN;
    178c:	32ee      	adds	r2, #238	; 0xee
    178e:	605a      	str	r2, [r3, #4]

	I2C_SERCOM->I2CS.INTENSET.reg = SERCOM_I2CS_INTENSET_PREC | SERCOM_I2CS_INTENSET_AMATCH |
    1790:	3af9      	subs	r2, #249	; 0xf9
    1792:	759a      	strb	r2, [r3, #22]
	SERCOM_I2CS_INTENSET_DRDY;
	
	I2C_SERCOM->I2CS.CTRLA.reg = SERCOM_I2CS_CTRLA_SDAHOLD(0x02) |  SERCOM_I2CS_CTRLA_MODE(0x04); // set SDAHOLD to 300-600ns and set to slave mode
    1794:	4a0a      	ldr	r2, [pc, #40]	; (17c0 <i2c_init+0x90>)
    1796:	601a      	str	r2, [r3, #0]
	
	I2C_SERCOM->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1798:	681a      	ldr	r2, [r3, #0]
    179a:	3941      	subs	r1, #65	; 0x41
    179c:	430a      	orrs	r2, r1
    179e:	601a      	str	r2, [r3, #0]
	
	while((I2C_SERCOM->I2CS.SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_ENABLE));
    17a0:	2384      	movs	r3, #132	; 0x84
    17a2:	05db      	lsls	r3, r3, #23
    17a4:	69db      	ldr	r3, [r3, #28]
    17a6:	079b      	lsls	r3, r3, #30
    17a8:	d4fa      	bmi.n	17a0 <i2c_init+0x70>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17aa:	2280      	movs	r2, #128	; 0x80
    17ac:	0052      	lsls	r2, r2, #1
    17ae:	4b05      	ldr	r3, [pc, #20]	; (17c4 <i2c_init+0x94>)
    17b0:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(I2C_SERCOM_IRQ);
}
    17b2:	bd30      	pop	{r4, r5, pc}
    17b4:	40002800 	.word	0x40002800
    17b8:	40001800 	.word	0x40001800
    17bc:	40000400 	.word	0x40000400
    17c0:	00200010 	.word	0x00200010
    17c4:	e000e100 	.word	0xe000e100

000017c8 <SysTick_Handler>:
void SysTick_Handler() {
    17c8:	b510      	push	{r4, lr}
	led_0_counter++;
    17ca:	4b2c      	ldr	r3, [pc, #176]	; (187c <SysTick_Handler+0xb4>)
    17cc:	8818      	ldrh	r0, [r3, #0]
    17ce:	3001      	adds	r0, #1
    17d0:	b280      	uxth	r0, r0
    17d2:	8018      	strh	r0, [r3, #0]
	if (ad5933_enabled) {
    17d4:	4b2a      	ldr	r3, [pc, #168]	; (1880 <SysTick_Handler+0xb8>)
    17d6:	781b      	ldrb	r3, [r3, #0]
    17d8:	2b00      	cmp	r3, #0
    17da:	d045      	beq.n	1868 <SysTick_Handler+0xa0>
		imp_counter++;
    17dc:	4a27      	ldr	r2, [pc, #156]	; (187c <SysTick_Handler+0xb4>)
    17de:	8853      	ldrh	r3, [r2, #2]
    17e0:	3301      	adds	r3, #1
    17e2:	8053      	strh	r3, [r2, #2]
	if (max30205_enabled) {
    17e4:	4b26      	ldr	r3, [pc, #152]	; (1880 <SysTick_Handler+0xb8>)
    17e6:	785b      	ldrb	r3, [r3, #1]
    17e8:	2b00      	cmp	r3, #0
    17ea:	d042      	beq.n	1872 <SysTick_Handler+0xaa>
		temp_counter++;
    17ec:	4a23      	ldr	r2, [pc, #140]	; (187c <SysTick_Handler+0xb4>)
    17ee:	88d3      	ldrh	r3, [r2, #6]
    17f0:	3301      	adds	r3, #1
    17f2:	80d3      	strh	r3, [r2, #6]
	if (led_0_counter % 1001 == 0){
    17f4:	4923      	ldr	r1, [pc, #140]	; (1884 <SysTick_Handler+0xbc>)
    17f6:	4b24      	ldr	r3, [pc, #144]	; (1888 <SysTick_Handler+0xc0>)
    17f8:	4798      	blx	r3
    17fa:	b289      	uxth	r1, r1
    17fc:	2900      	cmp	r1, #0
    17fe:	d102      	bne.n	1806 <SysTick_Handler+0x3e>
		led_0_counter = 1;
    1800:	2201      	movs	r2, #1
    1802:	4b1e      	ldr	r3, [pc, #120]	; (187c <SysTick_Handler+0xb4>)
    1804:	801a      	strh	r2, [r3, #0]
	if (led_1_counter % 1001 == 0) {
    1806:	4b1d      	ldr	r3, [pc, #116]	; (187c <SysTick_Handler+0xb4>)
    1808:	8898      	ldrh	r0, [r3, #4]
    180a:	491e      	ldr	r1, [pc, #120]	; (1884 <SysTick_Handler+0xbc>)
    180c:	4b1e      	ldr	r3, [pc, #120]	; (1888 <SysTick_Handler+0xc0>)
    180e:	4798      	blx	r3
    1810:	b289      	uxth	r1, r1
    1812:	2900      	cmp	r1, #0
    1814:	d102      	bne.n	181c <SysTick_Handler+0x54>
		led_1_counter = 1;
    1816:	2201      	movs	r2, #1
    1818:	4b18      	ldr	r3, [pc, #96]	; (187c <SysTick_Handler+0xb4>)
    181a:	809a      	strh	r2, [r3, #4]
	if (led_2_counter % 1001 == 0) {
    181c:	4b17      	ldr	r3, [pc, #92]	; (187c <SysTick_Handler+0xb4>)
    181e:	8918      	ldrh	r0, [r3, #8]
    1820:	4918      	ldr	r1, [pc, #96]	; (1884 <SysTick_Handler+0xbc>)
    1822:	4b19      	ldr	r3, [pc, #100]	; (1888 <SysTick_Handler+0xc0>)
    1824:	4798      	blx	r3
    1826:	b289      	uxth	r1, r1
    1828:	2900      	cmp	r1, #0
    182a:	d102      	bne.n	1832 <SysTick_Handler+0x6a>
		led_2_counter = 1;
    182c:	2201      	movs	r2, #1
    182e:	4b13      	ldr	r3, [pc, #76]	; (187c <SysTick_Handler+0xb4>)
    1830:	811a      	strh	r2, [r3, #8]
	if (imp_counter % imp_period_ms == 0) {
    1832:	4b12      	ldr	r3, [pc, #72]	; (187c <SysTick_Handler+0xb4>)
    1834:	8858      	ldrh	r0, [r3, #2]
    1836:	8959      	ldrh	r1, [r3, #10]
    1838:	4b13      	ldr	r3, [pc, #76]	; (1888 <SysTick_Handler+0xc0>)
    183a:	4798      	blx	r3
    183c:	b289      	uxth	r1, r1
    183e:	2900      	cmp	r1, #0
    1840:	d104      	bne.n	184c <SysTick_Handler+0x84>
		imp_counter = 1;
    1842:	2201      	movs	r2, #1
    1844:	4b0d      	ldr	r3, [pc, #52]	; (187c <SysTick_Handler+0xb4>)
    1846:	805a      	strh	r2, [r3, #2]
		do_imp = true;
    1848:	4b0d      	ldr	r3, [pc, #52]	; (1880 <SysTick_Handler+0xb8>)
    184a:	709a      	strb	r2, [r3, #2]
	if (temp_counter % temp_period_ms == 0) {
    184c:	4b0b      	ldr	r3, [pc, #44]	; (187c <SysTick_Handler+0xb4>)
    184e:	88d8      	ldrh	r0, [r3, #6]
    1850:	8999      	ldrh	r1, [r3, #12]
    1852:	4b0d      	ldr	r3, [pc, #52]	; (1888 <SysTick_Handler+0xc0>)
    1854:	4798      	blx	r3
    1856:	b289      	uxth	r1, r1
    1858:	2900      	cmp	r1, #0
    185a:	d104      	bne.n	1866 <SysTick_Handler+0x9e>
		temp_counter = 1;
    185c:	2201      	movs	r2, #1
    185e:	4b07      	ldr	r3, [pc, #28]	; (187c <SysTick_Handler+0xb4>)
    1860:	80da      	strh	r2, [r3, #6]
		do_temp = true;
    1862:	4b07      	ldr	r3, [pc, #28]	; (1880 <SysTick_Handler+0xb8>)
    1864:	70da      	strb	r2, [r3, #3]
}
    1866:	bd10      	pop	{r4, pc}
		led_1_counter++;
    1868:	4a04      	ldr	r2, [pc, #16]	; (187c <SysTick_Handler+0xb4>)
    186a:	8893      	ldrh	r3, [r2, #4]
    186c:	3301      	adds	r3, #1
    186e:	8093      	strh	r3, [r2, #4]
    1870:	e7b8      	b.n	17e4 <SysTick_Handler+0x1c>
		led_2_counter++;
    1872:	4a02      	ldr	r2, [pc, #8]	; (187c <SysTick_Handler+0xb4>)
    1874:	8913      	ldrh	r3, [r2, #8]
    1876:	3301      	adds	r3, #1
    1878:	8113      	strh	r3, [r2, #8]
    187a:	e7bb      	b.n	17f4 <SysTick_Handler+0x2c>
    187c:	20000000 	.word	0x20000000
    1880:	20000040 	.word	0x20000040
    1884:	000003e9 	.word	0x000003e9
    1888:	00002099 	.word	0x00002099

0000188c <main>:
int main(void) {
    188c:	b570      	push	{r4, r5, r6, lr}
	atmel_start_init();
    188e:	4ba3      	ldr	r3, [pc, #652]	; (1b1c <main+0x290>)
    1890:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1892:	49a3      	ldr	r1, [pc, #652]	; (1b20 <main+0x294>)
    1894:	4ba3      	ldr	r3, [pc, #652]	; (1b24 <main+0x298>)
    1896:	604b      	str	r3, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1898:	48a3      	ldr	r0, [pc, #652]	; (1b28 <main+0x29c>)
    189a:	6a03      	ldr	r3, [r0, #32]
    189c:	021b      	lsls	r3, r3, #8
    189e:	0a1b      	lsrs	r3, r3, #8
    18a0:	22c0      	movs	r2, #192	; 0xc0
    18a2:	0612      	lsls	r2, r2, #24
    18a4:	4313      	orrs	r3, r2
    18a6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    18a8:	2200      	movs	r2, #0
    18aa:	608a      	str	r2, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    18ac:	2307      	movs	r3, #7
    18ae:	600b      	str	r3, [r1, #0]
		imp_counter = 5000;
    18b0:	4b9e      	ldr	r3, [pc, #632]	; (1b2c <main+0x2a0>)
    18b2:	499f      	ldr	r1, [pc, #636]	; (1b30 <main+0x2a4>)
    18b4:	8059      	strh	r1, [r3, #2]
		temp_counter = 5000;
    18b6:	80d9      	strh	r1, [r3, #6]
	imp.imp_1_real[0] = 100;
    18b8:	4b9e      	ldr	r3, [pc, #632]	; (1b34 <main+0x2a8>)
    18ba:	2164      	movs	r1, #100	; 0x64
    18bc:	7019      	strb	r1, [r3, #0]
	imp.imp_1_real[1] = 0; // 100
    18be:	705a      	strb	r2, [r3, #1]
	imp.imp_1_img[0] = 150;
    18c0:	3132      	adds	r1, #50	; 0x32
    18c2:	7099      	strb	r1, [r3, #2]
	imp.imp_1_img[1] = 0;  // 150
    18c4:	70da      	strb	r2, [r3, #3]
	imp.imp_2_real[0] = 200;
    18c6:	3132      	adds	r1, #50	; 0x32
    18c8:	7119      	strb	r1, [r3, #4]
	imp.imp_2_real[1] = 0; // 200
    18ca:	715a      	strb	r2, [r3, #5]
	imp.imp_2_img[0] = 250;
    18cc:	3132      	adds	r1, #50	; 0x32
    18ce:	7199      	strb	r1, [r3, #6]
	imp.imp_2_img[1] = 0; // 250
    18d0:	71da      	strb	r2, [r3, #7]
	i2c_init();
    18d2:	4b99      	ldr	r3, [pc, #612]	; (1b38 <main+0x2ac>)
    18d4:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_MST);
    18d6:	4899      	ldr	r0, [pc, #612]	; (1b3c <main+0x2b0>)
    18d8:	4b99      	ldr	r3, [pc, #612]	; (1b40 <main+0x2b4>)
    18da:	4798      	blx	r3
		if (AD_scan() == I2C_OK) {
    18dc:	4b99      	ldr	r3, [pc, #612]	; (1b44 <main+0x2b8>)
    18de:	4798      	blx	r3
    18e0:	2800      	cmp	r0, #0
    18e2:	d150      	bne.n	1986 <main+0xfa>
			if ((	AD_reset() ||
    18e4:	4b98      	ldr	r3, [pc, #608]	; (1b48 <main+0x2bc>)
    18e6:	4798      	blx	r3
			AD_set_range(CTRL_OUTPUT_RANGE_2) ||
    18e8:	2800      	cmp	r0, #0
    18ea:	d135      	bne.n	1958 <main+0xcc>
			AD_set_clock_external() ||
    18ec:	4b97      	ldr	r3, [pc, #604]	; (1b4c <main+0x2c0>)
    18ee:	4798      	blx	r3
			if ((	AD_reset() ||
    18f0:	2800      	cmp	r0, #0
    18f2:	d133      	bne.n	195c <main+0xd0>
			AD_set_start_freq(AD5933_FREQUENCY_MAIN) ||
    18f4:	20fa      	movs	r0, #250	; 0xfa
    18f6:	0080      	lsls	r0, r0, #2
    18f8:	4b95      	ldr	r3, [pc, #596]	; (1b50 <main+0x2c4>)
    18fa:	4798      	blx	r3
			AD_set_clock_external() ||
    18fc:	2800      	cmp	r0, #0
    18fe:	d12f      	bne.n	1960 <main+0xd4>
			AD_set_increment_freq(0) ||
    1900:	4b94      	ldr	r3, [pc, #592]	; (1b54 <main+0x2c8>)
    1902:	4798      	blx	r3
			AD_set_start_freq(AD5933_FREQUENCY_MAIN) ||
    1904:	2800      	cmp	r0, #0
    1906:	d12d      	bne.n	1964 <main+0xd8>
			AD_set_n_increments(0) ||
    1908:	4b93      	ldr	r3, [pc, #588]	; (1b58 <main+0x2cc>)
    190a:	4798      	blx	r3
			AD_set_increment_freq(0) ||
    190c:	2800      	cmp	r0, #0
    190e:	d12b      	bne.n	1968 <main+0xdc>
			AD_set_settling_cycles(500) ||
    1910:	30f5      	adds	r0, #245	; 0xf5
    1912:	30ff      	adds	r0, #255	; 0xff
    1914:	4b91      	ldr	r3, [pc, #580]	; (1b5c <main+0x2d0>)
    1916:	4798      	blx	r3
			AD_set_n_increments(0) ||
    1918:	2800      	cmp	r0, #0
    191a:	d127      	bne.n	196c <main+0xe0>
			AD_set_range(CTRL_OUTPUT_RANGE_2) ||
    191c:	3006      	adds	r0, #6
    191e:	4b90      	ldr	r3, [pc, #576]	; (1b60 <main+0x2d4>)
    1920:	4798      	blx	r3
			AD_set_settling_cycles(500) ||
    1922:	2800      	cmp	r0, #0
    1924:	d124      	bne.n	1970 <main+0xe4>
			AD_set_PGA_gain(CTRL_PGA_GAIN_X1))
    1926:	3001      	adds	r0, #1
    1928:	4b8e      	ldr	r3, [pc, #568]	; (1b64 <main+0x2d8>)
    192a:	4798      	blx	r3
			AD_set_range(CTRL_OUTPUT_RANGE_2) ||
    192c:	2800      	cmp	r0, #0
    192e:	d121      	bne.n	1974 <main+0xe8>
    1930:	2300      	movs	r3, #0
			if ((	AD_reset() ||
    1932:	2b00      	cmp	r3, #0
    1934:	d020      	beq.n	1978 <main+0xec>
				ad5933_enabled = false;
    1936:	2200      	movs	r2, #0
    1938:	4b8b      	ldr	r3, [pc, #556]	; (1b68 <main+0x2dc>)
    193a:	701a      	strb	r2, [r3, #0]
		if (MAX_scan() == I2C_OK) {
    193c:	4b8b      	ldr	r3, [pc, #556]	; (1b6c <main+0x2e0>)
    193e:	4798      	blx	r3
    1940:	2800      	cmp	r0, #0
    1942:	d124      	bne.n	198e <main+0x102>
			MAX_begin();
    1944:	4b8a      	ldr	r3, [pc, #552]	; (1b70 <main+0x2e4>)
    1946:	4798      	blx	r3
			max30205_enabled = true;
    1948:	2201      	movs	r2, #1
    194a:	4b87      	ldr	r3, [pc, #540]	; (1b68 <main+0x2dc>)
    194c:	705a      	strb	r2, [r3, #1]
	adc_sync_enable_channel(&ADC_0, 0);
    194e:	2100      	movs	r1, #0
    1950:	4888      	ldr	r0, [pc, #544]	; (1b74 <main+0x2e8>)
    1952:	4b89      	ldr	r3, [pc, #548]	; (1b78 <main+0x2ec>)
    1954:	4798      	blx	r3
    1956:	e079      	b.n	1a4c <main+0x1c0>
			AD_set_range(CTRL_OUTPUT_RANGE_2) ||
    1958:	2301      	movs	r3, #1
    195a:	e7ea      	b.n	1932 <main+0xa6>
    195c:	2301      	movs	r3, #1
    195e:	e7e8      	b.n	1932 <main+0xa6>
    1960:	2301      	movs	r3, #1
    1962:	e7e6      	b.n	1932 <main+0xa6>
    1964:	2301      	movs	r3, #1
    1966:	e7e4      	b.n	1932 <main+0xa6>
    1968:	2301      	movs	r3, #1
    196a:	e7e2      	b.n	1932 <main+0xa6>
    196c:	2301      	movs	r3, #1
    196e:	e7e0      	b.n	1932 <main+0xa6>
    1970:	2301      	movs	r3, #1
    1972:	e7de      	b.n	1932 <main+0xa6>
    1974:	2301      	movs	r3, #1
    1976:	e7dc      	b.n	1932 <main+0xa6>
				AD_set_power_mode(POWER_STANDBY);
    1978:	20b0      	movs	r0, #176	; 0xb0
    197a:	4b80      	ldr	r3, [pc, #512]	; (1b7c <main+0x2f0>)
    197c:	4798      	blx	r3
				ad5933_enabled = true;
    197e:	2201      	movs	r2, #1
    1980:	4b79      	ldr	r3, [pc, #484]	; (1b68 <main+0x2dc>)
    1982:	701a      	strb	r2, [r3, #0]
    1984:	e7da      	b.n	193c <main+0xb0>
			ad5933_enabled = false;
    1986:	2200      	movs	r2, #0
    1988:	4b77      	ldr	r3, [pc, #476]	; (1b68 <main+0x2dc>)
    198a:	701a      	strb	r2, [r3, #0]
    198c:	e7d6      	b.n	193c <main+0xb0>
			max30205_enabled = false;
    198e:	2200      	movs	r2, #0
    1990:	4b75      	ldr	r3, [pc, #468]	; (1b68 <main+0x2dc>)
    1992:	705a      	strb	r2, [r3, #1]
    1994:	e7db      	b.n	194e <main+0xc2>
			delay_us(750); // TODO: this isn't enough!
    1996:	487a      	ldr	r0, [pc, #488]	; (1b80 <main+0x2f4>)
    1998:	4b7a      	ldr	r3, [pc, #488]	; (1b84 <main+0x2f8>)
    199a:	4798      	blx	r3
			adc_sync_read_channel(&ADC_0, 0, emg, 2);
    199c:	2302      	movs	r3, #2
    199e:	4a7a      	ldr	r2, [pc, #488]	; (1b88 <main+0x2fc>)
    19a0:	2100      	movs	r1, #0
    19a2:	4874      	ldr	r0, [pc, #464]	; (1b74 <main+0x2e8>)
    19a4:	4c79      	ldr	r4, [pc, #484]	; (1b8c <main+0x300>)
    19a6:	47a0      	blx	r4
			do_emg = false;
    19a8:	2200      	movs	r2, #0
    19aa:	4b6f      	ldr	r3, [pc, #444]	; (1b68 <main+0x2dc>)
    19ac:	711a      	strb	r2, [r3, #4]
    19ae:	e051      	b.n	1a54 <main+0x1c8>
			i2c_m_sync_set_slaveaddr(&I2C_MST, AD5933_ADDR, I2C_M_SEVEN);
    19b0:	2280      	movs	r2, #128	; 0x80
    19b2:	0112      	lsls	r2, r2, #4
    19b4:	210d      	movs	r1, #13
    19b6:	4861      	ldr	r0, [pc, #388]	; (1b3c <main+0x2b0>)
    19b8:	4b75      	ldr	r3, [pc, #468]	; (1b90 <main+0x304>)
    19ba:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    19bc:	23c0      	movs	r3, #192	; 0xc0
    19be:	05db      	lsls	r3, r3, #23
    19c0:	2280      	movs	r2, #128	; 0x80
    19c2:	03d2      	lsls	r2, r2, #15
    19c4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    19c6:	2280      	movs	r2, #128	; 0x80
    19c8:	0412      	lsls	r2, r2, #16
    19ca:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    19cc:	2280      	movs	r2, #128	; 0x80
    19ce:	0452      	lsls	r2, r2, #17
    19d0:	619a      	str	r2, [r3, #24]
    19d2:	2280      	movs	r2, #128	; 0x80
    19d4:	0492      	lsls	r2, r2, #18
    19d6:	619a      	str	r2, [r3, #24]
			bool ad_res = false;
    19d8:	2400      	movs	r4, #0
			while (!ad_res) {
    19da:	2c00      	cmp	r4, #0
    19dc:	d107      	bne.n	19ee <main+0x162>
				if (AD_get_complex_data(imp.imp_1_real, imp.imp_1_img) == I2C_OK) ad_res = true;
    19de:	496d      	ldr	r1, [pc, #436]	; (1b94 <main+0x308>)
    19e0:	1e88      	subs	r0, r1, #2
    19e2:	4b6d      	ldr	r3, [pc, #436]	; (1b98 <main+0x30c>)
    19e4:	4798      	blx	r3
    19e6:	2800      	cmp	r0, #0
    19e8:	d1f7      	bne.n	19da <main+0x14e>
    19ea:	002c      	movs	r4, r5
    19ec:	e7f5      	b.n	19da <main+0x14e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    19ee:	23c0      	movs	r3, #192	; 0xc0
    19f0:	05db      	lsls	r3, r3, #23
    19f2:	2280      	movs	r2, #128	; 0x80
    19f4:	03d2      	lsls	r2, r2, #15
    19f6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    19f8:	2280      	movs	r2, #128	; 0x80
    19fa:	0412      	lsls	r2, r2, #16
    19fc:	619a      	str	r2, [r3, #24]
    19fe:	2280      	movs	r2, #128	; 0x80
    1a00:	0452      	lsls	r2, r2, #17
    1a02:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1a04:	2280      	movs	r2, #128	; 0x80
    1a06:	0492      	lsls	r2, r2, #18
    1a08:	615a      	str	r2, [r3, #20]
			ad_res = false;
    1a0a:	2500      	movs	r5, #0
			while (!ad_res) {
    1a0c:	2d00      	cmp	r5, #0
    1a0e:	d107      	bne.n	1a20 <main+0x194>
				if (AD_get_complex_data(imp.imp_2_real, imp.imp_2_img) == I2C_OK) ad_res = true;
    1a10:	4962      	ldr	r1, [pc, #392]	; (1b9c <main+0x310>)
    1a12:	1e88      	subs	r0, r1, #2
    1a14:	4b60      	ldr	r3, [pc, #384]	; (1b98 <main+0x30c>)
    1a16:	4798      	blx	r3
    1a18:	2800      	cmp	r0, #0
    1a1a:	d1f7      	bne.n	1a0c <main+0x180>
    1a1c:	0025      	movs	r5, r4
    1a1e:	e7f5      	b.n	1a0c <main+0x180>
    1a20:	23c0      	movs	r3, #192	; 0xc0
    1a22:	05db      	lsls	r3, r3, #23
    1a24:	2280      	movs	r2, #128	; 0x80
    1a26:	0452      	lsls	r2, r2, #17
    1a28:	615a      	str	r2, [r3, #20]
    1a2a:	2280      	movs	r2, #128	; 0x80
    1a2c:	03d2      	lsls	r2, r2, #15
    1a2e:	615a      	str	r2, [r3, #20]
    1a30:	2280      	movs	r2, #128	; 0x80
    1a32:	0412      	lsls	r2, r2, #16
    1a34:	615a      	str	r2, [r3, #20]
    1a36:	2280      	movs	r2, #128	; 0x80
    1a38:	0492      	lsls	r2, r2, #18
    1a3a:	615a      	str	r2, [r3, #20]
			do_imp = false;
    1a3c:	2200      	movs	r2, #0
    1a3e:	4b4a      	ldr	r3, [pc, #296]	; (1b68 <main+0x2dc>)
    1a40:	709a      	strb	r2, [r3, #2]
    1a42:	e00b      	b.n	1a5c <main+0x1d0>
		if (req_read) {
    1a44:	4b48      	ldr	r3, [pc, #288]	; (1b68 <main+0x2dc>)
    1a46:	7a9c      	ldrb	r4, [r3, #10]
    1a48:	2c00      	cmp	r4, #0
    1a4a:	d113      	bne.n	1a74 <main+0x1e8>
		if (do_emg) {
    1a4c:	4b46      	ldr	r3, [pc, #280]	; (1b68 <main+0x2dc>)
    1a4e:	791b      	ldrb	r3, [r3, #4]
    1a50:	2b00      	cmp	r3, #0
    1a52:	d1a0      	bne.n	1996 <main+0x10a>
		if (do_imp) {
    1a54:	4b44      	ldr	r3, [pc, #272]	; (1b68 <main+0x2dc>)
    1a56:	789d      	ldrb	r5, [r3, #2]
    1a58:	2d00      	cmp	r5, #0
    1a5a:	d1a9      	bne.n	19b0 <main+0x124>
		if (do_temp) {
    1a5c:	4b42      	ldr	r3, [pc, #264]	; (1b68 <main+0x2dc>)
    1a5e:	78db      	ldrb	r3, [r3, #3]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d0ef      	beq.n	1a44 <main+0x1b8>
			MAX_get_temperature(temp);
    1a64:	4c40      	ldr	r4, [pc, #256]	; (1b68 <main+0x2dc>)
    1a66:	0020      	movs	r0, r4
    1a68:	3008      	adds	r0, #8
    1a6a:	4b4d      	ldr	r3, [pc, #308]	; (1ba0 <main+0x314>)
    1a6c:	4798      	blx	r3
			do_temp = false;
    1a6e:	2300      	movs	r3, #0
    1a70:	70e3      	strb	r3, [r4, #3]
    1a72:	e7e7      	b.n	1a44 <main+0x1b8>
			req_read = false;
    1a74:	2200      	movs	r2, #0
    1a76:	729a      	strb	r2, [r3, #10]
			i2c_m_sync_set_slaveaddr(&I2C_MST, AD5933_ADDR, I2C_M_SEVEN);
    1a78:	2280      	movs	r2, #128	; 0x80
    1a7a:	0112      	lsls	r2, r2, #4
    1a7c:	210d      	movs	r1, #13
    1a7e:	482f      	ldr	r0, [pc, #188]	; (1b3c <main+0x2b0>)
    1a80:	4b43      	ldr	r3, [pc, #268]	; (1b90 <main+0x304>)
    1a82:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1a84:	23c0      	movs	r3, #192	; 0xc0
    1a86:	05db      	lsls	r3, r3, #23
    1a88:	2280      	movs	r2, #128	; 0x80
    1a8a:	03d2      	lsls	r2, r2, #15
    1a8c:	619a      	str	r2, [r3, #24]
    1a8e:	2280      	movs	r2, #128	; 0x80
    1a90:	0412      	lsls	r2, r2, #16
    1a92:	619a      	str	r2, [r3, #24]
    1a94:	2280      	movs	r2, #128	; 0x80
    1a96:	0452      	lsls	r2, r2, #17
    1a98:	619a      	str	r2, [r3, #24]
    1a9a:	2280      	movs	r2, #128	; 0x80
    1a9c:	0492      	lsls	r2, r2, #18
    1a9e:	619a      	str	r2, [r3, #24]
			bool ad_res = false;
    1aa0:	2500      	movs	r5, #0
			while (!ad_res) {
    1aa2:	2d00      	cmp	r5, #0
    1aa4:	d107      	bne.n	1ab6 <main+0x22a>
				if (AD_get_complex_data(imp.imp_1_real, imp.imp_1_img) == I2C_OK) ad_res = true;
    1aa6:	493b      	ldr	r1, [pc, #236]	; (1b94 <main+0x308>)
    1aa8:	1e88      	subs	r0, r1, #2
    1aaa:	4b3b      	ldr	r3, [pc, #236]	; (1b98 <main+0x30c>)
    1aac:	4798      	blx	r3
    1aae:	2800      	cmp	r0, #0
    1ab0:	d1f7      	bne.n	1aa2 <main+0x216>
    1ab2:	0025      	movs	r5, r4
    1ab4:	e7f5      	b.n	1aa2 <main+0x216>
    1ab6:	23c0      	movs	r3, #192	; 0xc0
    1ab8:	05db      	lsls	r3, r3, #23
    1aba:	2280      	movs	r2, #128	; 0x80
    1abc:	03d2      	lsls	r2, r2, #15
    1abe:	619a      	str	r2, [r3, #24]
    1ac0:	2280      	movs	r2, #128	; 0x80
    1ac2:	0412      	lsls	r2, r2, #16
    1ac4:	619a      	str	r2, [r3, #24]
    1ac6:	2280      	movs	r2, #128	; 0x80
    1ac8:	0452      	lsls	r2, r2, #17
    1aca:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1acc:	2280      	movs	r2, #128	; 0x80
    1ace:	0492      	lsls	r2, r2, #18
    1ad0:	615a      	str	r2, [r3, #20]
			ad_res = false;
    1ad2:	2400      	movs	r4, #0
			while (!ad_res) {
    1ad4:	2c00      	cmp	r4, #0
    1ad6:	d107      	bne.n	1ae8 <main+0x25c>
				if (AD_get_complex_data(imp.imp_2_real, imp.imp_2_img) == I2C_OK) ad_res = true;
    1ad8:	4930      	ldr	r1, [pc, #192]	; (1b9c <main+0x310>)
    1ada:	1e88      	subs	r0, r1, #2
    1adc:	4b2e      	ldr	r3, [pc, #184]	; (1b98 <main+0x30c>)
    1ade:	4798      	blx	r3
    1ae0:	2800      	cmp	r0, #0
    1ae2:	d1f7      	bne.n	1ad4 <main+0x248>
    1ae4:	002c      	movs	r4, r5
    1ae6:	e7f5      	b.n	1ad4 <main+0x248>
    1ae8:	23c0      	movs	r3, #192	; 0xc0
    1aea:	05db      	lsls	r3, r3, #23
    1aec:	2280      	movs	r2, #128	; 0x80
    1aee:	0452      	lsls	r2, r2, #17
    1af0:	615a      	str	r2, [r3, #20]
    1af2:	2280      	movs	r2, #128	; 0x80
    1af4:	03d2      	lsls	r2, r2, #15
    1af6:	615a      	str	r2, [r3, #20]
    1af8:	2280      	movs	r2, #128	; 0x80
    1afa:	0412      	lsls	r2, r2, #16
    1afc:	615a      	str	r2, [r3, #20]
    1afe:	2280      	movs	r2, #128	; 0x80
    1b00:	0492      	lsls	r2, r2, #18
    1b02:	615a      	str	r2, [r3, #20]
			do_imp = false;
    1b04:	4c18      	ldr	r4, [pc, #96]	; (1b68 <main+0x2dc>)
    1b06:	2500      	movs	r5, #0
    1b08:	70a5      	strb	r5, [r4, #2]
			MAX_get_temperature(temp);			
    1b0a:	0020      	movs	r0, r4
    1b0c:	3008      	adds	r0, #8
    1b0e:	4b24      	ldr	r3, [pc, #144]	; (1ba0 <main+0x314>)
    1b10:	4798      	blx	r3
			do_temp = false;
    1b12:	70e5      	strb	r5, [r4, #3]
			read_rdy[0] = 1;
    1b14:	2301      	movs	r3, #1
    1b16:	7323      	strb	r3, [r4, #12]
    1b18:	e798      	b.n	1a4c <main+0x1c0>
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	00000635 	.word	0x00000635
    1b20:	e000e010 	.word	0xe000e010
    1b24:	0000bb84 	.word	0x0000bb84
    1b28:	e000ed00 	.word	0xe000ed00
    1b2c:	20000000 	.word	0x20000000
    1b30:	00001388 	.word	0x00001388
    1b34:	20000098 	.word	0x20000098
    1b38:	00001731 	.word	0x00001731
    1b3c:	20000070 	.word	0x20000070
    1b40:	00000af5 	.word	0x00000af5
    1b44:	0000016d 	.word	0x0000016d
    1b48:	00000229 	.word	0x00000229
    1b4c:	000002ad 	.word	0x000002ad
    1b50:	00000329 	.word	0x00000329
    1b54:	000003c5 	.word	0x000003c5
    1b58:	00000451 	.word	0x00000451
    1b5c:	000002f1 	.word	0x000002f1
    1b60:	000004d5 	.word	0x000004d5
    1b64:	00000481 	.word	0x00000481
    1b68:	20000040 	.word	0x20000040
    1b6c:	00001ed9 	.word	0x00001ed9
    1b70:	00001f25 	.word	0x00001f25
    1b74:	2000006c 	.word	0x2000006c
    1b78:	00000951 	.word	0x00000951
    1b7c:	0000053d 	.word	0x0000053d
    1b80:	000002ee 	.word	0x000002ee
    1b84:	00000a2d 	.word	0x00000a2d
    1b88:	20000090 	.word	0x20000090
    1b8c:	0000097d 	.word	0x0000097d
    1b90:	00000b01 	.word	0x00000b01
    1b94:	2000009a 	.word	0x2000009a
    1b98:	00000569 	.word	0x00000569
    1b9c:	2000009e 	.word	0x2000009e
    1ba0:	00001f5d 	.word	0x00001f5d

00001ba4 <i2c_process_cmd_chr>:
	}
	
}

// assume we are using a repeated start method for i2c, the master will send us a char with a register address (the enum of our registers), we store this, then on request kick out the expected result
void i2c_process_cmd_chr() {
    1ba4:	b570      	push	{r4, r5, r6, lr}
	switch (cmd_chr) {
    1ba6:	4b43      	ldr	r3, [pc, #268]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1ba8:	7b9a      	ldrb	r2, [r3, #14]
    1baa:	2a0d      	cmp	r2, #13
    1bac:	d80c      	bhi.n	1bc8 <i2c_process_cmd_chr+0x24>
    1bae:	0093      	lsls	r3, r2, #2
    1bb0:	4a41      	ldr	r2, [pc, #260]	; (1cb8 <i2c_process_cmd_chr+0x114>)
    1bb2:	58d3      	ldr	r3, [r2, r3]
    1bb4:	469f      	mov	pc, r3
		case EMG:
			tx_buffer = (uint8_t *)emg;	//TODO: check if this is at all the right way to assign a buffer
    1bb6:	4a41      	ldr	r2, [pc, #260]	; (1cbc <i2c_process_cmd_chr+0x118>)
    1bb8:	4b41      	ldr	r3, [pc, #260]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1bba:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 2;
    1bbc:	2202      	movs	r2, #2
    1bbe:	4b3d      	ldr	r3, [pc, #244]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1bc0:	73da      	strb	r2, [r3, #15]
			do_emg = true;
    1bc2:	3a01      	subs	r2, #1
    1bc4:	4b3f      	ldr	r3, [pc, #252]	; (1cc4 <i2c_process_cmd_chr+0x120>)
    1bc6:	711a      	strb	r2, [r3, #4]
			break;
		default:
			// nothing here
			break;
	}
}
    1bc8:	bd70      	pop	{r4, r5, r6, pc}
			tx_buffer = (uint8_t *)imp.imp_1_real;
    1bca:	4a3f      	ldr	r2, [pc, #252]	; (1cc8 <i2c_process_cmd_chr+0x124>)
    1bcc:	4b3c      	ldr	r3, [pc, #240]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1bce:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 2;
    1bd0:	2202      	movs	r2, #2
    1bd2:	4b38      	ldr	r3, [pc, #224]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1bd4:	73da      	strb	r2, [r3, #15]
			break;
    1bd6:	e7f7      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			tx_buffer = (uint8_t *)imp.imp_1_img;
    1bd8:	4a3c      	ldr	r2, [pc, #240]	; (1ccc <i2c_process_cmd_chr+0x128>)
    1bda:	4b39      	ldr	r3, [pc, #228]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1bdc:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 2;
    1bde:	2202      	movs	r2, #2
    1be0:	4b34      	ldr	r3, [pc, #208]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1be2:	73da      	strb	r2, [r3, #15]
			break;
    1be4:	e7f0      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			tx_buffer = (uint8_t *)imp.imp_2_real;
    1be6:	4a3a      	ldr	r2, [pc, #232]	; (1cd0 <i2c_process_cmd_chr+0x12c>)
    1be8:	4b35      	ldr	r3, [pc, #212]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1bea:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 2;
    1bec:	2202      	movs	r2, #2
    1bee:	4b31      	ldr	r3, [pc, #196]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1bf0:	73da      	strb	r2, [r3, #15]
			break;
    1bf2:	e7e9      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			tx_buffer = (uint8_t *)imp.imp_2_img;
    1bf4:	4a37      	ldr	r2, [pc, #220]	; (1cd4 <i2c_process_cmd_chr+0x130>)
    1bf6:	4b32      	ldr	r3, [pc, #200]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1bf8:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 2;
    1bfa:	2202      	movs	r2, #2
    1bfc:	4b2d      	ldr	r3, [pc, #180]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1bfe:	73da      	strb	r2, [r3, #15]
			break;
    1c00:	e7e2      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			tx_buffer = (uint8_t *)imp.imp_all;
    1c02:	4a31      	ldr	r2, [pc, #196]	; (1cc8 <i2c_process_cmd_chr+0x124>)
    1c04:	4b2e      	ldr	r3, [pc, #184]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1c06:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 8;
    1c08:	2208      	movs	r2, #8
    1c0a:	4b2a      	ldr	r3, [pc, #168]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1c0c:	73da      	strb	r2, [r3, #15]
			read_rdy[0] = 0;
    1c0e:	2200      	movs	r2, #0
    1c10:	4b2c      	ldr	r3, [pc, #176]	; (1cc4 <i2c_process_cmd_chr+0x120>)
    1c12:	731a      	strb	r2, [r3, #12]
			break;
    1c14:	e7d8      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			tx_buffer = (uint8_t *)temp;
    1c16:	4b2b      	ldr	r3, [pc, #172]	; (1cc4 <i2c_process_cmd_chr+0x120>)
    1c18:	3308      	adds	r3, #8
    1c1a:	4a29      	ldr	r2, [pc, #164]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1c1c:	6013      	str	r3, [r2, #0]
			tx_buffer_len = 2;
    1c1e:	2202      	movs	r2, #2
    1c20:	4b24      	ldr	r3, [pc, #144]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1c22:	73da      	strb	r2, [r3, #15]
			break;
    1c24:	e7d0      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			utoa(emg_period_us, (char*)temporary_buffer, 10);
    1c26:	4c27      	ldr	r4, [pc, #156]	; (1cc4 <i2c_process_cmd_chr+0x120>)
    1c28:	3410      	adds	r4, #16
    1c2a:	4d22      	ldr	r5, [pc, #136]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1c2c:	8a28      	ldrh	r0, [r5, #16]
    1c2e:	220a      	movs	r2, #10
    1c30:	0021      	movs	r1, r4
    1c32:	4b29      	ldr	r3, [pc, #164]	; (1cd8 <i2c_process_cmd_chr+0x134>)
    1c34:	4798      	blx	r3
			tx_buffer = (uint8_t *)temporary_buffer;
    1c36:	4b22      	ldr	r3, [pc, #136]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1c38:	601c      	str	r4, [r3, #0]
			tx_buffer_len = 4;
    1c3a:	2304      	movs	r3, #4
    1c3c:	73eb      	strb	r3, [r5, #15]
			break;
    1c3e:	e7c3      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			utoa(imp_period_ms, (char*)temporary_buffer, 10);
    1c40:	4c20      	ldr	r4, [pc, #128]	; (1cc4 <i2c_process_cmd_chr+0x120>)
    1c42:	3410      	adds	r4, #16
    1c44:	4d1b      	ldr	r5, [pc, #108]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1c46:	8968      	ldrh	r0, [r5, #10]
    1c48:	220a      	movs	r2, #10
    1c4a:	0021      	movs	r1, r4
    1c4c:	4b22      	ldr	r3, [pc, #136]	; (1cd8 <i2c_process_cmd_chr+0x134>)
    1c4e:	4798      	blx	r3
			tx_buffer = (uint8_t *)temporary_buffer;
    1c50:	4b1b      	ldr	r3, [pc, #108]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1c52:	601c      	str	r4, [r3, #0]
			tx_buffer_len = 4;
    1c54:	2304      	movs	r3, #4
    1c56:	73eb      	strb	r3, [r5, #15]
			break;
    1c58:	e7b6      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			utoa(temp_period_ms, (char*)temporary_buffer, 10);
    1c5a:	4c1a      	ldr	r4, [pc, #104]	; (1cc4 <i2c_process_cmd_chr+0x120>)
    1c5c:	3410      	adds	r4, #16
    1c5e:	4d15      	ldr	r5, [pc, #84]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1c60:	89a8      	ldrh	r0, [r5, #12]
    1c62:	220a      	movs	r2, #10
    1c64:	0021      	movs	r1, r4
    1c66:	4b1c      	ldr	r3, [pc, #112]	; (1cd8 <i2c_process_cmd_chr+0x134>)
    1c68:	4798      	blx	r3
			tx_buffer = (uint8_t *)temporary_buffer;
    1c6a:	4b15      	ldr	r3, [pc, #84]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1c6c:	601c      	str	r4, [r3, #0]
			tx_buffer_len = 4;
    1c6e:	2304      	movs	r3, #4
    1c70:	73eb      	strb	r3, [r5, #15]
			break;
    1c72:	e7a9      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			read_rdy[0] = 0;
    1c74:	4b13      	ldr	r3, [pc, #76]	; (1cc4 <i2c_process_cmd_chr+0x120>)
    1c76:	2200      	movs	r2, #0
    1c78:	731a      	strb	r2, [r3, #12]
			req_read = true;
    1c7a:	3201      	adds	r2, #1
    1c7c:	729a      	strb	r2, [r3, #10]
			break;
    1c7e:	e7a3      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			tx_buffer = (uint8_t *)read_rdy;
    1c80:	4b10      	ldr	r3, [pc, #64]	; (1cc4 <i2c_process_cmd_chr+0x120>)
    1c82:	330c      	adds	r3, #12
    1c84:	4a0e      	ldr	r2, [pc, #56]	; (1cc0 <i2c_process_cmd_chr+0x11c>)
    1c86:	6013      	str	r3, [r2, #0]
			tx_buffer_len = 1;
    1c88:	2201      	movs	r2, #1
    1c8a:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1c8c:	73da      	strb	r2, [r3, #15]
			break;
    1c8e:	e79b      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			max30205_enabled = false;
    1c90:	4b0c      	ldr	r3, [pc, #48]	; (1cc4 <i2c_process_cmd_chr+0x120>)
    1c92:	2200      	movs	r2, #0
    1c94:	705a      	strb	r2, [r3, #1]
			ad5933_enabled = false;
    1c96:	701a      	strb	r2, [r3, #0]
			imp_counter = 1;
    1c98:	4b06      	ldr	r3, [pc, #24]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1c9a:	3201      	adds	r2, #1
    1c9c:	805a      	strh	r2, [r3, #2]
			temp_counter = 1;		
    1c9e:	80da      	strh	r2, [r3, #6]
			break;
    1ca0:	e792      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
			max30205_enabled = true;
    1ca2:	4b08      	ldr	r3, [pc, #32]	; (1cc4 <i2c_process_cmd_chr+0x120>)
    1ca4:	2201      	movs	r2, #1
    1ca6:	705a      	strb	r2, [r3, #1]
			ad5933_enabled = true;
    1ca8:	701a      	strb	r2, [r3, #0]
				imp_counter = 5000;
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <i2c_process_cmd_chr+0x110>)
    1cac:	4a0b      	ldr	r2, [pc, #44]	; (1cdc <i2c_process_cmd_chr+0x138>)
    1cae:	805a      	strh	r2, [r3, #2]
				temp_counter = 5000;
    1cb0:	80da      	strh	r2, [r3, #6]
}
    1cb2:	e789      	b.n	1bc8 <i2c_process_cmd_chr+0x24>
    1cb4:	20000000 	.word	0x20000000
    1cb8:	000039b0 	.word	0x000039b0
    1cbc:	20000090 	.word	0x20000090
    1cc0:	20000094 	.word	0x20000094
    1cc4:	20000040 	.word	0x20000040
    1cc8:	20000098 	.word	0x20000098
    1ccc:	2000009a 	.word	0x2000009a
    1cd0:	2000009c 	.word	0x2000009c
    1cd4:	2000009e 	.word	0x2000009e
    1cd8:	00003895 	.word	0x00003895
    1cdc:	00001388 	.word	0x00001388

00001ce0 <SERCOM0_Handler>:
void I2C_SERCOM_IRQ_HANDLER(void) {
    1ce0:	b510      	push	{r4, lr}
	int flags = I2C_SERCOM->I2CS.INTFLAG.reg;
    1ce2:	2384      	movs	r3, #132	; 0x84
    1ce4:	05db      	lsls	r3, r3, #23
    1ce6:	7e1b      	ldrb	r3, [r3, #24]
    1ce8:	b2db      	uxtb	r3, r3
	if (flags & SERCOM_I2CS_INTFLAG_AMATCH)
    1cea:	079a      	lsls	r2, r3, #30
    1cec:	d50e      	bpl.n	1d0c <SERCOM0_Handler+0x2c>
		I2C_SERCOM->I2CS.CTRLB.bit.ACKACT = 0;
    1cee:	2284      	movs	r2, #132	; 0x84
    1cf0:	05d2      	lsls	r2, r2, #23
    1cf2:	6850      	ldr	r0, [r2, #4]
    1cf4:	496e      	ldr	r1, [pc, #440]	; (1eb0 <SERCOM0_Handler+0x1d0>)
    1cf6:	4001      	ands	r1, r0
    1cf8:	6051      	str	r1, [r2, #4]
		I2C_SERCOM->I2CS.CTRLB.bit.CMD = 0x3;
    1cfa:	6850      	ldr	r0, [r2, #4]
    1cfc:	21c0      	movs	r1, #192	; 0xc0
    1cfe:	0289      	lsls	r1, r1, #10
    1d00:	4301      	orrs	r1, r0
    1d02:	6051      	str	r1, [r2, #4]
		I2C_SERCOM->I2CS.INTFLAG.bit.AMATCH = 1; // clear amatch
    1d04:	7e11      	ldrb	r1, [r2, #24]
    1d06:	2002      	movs	r0, #2
    1d08:	4301      	orrs	r1, r0
    1d0a:	7611      	strb	r1, [r2, #24]
	if (flags & SERCOM_I2CS_INTFLAG_DRDY)
    1d0c:	075a      	lsls	r2, r3, #29
    1d0e:	d520      	bpl.n	1d52 <SERCOM0_Handler+0x72>
		if (I2C_SERCOM->I2CS.STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
    1d10:	2284      	movs	r2, #132	; 0x84
    1d12:	05d2      	lsls	r2, r2, #23
    1d14:	8b52      	ldrh	r2, [r2, #26]
    1d16:	0712      	lsls	r2, r2, #28
    1d18:	d559      	bpl.n	1dce <SERCOM0_Handler+0xee>
			if (i2c_idx == tx_buffer_len-1)	{
    1d1a:	4a66      	ldr	r2, [pc, #408]	; (1eb4 <SERCOM0_Handler+0x1d4>)
    1d1c:	7e12      	ldrb	r2, [r2, #24]
    1d1e:	4966      	ldr	r1, [pc, #408]	; (1eb8 <SERCOM0_Handler+0x1d8>)
    1d20:	7bc9      	ldrb	r1, [r1, #15]
    1d22:	3901      	subs	r1, #1
    1d24:	428a      	cmp	r2, r1
    1d26:	d040      	beq.n	1daa <SERCOM0_Handler+0xca>
				I2C_SERCOM->I2CS.DATA.reg = tx_buffer[i2c_idx++];
    1d28:	4964      	ldr	r1, [pc, #400]	; (1ebc <SERCOM0_Handler+0x1dc>)
    1d2a:	6809      	ldr	r1, [r1, #0]
    1d2c:	1c54      	adds	r4, r2, #1
    1d2e:	4861      	ldr	r0, [pc, #388]	; (1eb4 <SERCOM0_Handler+0x1d4>)
    1d30:	7604      	strb	r4, [r0, #24]
    1d32:	5c88      	ldrb	r0, [r1, r2]
    1d34:	2184      	movs	r1, #132	; 0x84
    1d36:	05c9      	lsls	r1, r1, #23
    1d38:	2228      	movs	r2, #40	; 0x28
    1d3a:	5488      	strb	r0, [r1, r2]
				I2C_SERCOM->I2CS.CTRLB.bit.CMD = 0x3;
    1d3c:	6848      	ldr	r0, [r1, #4]
    1d3e:	22c0      	movs	r2, #192	; 0xc0
    1d40:	0292      	lsls	r2, r2, #10
    1d42:	4302      	orrs	r2, r0
    1d44:	604a      	str	r2, [r1, #4]
		I2C_SERCOM->I2CS.INTFLAG.bit.DRDY = 1;
    1d46:	2184      	movs	r1, #132	; 0x84
    1d48:	05c9      	lsls	r1, r1, #23
    1d4a:	7e0a      	ldrb	r2, [r1, #24]
    1d4c:	2004      	movs	r0, #4
    1d4e:	4302      	orrs	r2, r0
    1d50:	760a      	strb	r2, [r1, #24]
	if (flags & SERCOM_I2CS_INTFLAG_PREC)
    1d52:	07db      	lsls	r3, r3, #31
    1d54:	d400      	bmi.n	1d58 <SERCOM0_Handler+0x78>
    1d56:	e0aa      	b.n	1eae <SERCOM0_Handler+0x1ce>
		I2C_SERCOM->I2CS.INTFLAG.bit.PREC = 1;
    1d58:	2384      	movs	r3, #132	; 0x84
    1d5a:	05db      	lsls	r3, r3, #23
    1d5c:	7e1a      	ldrb	r2, [r3, #24]
    1d5e:	2101      	movs	r1, #1
    1d60:	430a      	orrs	r2, r1
    1d62:	761a      	strb	r2, [r3, #24]
		if (!I2C_SERCOM->I2CS.STATUS.bit.DIR) {
    1d64:	8b5b      	ldrh	r3, [r3, #26]
    1d66:	071b      	lsls	r3, r3, #28
    1d68:	d500      	bpl.n	1d6c <SERCOM0_Handler+0x8c>
    1d6a:	e09a      	b.n	1ea2 <SERCOM0_Handler+0x1c2>
			rx_buffer[i2c_idx++] = I2C_SERCOM->I2CS.DATA.reg;
    1d6c:	4b51      	ldr	r3, [pc, #324]	; (1eb4 <SERCOM0_Handler+0x1d4>)
    1d6e:	7e1a      	ldrb	r2, [r3, #24]
    1d70:	1c51      	adds	r1, r2, #1
    1d72:	7619      	strb	r1, [r3, #24]
    1d74:	2128      	movs	r1, #40	; 0x28
    1d76:	2084      	movs	r0, #132	; 0x84
    1d78:	05c0      	lsls	r0, r0, #23
    1d7a:	5c41      	ldrb	r1, [r0, r1]
    1d7c:	189b      	adds	r3, r3, r2
    1d7e:	7719      	strb	r1, [r3, #28]
			if (cmd_chr == 255) {
    1d80:	4b4d      	ldr	r3, [pc, #308]	; (1eb8 <SERCOM0_Handler+0x1d8>)
    1d82:	7b9b      	ldrb	r3, [r3, #14]
    1d84:	2bff      	cmp	r3, #255	; 0xff
    1d86:	d047      	beq.n	1e18 <SERCOM0_Handler+0x138>
				uint16_t v = rx_buffer[1] << 8 | rx_buffer[0];
    1d88:	484a      	ldr	r0, [pc, #296]	; (1eb4 <SERCOM0_Handler+0x1d4>)
    1d8a:	7f41      	ldrb	r1, [r0, #29]
    1d8c:	0209      	lsls	r1, r1, #8
    1d8e:	7f02      	ldrb	r2, [r0, #28]
    1d90:	430a      	orrs	r2, r1
				if (v > 9999) v = 9999;
    1d92:	494b      	ldr	r1, [pc, #300]	; (1ec0 <SERCOM0_Handler+0x1e0>)
    1d94:	428a      	cmp	r2, r1
    1d96:	d900      	bls.n	1d9a <SERCOM0_Handler+0xba>
    1d98:	000a      	movs	r2, r1
				switch (cmd_chr) {
    1d9a:	3b07      	subs	r3, #7
    1d9c:	b2d9      	uxtb	r1, r3
    1d9e:	2909      	cmp	r1, #9
    1da0:	d843      	bhi.n	1e2a <SERCOM0_Handler+0x14a>
    1da2:	008b      	lsls	r3, r1, #2
    1da4:	4947      	ldr	r1, [pc, #284]	; (1ec4 <SERCOM0_Handler+0x1e4>)
    1da6:	58cb      	ldr	r3, [r1, r3]
    1da8:	469f      	mov	pc, r3
				I2C_SERCOM->I2CS.DATA.reg = tx_buffer[i2c_idx++];
    1daa:	4944      	ldr	r1, [pc, #272]	; (1ebc <SERCOM0_Handler+0x1dc>)
    1dac:	6809      	ldr	r1, [r1, #0]
    1dae:	1c54      	adds	r4, r2, #1
    1db0:	4840      	ldr	r0, [pc, #256]	; (1eb4 <SERCOM0_Handler+0x1d4>)
    1db2:	7604      	strb	r4, [r0, #24]
    1db4:	5c89      	ldrb	r1, [r1, r2]
    1db6:	2084      	movs	r0, #132	; 0x84
    1db8:	05c0      	lsls	r0, r0, #23
    1dba:	2228      	movs	r2, #40	; 0x28
    1dbc:	5481      	strb	r1, [r0, r2]
				I2C_SERCOM->I2CS.CTRLB.bit.CMD = 0x2;
    1dbe:	6841      	ldr	r1, [r0, #4]
    1dc0:	4a41      	ldr	r2, [pc, #260]	; (1ec8 <SERCOM0_Handler+0x1e8>)
    1dc2:	4011      	ands	r1, r2
    1dc4:	2280      	movs	r2, #128	; 0x80
    1dc6:	0292      	lsls	r2, r2, #10
    1dc8:	430a      	orrs	r2, r1
    1dca:	6042      	str	r2, [r0, #4]
    1dcc:	e7bb      	b.n	1d46 <SERCOM0_Handler+0x66>
			if (i2c_idx == RX_BUFFER_LEN-1) {
    1dce:	4a39      	ldr	r2, [pc, #228]	; (1eb4 <SERCOM0_Handler+0x1d4>)
    1dd0:	7e10      	ldrb	r0, [r2, #24]
    1dd2:	2801      	cmp	r0, #1
    1dd4:	d012      	beq.n	1dfc <SERCOM0_Handler+0x11c>
				rx_buffer[i2c_idx++] = I2C_SERCOM->I2CS.DATA.reg;
    1dd6:	4937      	ldr	r1, [pc, #220]	; (1eb4 <SERCOM0_Handler+0x1d4>)
    1dd8:	1c42      	adds	r2, r0, #1
    1dda:	760a      	strb	r2, [r1, #24]
    1ddc:	2284      	movs	r2, #132	; 0x84
    1dde:	05d2      	lsls	r2, r2, #23
    1de0:	2428      	movs	r4, #40	; 0x28
    1de2:	5d14      	ldrb	r4, [r2, r4]
    1de4:	1809      	adds	r1, r1, r0
    1de6:	770c      	strb	r4, [r1, #28]
				I2C_SERCOM->I2CS.CTRLB.bit.ACKACT = 0;
    1de8:	6850      	ldr	r0, [r2, #4]
    1dea:	4931      	ldr	r1, [pc, #196]	; (1eb0 <SERCOM0_Handler+0x1d0>)
    1dec:	4001      	ands	r1, r0
    1dee:	6051      	str	r1, [r2, #4]
				I2C_SERCOM->I2CS.CTRLB.bit.CMD = 0x3;
    1df0:	6850      	ldr	r0, [r2, #4]
    1df2:	21c0      	movs	r1, #192	; 0xc0
    1df4:	0289      	lsls	r1, r1, #10
    1df6:	4301      	orrs	r1, r0
    1df8:	6051      	str	r1, [r2, #4]
    1dfa:	e7a4      	b.n	1d46 <SERCOM0_Handler+0x66>
				I2C_SERCOM->I2CS.CTRLB.bit.ACKACT = 0;
    1dfc:	2284      	movs	r2, #132	; 0x84
    1dfe:	05d2      	lsls	r2, r2, #23
    1e00:	6850      	ldr	r0, [r2, #4]
    1e02:	492b      	ldr	r1, [pc, #172]	; (1eb0 <SERCOM0_Handler+0x1d0>)
    1e04:	4001      	ands	r1, r0
    1e06:	6051      	str	r1, [r2, #4]
				I2C_SERCOM->I2CS.CTRLB.bit.CMD = 0x2;
    1e08:	6850      	ldr	r0, [r2, #4]
    1e0a:	492f      	ldr	r1, [pc, #188]	; (1ec8 <SERCOM0_Handler+0x1e8>)
    1e0c:	4008      	ands	r0, r1
    1e0e:	2180      	movs	r1, #128	; 0x80
    1e10:	0289      	lsls	r1, r1, #10
    1e12:	4301      	orrs	r1, r0
    1e14:	6051      	str	r1, [r2, #4]
    1e16:	e796      	b.n	1d46 <SERCOM0_Handler+0x66>
				cmd_chr = rx_buffer[0];
    1e18:	4b26      	ldr	r3, [pc, #152]	; (1eb4 <SERCOM0_Handler+0x1d4>)
    1e1a:	7f1a      	ldrb	r2, [r3, #28]
    1e1c:	4b26      	ldr	r3, [pc, #152]	; (1eb8 <SERCOM0_Handler+0x1d8>)
    1e1e:	739a      	strb	r2, [r3, #14]
				i2c_process_cmd_chr();
    1e20:	4b2a      	ldr	r3, [pc, #168]	; (1ecc <SERCOM0_Handler+0x1ec>)
    1e22:	4798      	blx	r3
    1e24:	e040      	b.n	1ea8 <SERCOM0_Handler+0x1c8>
						emg_period_us = v;
    1e26:	4b24      	ldr	r3, [pc, #144]	; (1eb8 <SERCOM0_Handler+0x1d8>)
    1e28:	821a      	strh	r2, [r3, #16]
				cmd_chr = 255; //reset command so we expect the new one
    1e2a:	22ff      	movs	r2, #255	; 0xff
    1e2c:	4b22      	ldr	r3, [pc, #136]	; (1eb8 <SERCOM0_Handler+0x1d8>)
    1e2e:	739a      	strb	r2, [r3, #14]
    1e30:	e03a      	b.n	1ea8 <SERCOM0_Handler+0x1c8>
						imp_period_ms = v;
    1e32:	4b21      	ldr	r3, [pc, #132]	; (1eb8 <SERCOM0_Handler+0x1d8>)
    1e34:	815a      	strh	r2, [r3, #10]
						break;
    1e36:	e7f8      	b.n	1e2a <SERCOM0_Handler+0x14a>
						temp_period_ms = v;
    1e38:	4b1f      	ldr	r3, [pc, #124]	; (1eb8 <SERCOM0_Handler+0x1d8>)
    1e3a:	819a      	strh	r2, [r3, #12]
						break;
    1e3c:	e7f5      	b.n	1e2a <SERCOM0_Handler+0x14a>
						if (v==1) {
    1e3e:	2a01      	cmp	r2, #1
    1e40:	d009      	beq.n	1e56 <SERCOM0_Handler+0x176>
						} else if (v==2) {
    1e42:	2a02      	cmp	r2, #2
    1e44:	d00b      	beq.n	1e5e <SERCOM0_Handler+0x17e>
						} else if (v==3) {
    1e46:	2a03      	cmp	r2, #3
    1e48:	d00d      	beq.n	1e66 <SERCOM0_Handler+0x186>
						} else if (v==4) {
    1e4a:	2a04      	cmp	r2, #4
    1e4c:	d1ed      	bne.n	1e2a <SERCOM0_Handler+0x14a>
							AD_set_range(CTRL_OUTPUT_RANGE_4);
    1e4e:	2002      	movs	r0, #2
    1e50:	4b1f      	ldr	r3, [pc, #124]	; (1ed0 <SERCOM0_Handler+0x1f0>)
    1e52:	4798      	blx	r3
    1e54:	e7e9      	b.n	1e2a <SERCOM0_Handler+0x14a>
							AD_set_range(CTRL_OUTPUT_RANGE_1);
    1e56:	2000      	movs	r0, #0
    1e58:	4b1d      	ldr	r3, [pc, #116]	; (1ed0 <SERCOM0_Handler+0x1f0>)
    1e5a:	4798      	blx	r3
    1e5c:	e7e5      	b.n	1e2a <SERCOM0_Handler+0x14a>
							AD_set_range(CTRL_OUTPUT_RANGE_2);
    1e5e:	2006      	movs	r0, #6
    1e60:	4b1b      	ldr	r3, [pc, #108]	; (1ed0 <SERCOM0_Handler+0x1f0>)
    1e62:	4798      	blx	r3
    1e64:	e7e1      	b.n	1e2a <SERCOM0_Handler+0x14a>
							AD_set_range(CTRL_OUTPUT_RANGE_3);
    1e66:	2004      	movs	r0, #4
    1e68:	4b19      	ldr	r3, [pc, #100]	; (1ed0 <SERCOM0_Handler+0x1f0>)
    1e6a:	4798      	blx	r3
    1e6c:	e7dd      	b.n	1e2a <SERCOM0_Handler+0x14a>
						if (v==1) {
    1e6e:	2a01      	cmp	r2, #1
    1e70:	d005      	beq.n	1e7e <SERCOM0_Handler+0x19e>
						} else if (v==5) {
    1e72:	2a05      	cmp	r2, #5
    1e74:	d1d9      	bne.n	1e2a <SERCOM0_Handler+0x14a>
							AD_set_PGA_gain(CTRL_PGA_GAIN_X5);
    1e76:	2000      	movs	r0, #0
    1e78:	4b16      	ldr	r3, [pc, #88]	; (1ed4 <SERCOM0_Handler+0x1f4>)
    1e7a:	4798      	blx	r3
    1e7c:	e7d5      	b.n	1e2a <SERCOM0_Handler+0x14a>
							AD_set_PGA_gain(CTRL_PGA_GAIN_X1);
    1e7e:	2001      	movs	r0, #1
    1e80:	4b14      	ldr	r3, [pc, #80]	; (1ed4 <SERCOM0_Handler+0x1f4>)
    1e82:	4798      	blx	r3
    1e84:	e7d1      	b.n	1e2a <SERCOM0_Handler+0x14a>
						if (v==0) {
    1e86:	2a00      	cmp	r2, #0
    1e88:	d105      	bne.n	1e96 <SERCOM0_Handler+0x1b6>
    1e8a:	2280      	movs	r2, #128	; 0x80
    1e8c:	0452      	lsls	r2, r2, #17
    1e8e:	23c0      	movs	r3, #192	; 0xc0
    1e90:	05db      	lsls	r3, r3, #23
    1e92:	615a      	str	r2, [r3, #20]
    1e94:	e7c9      	b.n	1e2a <SERCOM0_Handler+0x14a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e96:	2280      	movs	r2, #128	; 0x80
    1e98:	0452      	lsls	r2, r2, #17
    1e9a:	23c0      	movs	r3, #192	; 0xc0
    1e9c:	05db      	lsls	r3, r3, #23
    1e9e:	619a      	str	r2, [r3, #24]
    1ea0:	e7c3      	b.n	1e2a <SERCOM0_Handler+0x14a>
			cmd_chr = 255;
    1ea2:	22ff      	movs	r2, #255	; 0xff
    1ea4:	4b04      	ldr	r3, [pc, #16]	; (1eb8 <SERCOM0_Handler+0x1d8>)
    1ea6:	739a      	strb	r2, [r3, #14]
		i2c_idx = 0;
    1ea8:	2200      	movs	r2, #0
    1eaa:	4b02      	ldr	r3, [pc, #8]	; (1eb4 <SERCOM0_Handler+0x1d4>)
    1eac:	761a      	strb	r2, [r3, #24]
}
    1eae:	bd10      	pop	{r4, pc}
    1eb0:	fffbffff 	.word	0xfffbffff
    1eb4:	20000040 	.word	0x20000040
    1eb8:	20000000 	.word	0x20000000
    1ebc:	20000094 	.word	0x20000094
    1ec0:	0000270f 	.word	0x0000270f
    1ec4:	000039e8 	.word	0x000039e8
    1ec8:	fffcffff 	.word	0xfffcffff
    1ecc:	00001ba5 	.word	0x00001ba5
    1ed0:	000004d5 	.word	0x000004d5
    1ed4:	00000481 	.word	0x00000481

00001ed8 <MAX_scan>:
#include "MAX30205.h"

uint8_t MAX_scan(void) {
    1ed8:	b510      	push	{r4, lr}
    1eda:	b082      	sub	sp, #8
	i2c_m_sync_set_slaveaddr(&I2C_MST, MAX30205_ADDR, I2C_M_SEVEN);
    1edc:	4c0e      	ldr	r4, [pc, #56]	; (1f18 <MAX_scan+0x40>)
    1ede:	2280      	movs	r2, #128	; 0x80
    1ee0:	0112      	lsls	r2, r2, #4
    1ee2:	2148      	movs	r1, #72	; 0x48
    1ee4:	0020      	movs	r0, r4
    1ee6:	4b0d      	ldr	r3, [pc, #52]	; (1f1c <MAX_scan+0x44>)
    1ee8:	4798      	blx	r3
	uint8_t reg_buf[2];
	uint8_t ret = i2c_m_sync_cmd_read(&I2C_MST, MAX30205_HYST, reg_buf, MAX30205_REG_LEN);
    1eea:	2302      	movs	r3, #2
    1eec:	aa01      	add	r2, sp, #4
    1eee:	2102      	movs	r1, #2
    1ef0:	0020      	movs	r0, r4
    1ef2:	4c0b      	ldr	r4, [pc, #44]	; (1f20 <MAX_scan+0x48>)
    1ef4:	47a0      	blx	r4
    1ef6:	b2c0      	uxtb	r0, r0
	if (ret==0) {
    1ef8:	2800      	cmp	r0, #0
    1efa:	d10a      	bne.n	1f12 <MAX_scan+0x3a>
		if((reg_buf[0] << 8 | reg_buf[1])==0x4B00) {
    1efc:	aa01      	add	r2, sp, #4
    1efe:	7813      	ldrb	r3, [r2, #0]
    1f00:	021b      	lsls	r3, r3, #8
    1f02:	7852      	ldrb	r2, [r2, #1]
    1f04:	4313      	orrs	r3, r2
    1f06:	2296      	movs	r2, #150	; 0x96
    1f08:	01d2      	lsls	r2, r2, #7
    1f0a:	4293      	cmp	r3, r2
    1f0c:	d002      	beq.n	1f14 <MAX_scan+0x3c>
			return 0;
		}
	}
	return 1;
    1f0e:	3001      	adds	r0, #1
    1f10:	e000      	b.n	1f14 <MAX_scan+0x3c>
    1f12:	2001      	movs	r0, #1
}
    1f14:	b002      	add	sp, #8
    1f16:	bd10      	pop	{r4, pc}
    1f18:	20000070 	.word	0x20000070
    1f1c:	00000b01 	.word	0x00000b01
    1f20:	00000b5d 	.word	0x00000b5d

00001f24 <MAX_begin>:

uint8_t MAX_begin(void) {
    1f24:	b530      	push	{r4, r5, lr}
    1f26:	b083      	sub	sp, #12
	uint8_t reg_buf[2] = {0x0, 0x0};
    1f28:	ac01      	add	r4, sp, #4
    1f2a:	2300      	movs	r3, #0
    1f2c:	7023      	strb	r3, [r4, #0]
    1f2e:	7063      	strb	r3, [r4, #1]
	i2c_m_sync_set_slaveaddr(&I2C_MST, MAX30205_ADDR, I2C_M_SEVEN);
    1f30:	4d07      	ldr	r5, [pc, #28]	; (1f50 <MAX_begin+0x2c>)
    1f32:	2280      	movs	r2, #128	; 0x80
    1f34:	0112      	lsls	r2, r2, #4
    1f36:	2148      	movs	r1, #72	; 0x48
    1f38:	0028      	movs	r0, r5
    1f3a:	4b06      	ldr	r3, [pc, #24]	; (1f54 <MAX_begin+0x30>)
    1f3c:	4798      	blx	r3
	return i2c_m_sync_cmd_write(&I2C_MST, MAX30205_CONF, reg_buf, MAX30205_REG_LEN);
    1f3e:	2302      	movs	r3, #2
    1f40:	0022      	movs	r2, r4
    1f42:	2101      	movs	r1, #1
    1f44:	0028      	movs	r0, r5
    1f46:	4c04      	ldr	r4, [pc, #16]	; (1f58 <MAX_begin+0x34>)
    1f48:	47a0      	blx	r4
    1f4a:	b2c0      	uxtb	r0, r0
}
    1f4c:	b003      	add	sp, #12
    1f4e:	bd30      	pop	{r4, r5, pc}
    1f50:	20000070 	.word	0x20000070
    1f54:	00000b01 	.word	0x00000b01
    1f58:	00000b15 	.word	0x00000b15

00001f5c <MAX_get_temperature>:

uint8_t MAX_get_temperature(uint8_t *buf) {
    1f5c:	b570      	push	{r4, r5, r6, lr}
    1f5e:	0005      	movs	r5, r0
	i2c_m_sync_set_slaveaddr(&I2C_MST, MAX30205_ADDR, I2C_M_SEVEN);
    1f60:	4c07      	ldr	r4, [pc, #28]	; (1f80 <MAX_get_temperature+0x24>)
    1f62:	2280      	movs	r2, #128	; 0x80
    1f64:	0112      	lsls	r2, r2, #4
    1f66:	2148      	movs	r1, #72	; 0x48
    1f68:	0020      	movs	r0, r4
    1f6a:	4b06      	ldr	r3, [pc, #24]	; (1f84 <MAX_get_temperature+0x28>)
    1f6c:	4798      	blx	r3
	return i2c_m_sync_cmd_read(&I2C_MST, MAX30205_TEMP, buf, MAX30205_REG_LEN);
    1f6e:	2302      	movs	r3, #2
    1f70:	002a      	movs	r2, r5
    1f72:	2100      	movs	r1, #0
    1f74:	0020      	movs	r0, r4
    1f76:	4c04      	ldr	r4, [pc, #16]	; (1f88 <MAX_get_temperature+0x2c>)
    1f78:	47a0      	blx	r4
    1f7a:	b2c0      	uxtb	r0, r0
    1f7c:	bd70      	pop	{r4, r5, r6, pc}
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	20000070 	.word	0x20000070
    1f84:	00000b01 	.word	0x00000b01
    1f88:	00000b5d 	.word	0x00000b5d

00001f8c <__udivsi3>:
    1f8c:	2200      	movs	r2, #0
    1f8e:	0843      	lsrs	r3, r0, #1
    1f90:	428b      	cmp	r3, r1
    1f92:	d374      	bcc.n	207e <STACK_SIZE+0x7e>
    1f94:	0903      	lsrs	r3, r0, #4
    1f96:	428b      	cmp	r3, r1
    1f98:	d35f      	bcc.n	205a <STACK_SIZE+0x5a>
    1f9a:	0a03      	lsrs	r3, r0, #8
    1f9c:	428b      	cmp	r3, r1
    1f9e:	d344      	bcc.n	202a <STACK_SIZE+0x2a>
    1fa0:	0b03      	lsrs	r3, r0, #12
    1fa2:	428b      	cmp	r3, r1
    1fa4:	d328      	bcc.n	1ff8 <__udivsi3+0x6c>
    1fa6:	0c03      	lsrs	r3, r0, #16
    1fa8:	428b      	cmp	r3, r1
    1faa:	d30d      	bcc.n	1fc8 <__udivsi3+0x3c>
    1fac:	22ff      	movs	r2, #255	; 0xff
    1fae:	0209      	lsls	r1, r1, #8
    1fb0:	ba12      	rev	r2, r2
    1fb2:	0c03      	lsrs	r3, r0, #16
    1fb4:	428b      	cmp	r3, r1
    1fb6:	d302      	bcc.n	1fbe <__udivsi3+0x32>
    1fb8:	1212      	asrs	r2, r2, #8
    1fba:	0209      	lsls	r1, r1, #8
    1fbc:	d065      	beq.n	208a <STACK_SIZE+0x8a>
    1fbe:	0b03      	lsrs	r3, r0, #12
    1fc0:	428b      	cmp	r3, r1
    1fc2:	d319      	bcc.n	1ff8 <__udivsi3+0x6c>
    1fc4:	e000      	b.n	1fc8 <__udivsi3+0x3c>
    1fc6:	0a09      	lsrs	r1, r1, #8
    1fc8:	0bc3      	lsrs	r3, r0, #15
    1fca:	428b      	cmp	r3, r1
    1fcc:	d301      	bcc.n	1fd2 <__udivsi3+0x46>
    1fce:	03cb      	lsls	r3, r1, #15
    1fd0:	1ac0      	subs	r0, r0, r3
    1fd2:	4152      	adcs	r2, r2
    1fd4:	0b83      	lsrs	r3, r0, #14
    1fd6:	428b      	cmp	r3, r1
    1fd8:	d301      	bcc.n	1fde <__udivsi3+0x52>
    1fda:	038b      	lsls	r3, r1, #14
    1fdc:	1ac0      	subs	r0, r0, r3
    1fde:	4152      	adcs	r2, r2
    1fe0:	0b43      	lsrs	r3, r0, #13
    1fe2:	428b      	cmp	r3, r1
    1fe4:	d301      	bcc.n	1fea <__udivsi3+0x5e>
    1fe6:	034b      	lsls	r3, r1, #13
    1fe8:	1ac0      	subs	r0, r0, r3
    1fea:	4152      	adcs	r2, r2
    1fec:	0b03      	lsrs	r3, r0, #12
    1fee:	428b      	cmp	r3, r1
    1ff0:	d301      	bcc.n	1ff6 <__udivsi3+0x6a>
    1ff2:	030b      	lsls	r3, r1, #12
    1ff4:	1ac0      	subs	r0, r0, r3
    1ff6:	4152      	adcs	r2, r2
    1ff8:	0ac3      	lsrs	r3, r0, #11
    1ffa:	428b      	cmp	r3, r1
    1ffc:	d301      	bcc.n	2002 <STACK_SIZE+0x2>
    1ffe:	02cb      	lsls	r3, r1, #11
    2000:	1ac0      	subs	r0, r0, r3
    2002:	4152      	adcs	r2, r2
    2004:	0a83      	lsrs	r3, r0, #10
    2006:	428b      	cmp	r3, r1
    2008:	d301      	bcc.n	200e <STACK_SIZE+0xe>
    200a:	028b      	lsls	r3, r1, #10
    200c:	1ac0      	subs	r0, r0, r3
    200e:	4152      	adcs	r2, r2
    2010:	0a43      	lsrs	r3, r0, #9
    2012:	428b      	cmp	r3, r1
    2014:	d301      	bcc.n	201a <STACK_SIZE+0x1a>
    2016:	024b      	lsls	r3, r1, #9
    2018:	1ac0      	subs	r0, r0, r3
    201a:	4152      	adcs	r2, r2
    201c:	0a03      	lsrs	r3, r0, #8
    201e:	428b      	cmp	r3, r1
    2020:	d301      	bcc.n	2026 <STACK_SIZE+0x26>
    2022:	020b      	lsls	r3, r1, #8
    2024:	1ac0      	subs	r0, r0, r3
    2026:	4152      	adcs	r2, r2
    2028:	d2cd      	bcs.n	1fc6 <__udivsi3+0x3a>
    202a:	09c3      	lsrs	r3, r0, #7
    202c:	428b      	cmp	r3, r1
    202e:	d301      	bcc.n	2034 <STACK_SIZE+0x34>
    2030:	01cb      	lsls	r3, r1, #7
    2032:	1ac0      	subs	r0, r0, r3
    2034:	4152      	adcs	r2, r2
    2036:	0983      	lsrs	r3, r0, #6
    2038:	428b      	cmp	r3, r1
    203a:	d301      	bcc.n	2040 <STACK_SIZE+0x40>
    203c:	018b      	lsls	r3, r1, #6
    203e:	1ac0      	subs	r0, r0, r3
    2040:	4152      	adcs	r2, r2
    2042:	0943      	lsrs	r3, r0, #5
    2044:	428b      	cmp	r3, r1
    2046:	d301      	bcc.n	204c <STACK_SIZE+0x4c>
    2048:	014b      	lsls	r3, r1, #5
    204a:	1ac0      	subs	r0, r0, r3
    204c:	4152      	adcs	r2, r2
    204e:	0903      	lsrs	r3, r0, #4
    2050:	428b      	cmp	r3, r1
    2052:	d301      	bcc.n	2058 <STACK_SIZE+0x58>
    2054:	010b      	lsls	r3, r1, #4
    2056:	1ac0      	subs	r0, r0, r3
    2058:	4152      	adcs	r2, r2
    205a:	08c3      	lsrs	r3, r0, #3
    205c:	428b      	cmp	r3, r1
    205e:	d301      	bcc.n	2064 <STACK_SIZE+0x64>
    2060:	00cb      	lsls	r3, r1, #3
    2062:	1ac0      	subs	r0, r0, r3
    2064:	4152      	adcs	r2, r2
    2066:	0883      	lsrs	r3, r0, #2
    2068:	428b      	cmp	r3, r1
    206a:	d301      	bcc.n	2070 <STACK_SIZE+0x70>
    206c:	008b      	lsls	r3, r1, #2
    206e:	1ac0      	subs	r0, r0, r3
    2070:	4152      	adcs	r2, r2
    2072:	0843      	lsrs	r3, r0, #1
    2074:	428b      	cmp	r3, r1
    2076:	d301      	bcc.n	207c <STACK_SIZE+0x7c>
    2078:	004b      	lsls	r3, r1, #1
    207a:	1ac0      	subs	r0, r0, r3
    207c:	4152      	adcs	r2, r2
    207e:	1a41      	subs	r1, r0, r1
    2080:	d200      	bcs.n	2084 <STACK_SIZE+0x84>
    2082:	4601      	mov	r1, r0
    2084:	4152      	adcs	r2, r2
    2086:	4610      	mov	r0, r2
    2088:	4770      	bx	lr
    208a:	e7ff      	b.n	208c <STACK_SIZE+0x8c>
    208c:	b501      	push	{r0, lr}
    208e:	2000      	movs	r0, #0
    2090:	f000 f8f0 	bl	2274 <__aeabi_idiv0>
    2094:	bd02      	pop	{r1, pc}
    2096:	46c0      	nop			; (mov r8, r8)

00002098 <__aeabi_uidivmod>:
    2098:	2900      	cmp	r1, #0
    209a:	d0f7      	beq.n	208c <STACK_SIZE+0x8c>
    209c:	e776      	b.n	1f8c <__udivsi3>
    209e:	4770      	bx	lr

000020a0 <__divsi3>:
    20a0:	4603      	mov	r3, r0
    20a2:	430b      	orrs	r3, r1
    20a4:	d47f      	bmi.n	21a6 <__divsi3+0x106>
    20a6:	2200      	movs	r2, #0
    20a8:	0843      	lsrs	r3, r0, #1
    20aa:	428b      	cmp	r3, r1
    20ac:	d374      	bcc.n	2198 <__divsi3+0xf8>
    20ae:	0903      	lsrs	r3, r0, #4
    20b0:	428b      	cmp	r3, r1
    20b2:	d35f      	bcc.n	2174 <__divsi3+0xd4>
    20b4:	0a03      	lsrs	r3, r0, #8
    20b6:	428b      	cmp	r3, r1
    20b8:	d344      	bcc.n	2144 <__divsi3+0xa4>
    20ba:	0b03      	lsrs	r3, r0, #12
    20bc:	428b      	cmp	r3, r1
    20be:	d328      	bcc.n	2112 <__divsi3+0x72>
    20c0:	0c03      	lsrs	r3, r0, #16
    20c2:	428b      	cmp	r3, r1
    20c4:	d30d      	bcc.n	20e2 <__divsi3+0x42>
    20c6:	22ff      	movs	r2, #255	; 0xff
    20c8:	0209      	lsls	r1, r1, #8
    20ca:	ba12      	rev	r2, r2
    20cc:	0c03      	lsrs	r3, r0, #16
    20ce:	428b      	cmp	r3, r1
    20d0:	d302      	bcc.n	20d8 <__divsi3+0x38>
    20d2:	1212      	asrs	r2, r2, #8
    20d4:	0209      	lsls	r1, r1, #8
    20d6:	d065      	beq.n	21a4 <__divsi3+0x104>
    20d8:	0b03      	lsrs	r3, r0, #12
    20da:	428b      	cmp	r3, r1
    20dc:	d319      	bcc.n	2112 <__divsi3+0x72>
    20de:	e000      	b.n	20e2 <__divsi3+0x42>
    20e0:	0a09      	lsrs	r1, r1, #8
    20e2:	0bc3      	lsrs	r3, r0, #15
    20e4:	428b      	cmp	r3, r1
    20e6:	d301      	bcc.n	20ec <__divsi3+0x4c>
    20e8:	03cb      	lsls	r3, r1, #15
    20ea:	1ac0      	subs	r0, r0, r3
    20ec:	4152      	adcs	r2, r2
    20ee:	0b83      	lsrs	r3, r0, #14
    20f0:	428b      	cmp	r3, r1
    20f2:	d301      	bcc.n	20f8 <__divsi3+0x58>
    20f4:	038b      	lsls	r3, r1, #14
    20f6:	1ac0      	subs	r0, r0, r3
    20f8:	4152      	adcs	r2, r2
    20fa:	0b43      	lsrs	r3, r0, #13
    20fc:	428b      	cmp	r3, r1
    20fe:	d301      	bcc.n	2104 <__divsi3+0x64>
    2100:	034b      	lsls	r3, r1, #13
    2102:	1ac0      	subs	r0, r0, r3
    2104:	4152      	adcs	r2, r2
    2106:	0b03      	lsrs	r3, r0, #12
    2108:	428b      	cmp	r3, r1
    210a:	d301      	bcc.n	2110 <__divsi3+0x70>
    210c:	030b      	lsls	r3, r1, #12
    210e:	1ac0      	subs	r0, r0, r3
    2110:	4152      	adcs	r2, r2
    2112:	0ac3      	lsrs	r3, r0, #11
    2114:	428b      	cmp	r3, r1
    2116:	d301      	bcc.n	211c <__divsi3+0x7c>
    2118:	02cb      	lsls	r3, r1, #11
    211a:	1ac0      	subs	r0, r0, r3
    211c:	4152      	adcs	r2, r2
    211e:	0a83      	lsrs	r3, r0, #10
    2120:	428b      	cmp	r3, r1
    2122:	d301      	bcc.n	2128 <__divsi3+0x88>
    2124:	028b      	lsls	r3, r1, #10
    2126:	1ac0      	subs	r0, r0, r3
    2128:	4152      	adcs	r2, r2
    212a:	0a43      	lsrs	r3, r0, #9
    212c:	428b      	cmp	r3, r1
    212e:	d301      	bcc.n	2134 <__divsi3+0x94>
    2130:	024b      	lsls	r3, r1, #9
    2132:	1ac0      	subs	r0, r0, r3
    2134:	4152      	adcs	r2, r2
    2136:	0a03      	lsrs	r3, r0, #8
    2138:	428b      	cmp	r3, r1
    213a:	d301      	bcc.n	2140 <__divsi3+0xa0>
    213c:	020b      	lsls	r3, r1, #8
    213e:	1ac0      	subs	r0, r0, r3
    2140:	4152      	adcs	r2, r2
    2142:	d2cd      	bcs.n	20e0 <__divsi3+0x40>
    2144:	09c3      	lsrs	r3, r0, #7
    2146:	428b      	cmp	r3, r1
    2148:	d301      	bcc.n	214e <__divsi3+0xae>
    214a:	01cb      	lsls	r3, r1, #7
    214c:	1ac0      	subs	r0, r0, r3
    214e:	4152      	adcs	r2, r2
    2150:	0983      	lsrs	r3, r0, #6
    2152:	428b      	cmp	r3, r1
    2154:	d301      	bcc.n	215a <__divsi3+0xba>
    2156:	018b      	lsls	r3, r1, #6
    2158:	1ac0      	subs	r0, r0, r3
    215a:	4152      	adcs	r2, r2
    215c:	0943      	lsrs	r3, r0, #5
    215e:	428b      	cmp	r3, r1
    2160:	d301      	bcc.n	2166 <__divsi3+0xc6>
    2162:	014b      	lsls	r3, r1, #5
    2164:	1ac0      	subs	r0, r0, r3
    2166:	4152      	adcs	r2, r2
    2168:	0903      	lsrs	r3, r0, #4
    216a:	428b      	cmp	r3, r1
    216c:	d301      	bcc.n	2172 <__divsi3+0xd2>
    216e:	010b      	lsls	r3, r1, #4
    2170:	1ac0      	subs	r0, r0, r3
    2172:	4152      	adcs	r2, r2
    2174:	08c3      	lsrs	r3, r0, #3
    2176:	428b      	cmp	r3, r1
    2178:	d301      	bcc.n	217e <__divsi3+0xde>
    217a:	00cb      	lsls	r3, r1, #3
    217c:	1ac0      	subs	r0, r0, r3
    217e:	4152      	adcs	r2, r2
    2180:	0883      	lsrs	r3, r0, #2
    2182:	428b      	cmp	r3, r1
    2184:	d301      	bcc.n	218a <__divsi3+0xea>
    2186:	008b      	lsls	r3, r1, #2
    2188:	1ac0      	subs	r0, r0, r3
    218a:	4152      	adcs	r2, r2
    218c:	0843      	lsrs	r3, r0, #1
    218e:	428b      	cmp	r3, r1
    2190:	d301      	bcc.n	2196 <__divsi3+0xf6>
    2192:	004b      	lsls	r3, r1, #1
    2194:	1ac0      	subs	r0, r0, r3
    2196:	4152      	adcs	r2, r2
    2198:	1a41      	subs	r1, r0, r1
    219a:	d200      	bcs.n	219e <__divsi3+0xfe>
    219c:	4601      	mov	r1, r0
    219e:	4152      	adcs	r2, r2
    21a0:	4610      	mov	r0, r2
    21a2:	4770      	bx	lr
    21a4:	e05d      	b.n	2262 <__divsi3+0x1c2>
    21a6:	0fca      	lsrs	r2, r1, #31
    21a8:	d000      	beq.n	21ac <__divsi3+0x10c>
    21aa:	4249      	negs	r1, r1
    21ac:	1003      	asrs	r3, r0, #32
    21ae:	d300      	bcc.n	21b2 <__divsi3+0x112>
    21b0:	4240      	negs	r0, r0
    21b2:	4053      	eors	r3, r2
    21b4:	2200      	movs	r2, #0
    21b6:	469c      	mov	ip, r3
    21b8:	0903      	lsrs	r3, r0, #4
    21ba:	428b      	cmp	r3, r1
    21bc:	d32d      	bcc.n	221a <__divsi3+0x17a>
    21be:	0a03      	lsrs	r3, r0, #8
    21c0:	428b      	cmp	r3, r1
    21c2:	d312      	bcc.n	21ea <__divsi3+0x14a>
    21c4:	22fc      	movs	r2, #252	; 0xfc
    21c6:	0189      	lsls	r1, r1, #6
    21c8:	ba12      	rev	r2, r2
    21ca:	0a03      	lsrs	r3, r0, #8
    21cc:	428b      	cmp	r3, r1
    21ce:	d30c      	bcc.n	21ea <__divsi3+0x14a>
    21d0:	0189      	lsls	r1, r1, #6
    21d2:	1192      	asrs	r2, r2, #6
    21d4:	428b      	cmp	r3, r1
    21d6:	d308      	bcc.n	21ea <__divsi3+0x14a>
    21d8:	0189      	lsls	r1, r1, #6
    21da:	1192      	asrs	r2, r2, #6
    21dc:	428b      	cmp	r3, r1
    21de:	d304      	bcc.n	21ea <__divsi3+0x14a>
    21e0:	0189      	lsls	r1, r1, #6
    21e2:	d03a      	beq.n	225a <__divsi3+0x1ba>
    21e4:	1192      	asrs	r2, r2, #6
    21e6:	e000      	b.n	21ea <__divsi3+0x14a>
    21e8:	0989      	lsrs	r1, r1, #6
    21ea:	09c3      	lsrs	r3, r0, #7
    21ec:	428b      	cmp	r3, r1
    21ee:	d301      	bcc.n	21f4 <__divsi3+0x154>
    21f0:	01cb      	lsls	r3, r1, #7
    21f2:	1ac0      	subs	r0, r0, r3
    21f4:	4152      	adcs	r2, r2
    21f6:	0983      	lsrs	r3, r0, #6
    21f8:	428b      	cmp	r3, r1
    21fa:	d301      	bcc.n	2200 <__divsi3+0x160>
    21fc:	018b      	lsls	r3, r1, #6
    21fe:	1ac0      	subs	r0, r0, r3
    2200:	4152      	adcs	r2, r2
    2202:	0943      	lsrs	r3, r0, #5
    2204:	428b      	cmp	r3, r1
    2206:	d301      	bcc.n	220c <__divsi3+0x16c>
    2208:	014b      	lsls	r3, r1, #5
    220a:	1ac0      	subs	r0, r0, r3
    220c:	4152      	adcs	r2, r2
    220e:	0903      	lsrs	r3, r0, #4
    2210:	428b      	cmp	r3, r1
    2212:	d301      	bcc.n	2218 <__divsi3+0x178>
    2214:	010b      	lsls	r3, r1, #4
    2216:	1ac0      	subs	r0, r0, r3
    2218:	4152      	adcs	r2, r2
    221a:	08c3      	lsrs	r3, r0, #3
    221c:	428b      	cmp	r3, r1
    221e:	d301      	bcc.n	2224 <__divsi3+0x184>
    2220:	00cb      	lsls	r3, r1, #3
    2222:	1ac0      	subs	r0, r0, r3
    2224:	4152      	adcs	r2, r2
    2226:	0883      	lsrs	r3, r0, #2
    2228:	428b      	cmp	r3, r1
    222a:	d301      	bcc.n	2230 <__divsi3+0x190>
    222c:	008b      	lsls	r3, r1, #2
    222e:	1ac0      	subs	r0, r0, r3
    2230:	4152      	adcs	r2, r2
    2232:	d2d9      	bcs.n	21e8 <__divsi3+0x148>
    2234:	0843      	lsrs	r3, r0, #1
    2236:	428b      	cmp	r3, r1
    2238:	d301      	bcc.n	223e <__divsi3+0x19e>
    223a:	004b      	lsls	r3, r1, #1
    223c:	1ac0      	subs	r0, r0, r3
    223e:	4152      	adcs	r2, r2
    2240:	1a41      	subs	r1, r0, r1
    2242:	d200      	bcs.n	2246 <__divsi3+0x1a6>
    2244:	4601      	mov	r1, r0
    2246:	4663      	mov	r3, ip
    2248:	4152      	adcs	r2, r2
    224a:	105b      	asrs	r3, r3, #1
    224c:	4610      	mov	r0, r2
    224e:	d301      	bcc.n	2254 <__divsi3+0x1b4>
    2250:	4240      	negs	r0, r0
    2252:	2b00      	cmp	r3, #0
    2254:	d500      	bpl.n	2258 <__divsi3+0x1b8>
    2256:	4249      	negs	r1, r1
    2258:	4770      	bx	lr
    225a:	4663      	mov	r3, ip
    225c:	105b      	asrs	r3, r3, #1
    225e:	d300      	bcc.n	2262 <__divsi3+0x1c2>
    2260:	4240      	negs	r0, r0
    2262:	b501      	push	{r0, lr}
    2264:	2000      	movs	r0, #0
    2266:	f000 f805 	bl	2274 <__aeabi_idiv0>
    226a:	bd02      	pop	{r1, pc}

0000226c <__aeabi_idivmod>:
    226c:	2900      	cmp	r1, #0
    226e:	d0f8      	beq.n	2262 <__divsi3+0x1c2>
    2270:	e716      	b.n	20a0 <__divsi3>
    2272:	4770      	bx	lr

00002274 <__aeabi_idiv0>:
    2274:	4770      	bx	lr
    2276:	46c0      	nop			; (mov r8, r8)

00002278 <__aeabi_d2uiz>:
    2278:	b570      	push	{r4, r5, r6, lr}
    227a:	2200      	movs	r2, #0
    227c:	4b0c      	ldr	r3, [pc, #48]	; (22b0 <__aeabi_d2uiz+0x38>)
    227e:	0004      	movs	r4, r0
    2280:	000d      	movs	r5, r1
    2282:	f001 f981 	bl	3588 <__aeabi_dcmpge>
    2286:	2800      	cmp	r0, #0
    2288:	d104      	bne.n	2294 <__aeabi_d2uiz+0x1c>
    228a:	0020      	movs	r0, r4
    228c:	0029      	movs	r1, r5
    228e:	f001 f8db 	bl	3448 <__aeabi_d2iz>
    2292:	bd70      	pop	{r4, r5, r6, pc}
    2294:	4b06      	ldr	r3, [pc, #24]	; (22b0 <__aeabi_d2uiz+0x38>)
    2296:	2200      	movs	r2, #0
    2298:	0020      	movs	r0, r4
    229a:	0029      	movs	r1, r5
    229c:	f000 fdbe 	bl	2e1c <__aeabi_dsub>
    22a0:	f001 f8d2 	bl	3448 <__aeabi_d2iz>
    22a4:	2380      	movs	r3, #128	; 0x80
    22a6:	061b      	lsls	r3, r3, #24
    22a8:	469c      	mov	ip, r3
    22aa:	4460      	add	r0, ip
    22ac:	e7f1      	b.n	2292 <__aeabi_d2uiz+0x1a>
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	41e00000 	.word	0x41e00000

000022b4 <__aeabi_ddiv>:
    22b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22b6:	4657      	mov	r7, sl
    22b8:	4645      	mov	r5, r8
    22ba:	46de      	mov	lr, fp
    22bc:	464e      	mov	r6, r9
    22be:	b5e0      	push	{r5, r6, r7, lr}
    22c0:	004c      	lsls	r4, r1, #1
    22c2:	030e      	lsls	r6, r1, #12
    22c4:	b087      	sub	sp, #28
    22c6:	4683      	mov	fp, r0
    22c8:	4692      	mov	sl, r2
    22ca:	001d      	movs	r5, r3
    22cc:	4680      	mov	r8, r0
    22ce:	0b36      	lsrs	r6, r6, #12
    22d0:	0d64      	lsrs	r4, r4, #21
    22d2:	0fcf      	lsrs	r7, r1, #31
    22d4:	2c00      	cmp	r4, #0
    22d6:	d04f      	beq.n	2378 <__aeabi_ddiv+0xc4>
    22d8:	4b6f      	ldr	r3, [pc, #444]	; (2498 <__aeabi_ddiv+0x1e4>)
    22da:	429c      	cmp	r4, r3
    22dc:	d035      	beq.n	234a <__aeabi_ddiv+0x96>
    22de:	2380      	movs	r3, #128	; 0x80
    22e0:	0f42      	lsrs	r2, r0, #29
    22e2:	041b      	lsls	r3, r3, #16
    22e4:	00f6      	lsls	r6, r6, #3
    22e6:	4313      	orrs	r3, r2
    22e8:	4333      	orrs	r3, r6
    22ea:	4699      	mov	r9, r3
    22ec:	00c3      	lsls	r3, r0, #3
    22ee:	4698      	mov	r8, r3
    22f0:	4b6a      	ldr	r3, [pc, #424]	; (249c <__aeabi_ddiv+0x1e8>)
    22f2:	2600      	movs	r6, #0
    22f4:	469c      	mov	ip, r3
    22f6:	2300      	movs	r3, #0
    22f8:	4464      	add	r4, ip
    22fa:	9303      	str	r3, [sp, #12]
    22fc:	032b      	lsls	r3, r5, #12
    22fe:	0b1b      	lsrs	r3, r3, #12
    2300:	469b      	mov	fp, r3
    2302:	006b      	lsls	r3, r5, #1
    2304:	0fed      	lsrs	r5, r5, #31
    2306:	4650      	mov	r0, sl
    2308:	0d5b      	lsrs	r3, r3, #21
    230a:	9501      	str	r5, [sp, #4]
    230c:	d05e      	beq.n	23cc <__aeabi_ddiv+0x118>
    230e:	4a62      	ldr	r2, [pc, #392]	; (2498 <__aeabi_ddiv+0x1e4>)
    2310:	4293      	cmp	r3, r2
    2312:	d053      	beq.n	23bc <__aeabi_ddiv+0x108>
    2314:	465a      	mov	r2, fp
    2316:	00d1      	lsls	r1, r2, #3
    2318:	2280      	movs	r2, #128	; 0x80
    231a:	0f40      	lsrs	r0, r0, #29
    231c:	0412      	lsls	r2, r2, #16
    231e:	4302      	orrs	r2, r0
    2320:	430a      	orrs	r2, r1
    2322:	4693      	mov	fp, r2
    2324:	4652      	mov	r2, sl
    2326:	00d1      	lsls	r1, r2, #3
    2328:	4a5c      	ldr	r2, [pc, #368]	; (249c <__aeabi_ddiv+0x1e8>)
    232a:	4694      	mov	ip, r2
    232c:	2200      	movs	r2, #0
    232e:	4463      	add	r3, ip
    2330:	0038      	movs	r0, r7
    2332:	4068      	eors	r0, r5
    2334:	4684      	mov	ip, r0
    2336:	9002      	str	r0, [sp, #8]
    2338:	1ae4      	subs	r4, r4, r3
    233a:	4316      	orrs	r6, r2
    233c:	2e0f      	cmp	r6, #15
    233e:	d900      	bls.n	2342 <__aeabi_ddiv+0x8e>
    2340:	e0b4      	b.n	24ac <__aeabi_ddiv+0x1f8>
    2342:	4b57      	ldr	r3, [pc, #348]	; (24a0 <__aeabi_ddiv+0x1ec>)
    2344:	00b6      	lsls	r6, r6, #2
    2346:	599b      	ldr	r3, [r3, r6]
    2348:	469f      	mov	pc, r3
    234a:	0003      	movs	r3, r0
    234c:	4333      	orrs	r3, r6
    234e:	4699      	mov	r9, r3
    2350:	d16c      	bne.n	242c <__aeabi_ddiv+0x178>
    2352:	2300      	movs	r3, #0
    2354:	4698      	mov	r8, r3
    2356:	3302      	adds	r3, #2
    2358:	2608      	movs	r6, #8
    235a:	9303      	str	r3, [sp, #12]
    235c:	e7ce      	b.n	22fc <__aeabi_ddiv+0x48>
    235e:	46cb      	mov	fp, r9
    2360:	4641      	mov	r1, r8
    2362:	9a03      	ldr	r2, [sp, #12]
    2364:	9701      	str	r7, [sp, #4]
    2366:	2a02      	cmp	r2, #2
    2368:	d165      	bne.n	2436 <__aeabi_ddiv+0x182>
    236a:	9b01      	ldr	r3, [sp, #4]
    236c:	4c4a      	ldr	r4, [pc, #296]	; (2498 <__aeabi_ddiv+0x1e4>)
    236e:	469c      	mov	ip, r3
    2370:	2300      	movs	r3, #0
    2372:	2200      	movs	r2, #0
    2374:	4698      	mov	r8, r3
    2376:	e06b      	b.n	2450 <__aeabi_ddiv+0x19c>
    2378:	0003      	movs	r3, r0
    237a:	4333      	orrs	r3, r6
    237c:	4699      	mov	r9, r3
    237e:	d04e      	beq.n	241e <__aeabi_ddiv+0x16a>
    2380:	2e00      	cmp	r6, #0
    2382:	d100      	bne.n	2386 <__aeabi_ddiv+0xd2>
    2384:	e1bc      	b.n	2700 <__aeabi_ddiv+0x44c>
    2386:	0030      	movs	r0, r6
    2388:	f001 f908 	bl	359c <__clzsi2>
    238c:	0003      	movs	r3, r0
    238e:	3b0b      	subs	r3, #11
    2390:	2b1c      	cmp	r3, #28
    2392:	dd00      	ble.n	2396 <__aeabi_ddiv+0xe2>
    2394:	e1ac      	b.n	26f0 <__aeabi_ddiv+0x43c>
    2396:	221d      	movs	r2, #29
    2398:	1ad3      	subs	r3, r2, r3
    239a:	465a      	mov	r2, fp
    239c:	0001      	movs	r1, r0
    239e:	40da      	lsrs	r2, r3
    23a0:	3908      	subs	r1, #8
    23a2:	408e      	lsls	r6, r1
    23a4:	0013      	movs	r3, r2
    23a6:	4333      	orrs	r3, r6
    23a8:	4699      	mov	r9, r3
    23aa:	465b      	mov	r3, fp
    23ac:	408b      	lsls	r3, r1
    23ae:	4698      	mov	r8, r3
    23b0:	2300      	movs	r3, #0
    23b2:	4c3c      	ldr	r4, [pc, #240]	; (24a4 <__aeabi_ddiv+0x1f0>)
    23b4:	2600      	movs	r6, #0
    23b6:	1a24      	subs	r4, r4, r0
    23b8:	9303      	str	r3, [sp, #12]
    23ba:	e79f      	b.n	22fc <__aeabi_ddiv+0x48>
    23bc:	4651      	mov	r1, sl
    23be:	465a      	mov	r2, fp
    23c0:	4311      	orrs	r1, r2
    23c2:	d129      	bne.n	2418 <__aeabi_ddiv+0x164>
    23c4:	2200      	movs	r2, #0
    23c6:	4693      	mov	fp, r2
    23c8:	3202      	adds	r2, #2
    23ca:	e7b1      	b.n	2330 <__aeabi_ddiv+0x7c>
    23cc:	4659      	mov	r1, fp
    23ce:	4301      	orrs	r1, r0
    23d0:	d01e      	beq.n	2410 <__aeabi_ddiv+0x15c>
    23d2:	465b      	mov	r3, fp
    23d4:	2b00      	cmp	r3, #0
    23d6:	d100      	bne.n	23da <__aeabi_ddiv+0x126>
    23d8:	e19e      	b.n	2718 <__aeabi_ddiv+0x464>
    23da:	4658      	mov	r0, fp
    23dc:	f001 f8de 	bl	359c <__clzsi2>
    23e0:	0003      	movs	r3, r0
    23e2:	3b0b      	subs	r3, #11
    23e4:	2b1c      	cmp	r3, #28
    23e6:	dd00      	ble.n	23ea <__aeabi_ddiv+0x136>
    23e8:	e18f      	b.n	270a <__aeabi_ddiv+0x456>
    23ea:	0002      	movs	r2, r0
    23ec:	4659      	mov	r1, fp
    23ee:	3a08      	subs	r2, #8
    23f0:	4091      	lsls	r1, r2
    23f2:	468b      	mov	fp, r1
    23f4:	211d      	movs	r1, #29
    23f6:	1acb      	subs	r3, r1, r3
    23f8:	4651      	mov	r1, sl
    23fa:	40d9      	lsrs	r1, r3
    23fc:	000b      	movs	r3, r1
    23fe:	4659      	mov	r1, fp
    2400:	430b      	orrs	r3, r1
    2402:	4651      	mov	r1, sl
    2404:	469b      	mov	fp, r3
    2406:	4091      	lsls	r1, r2
    2408:	4b26      	ldr	r3, [pc, #152]	; (24a4 <__aeabi_ddiv+0x1f0>)
    240a:	2200      	movs	r2, #0
    240c:	1a1b      	subs	r3, r3, r0
    240e:	e78f      	b.n	2330 <__aeabi_ddiv+0x7c>
    2410:	2300      	movs	r3, #0
    2412:	2201      	movs	r2, #1
    2414:	469b      	mov	fp, r3
    2416:	e78b      	b.n	2330 <__aeabi_ddiv+0x7c>
    2418:	4651      	mov	r1, sl
    241a:	2203      	movs	r2, #3
    241c:	e788      	b.n	2330 <__aeabi_ddiv+0x7c>
    241e:	2300      	movs	r3, #0
    2420:	4698      	mov	r8, r3
    2422:	3301      	adds	r3, #1
    2424:	2604      	movs	r6, #4
    2426:	2400      	movs	r4, #0
    2428:	9303      	str	r3, [sp, #12]
    242a:	e767      	b.n	22fc <__aeabi_ddiv+0x48>
    242c:	2303      	movs	r3, #3
    242e:	46b1      	mov	r9, r6
    2430:	9303      	str	r3, [sp, #12]
    2432:	260c      	movs	r6, #12
    2434:	e762      	b.n	22fc <__aeabi_ddiv+0x48>
    2436:	2a03      	cmp	r2, #3
    2438:	d100      	bne.n	243c <__aeabi_ddiv+0x188>
    243a:	e25c      	b.n	28f6 <__aeabi_ddiv+0x642>
    243c:	9b01      	ldr	r3, [sp, #4]
    243e:	2a01      	cmp	r2, #1
    2440:	d000      	beq.n	2444 <__aeabi_ddiv+0x190>
    2442:	e1e4      	b.n	280e <__aeabi_ddiv+0x55a>
    2444:	4013      	ands	r3, r2
    2446:	469c      	mov	ip, r3
    2448:	2300      	movs	r3, #0
    244a:	2400      	movs	r4, #0
    244c:	2200      	movs	r2, #0
    244e:	4698      	mov	r8, r3
    2450:	2100      	movs	r1, #0
    2452:	0312      	lsls	r2, r2, #12
    2454:	0b13      	lsrs	r3, r2, #12
    2456:	0d0a      	lsrs	r2, r1, #20
    2458:	0512      	lsls	r2, r2, #20
    245a:	431a      	orrs	r2, r3
    245c:	0523      	lsls	r3, r4, #20
    245e:	4c12      	ldr	r4, [pc, #72]	; (24a8 <__aeabi_ddiv+0x1f4>)
    2460:	4640      	mov	r0, r8
    2462:	4022      	ands	r2, r4
    2464:	4313      	orrs	r3, r2
    2466:	4662      	mov	r2, ip
    2468:	005b      	lsls	r3, r3, #1
    246a:	07d2      	lsls	r2, r2, #31
    246c:	085b      	lsrs	r3, r3, #1
    246e:	4313      	orrs	r3, r2
    2470:	0019      	movs	r1, r3
    2472:	b007      	add	sp, #28
    2474:	bc3c      	pop	{r2, r3, r4, r5}
    2476:	4690      	mov	r8, r2
    2478:	4699      	mov	r9, r3
    247a:	46a2      	mov	sl, r4
    247c:	46ab      	mov	fp, r5
    247e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2480:	2300      	movs	r3, #0
    2482:	2280      	movs	r2, #128	; 0x80
    2484:	469c      	mov	ip, r3
    2486:	0312      	lsls	r2, r2, #12
    2488:	4698      	mov	r8, r3
    248a:	4c03      	ldr	r4, [pc, #12]	; (2498 <__aeabi_ddiv+0x1e4>)
    248c:	e7e0      	b.n	2450 <__aeabi_ddiv+0x19c>
    248e:	2300      	movs	r3, #0
    2490:	4c01      	ldr	r4, [pc, #4]	; (2498 <__aeabi_ddiv+0x1e4>)
    2492:	2200      	movs	r2, #0
    2494:	4698      	mov	r8, r3
    2496:	e7db      	b.n	2450 <__aeabi_ddiv+0x19c>
    2498:	000007ff 	.word	0x000007ff
    249c:	fffffc01 	.word	0xfffffc01
    24a0:	00003a10 	.word	0x00003a10
    24a4:	fffffc0d 	.word	0xfffffc0d
    24a8:	800fffff 	.word	0x800fffff
    24ac:	45d9      	cmp	r9, fp
    24ae:	d900      	bls.n	24b2 <__aeabi_ddiv+0x1fe>
    24b0:	e139      	b.n	2726 <__aeabi_ddiv+0x472>
    24b2:	d100      	bne.n	24b6 <__aeabi_ddiv+0x202>
    24b4:	e134      	b.n	2720 <__aeabi_ddiv+0x46c>
    24b6:	2300      	movs	r3, #0
    24b8:	4646      	mov	r6, r8
    24ba:	464d      	mov	r5, r9
    24bc:	469a      	mov	sl, r3
    24be:	3c01      	subs	r4, #1
    24c0:	465b      	mov	r3, fp
    24c2:	0e0a      	lsrs	r2, r1, #24
    24c4:	021b      	lsls	r3, r3, #8
    24c6:	431a      	orrs	r2, r3
    24c8:	020b      	lsls	r3, r1, #8
    24ca:	0c17      	lsrs	r7, r2, #16
    24cc:	9303      	str	r3, [sp, #12]
    24ce:	0413      	lsls	r3, r2, #16
    24d0:	0c1b      	lsrs	r3, r3, #16
    24d2:	0039      	movs	r1, r7
    24d4:	0028      	movs	r0, r5
    24d6:	4690      	mov	r8, r2
    24d8:	9301      	str	r3, [sp, #4]
    24da:	f7ff fd57 	bl	1f8c <__udivsi3>
    24de:	0002      	movs	r2, r0
    24e0:	9b01      	ldr	r3, [sp, #4]
    24e2:	4683      	mov	fp, r0
    24e4:	435a      	muls	r2, r3
    24e6:	0028      	movs	r0, r5
    24e8:	0039      	movs	r1, r7
    24ea:	4691      	mov	r9, r2
    24ec:	f7ff fdd4 	bl	2098 <__aeabi_uidivmod>
    24f0:	0c35      	lsrs	r5, r6, #16
    24f2:	0409      	lsls	r1, r1, #16
    24f4:	430d      	orrs	r5, r1
    24f6:	45a9      	cmp	r9, r5
    24f8:	d90d      	bls.n	2516 <__aeabi_ddiv+0x262>
    24fa:	465b      	mov	r3, fp
    24fc:	4445      	add	r5, r8
    24fe:	3b01      	subs	r3, #1
    2500:	45a8      	cmp	r8, r5
    2502:	d900      	bls.n	2506 <__aeabi_ddiv+0x252>
    2504:	e13a      	b.n	277c <__aeabi_ddiv+0x4c8>
    2506:	45a9      	cmp	r9, r5
    2508:	d800      	bhi.n	250c <__aeabi_ddiv+0x258>
    250a:	e137      	b.n	277c <__aeabi_ddiv+0x4c8>
    250c:	2302      	movs	r3, #2
    250e:	425b      	negs	r3, r3
    2510:	469c      	mov	ip, r3
    2512:	4445      	add	r5, r8
    2514:	44e3      	add	fp, ip
    2516:	464b      	mov	r3, r9
    2518:	1aeb      	subs	r3, r5, r3
    251a:	0039      	movs	r1, r7
    251c:	0018      	movs	r0, r3
    251e:	9304      	str	r3, [sp, #16]
    2520:	f7ff fd34 	bl	1f8c <__udivsi3>
    2524:	9b01      	ldr	r3, [sp, #4]
    2526:	0005      	movs	r5, r0
    2528:	4343      	muls	r3, r0
    252a:	0039      	movs	r1, r7
    252c:	9804      	ldr	r0, [sp, #16]
    252e:	4699      	mov	r9, r3
    2530:	f7ff fdb2 	bl	2098 <__aeabi_uidivmod>
    2534:	0433      	lsls	r3, r6, #16
    2536:	0409      	lsls	r1, r1, #16
    2538:	0c1b      	lsrs	r3, r3, #16
    253a:	430b      	orrs	r3, r1
    253c:	4599      	cmp	r9, r3
    253e:	d909      	bls.n	2554 <__aeabi_ddiv+0x2a0>
    2540:	4443      	add	r3, r8
    2542:	1e6a      	subs	r2, r5, #1
    2544:	4598      	cmp	r8, r3
    2546:	d900      	bls.n	254a <__aeabi_ddiv+0x296>
    2548:	e11a      	b.n	2780 <__aeabi_ddiv+0x4cc>
    254a:	4599      	cmp	r9, r3
    254c:	d800      	bhi.n	2550 <__aeabi_ddiv+0x29c>
    254e:	e117      	b.n	2780 <__aeabi_ddiv+0x4cc>
    2550:	3d02      	subs	r5, #2
    2552:	4443      	add	r3, r8
    2554:	464a      	mov	r2, r9
    2556:	1a9b      	subs	r3, r3, r2
    2558:	465a      	mov	r2, fp
    255a:	0412      	lsls	r2, r2, #16
    255c:	432a      	orrs	r2, r5
    255e:	9903      	ldr	r1, [sp, #12]
    2560:	4693      	mov	fp, r2
    2562:	0c10      	lsrs	r0, r2, #16
    2564:	0c0a      	lsrs	r2, r1, #16
    2566:	4691      	mov	r9, r2
    2568:	0409      	lsls	r1, r1, #16
    256a:	465a      	mov	r2, fp
    256c:	0c09      	lsrs	r1, r1, #16
    256e:	464e      	mov	r6, r9
    2570:	000d      	movs	r5, r1
    2572:	0412      	lsls	r2, r2, #16
    2574:	0c12      	lsrs	r2, r2, #16
    2576:	4345      	muls	r5, r0
    2578:	9105      	str	r1, [sp, #20]
    257a:	4351      	muls	r1, r2
    257c:	4372      	muls	r2, r6
    257e:	4370      	muls	r0, r6
    2580:	1952      	adds	r2, r2, r5
    2582:	0c0e      	lsrs	r6, r1, #16
    2584:	18b2      	adds	r2, r6, r2
    2586:	4295      	cmp	r5, r2
    2588:	d903      	bls.n	2592 <__aeabi_ddiv+0x2de>
    258a:	2580      	movs	r5, #128	; 0x80
    258c:	026d      	lsls	r5, r5, #9
    258e:	46ac      	mov	ip, r5
    2590:	4460      	add	r0, ip
    2592:	0c15      	lsrs	r5, r2, #16
    2594:	0409      	lsls	r1, r1, #16
    2596:	0412      	lsls	r2, r2, #16
    2598:	0c09      	lsrs	r1, r1, #16
    259a:	1828      	adds	r0, r5, r0
    259c:	1852      	adds	r2, r2, r1
    259e:	4283      	cmp	r3, r0
    25a0:	d200      	bcs.n	25a4 <__aeabi_ddiv+0x2f0>
    25a2:	e0ce      	b.n	2742 <__aeabi_ddiv+0x48e>
    25a4:	d100      	bne.n	25a8 <__aeabi_ddiv+0x2f4>
    25a6:	e0c8      	b.n	273a <__aeabi_ddiv+0x486>
    25a8:	1a1d      	subs	r5, r3, r0
    25aa:	4653      	mov	r3, sl
    25ac:	1a9e      	subs	r6, r3, r2
    25ae:	45b2      	cmp	sl, r6
    25b0:	4192      	sbcs	r2, r2
    25b2:	4252      	negs	r2, r2
    25b4:	1aab      	subs	r3, r5, r2
    25b6:	469a      	mov	sl, r3
    25b8:	4598      	cmp	r8, r3
    25ba:	d100      	bne.n	25be <__aeabi_ddiv+0x30a>
    25bc:	e117      	b.n	27ee <__aeabi_ddiv+0x53a>
    25be:	0039      	movs	r1, r7
    25c0:	0018      	movs	r0, r3
    25c2:	f7ff fce3 	bl	1f8c <__udivsi3>
    25c6:	9b01      	ldr	r3, [sp, #4]
    25c8:	0005      	movs	r5, r0
    25ca:	4343      	muls	r3, r0
    25cc:	0039      	movs	r1, r7
    25ce:	4650      	mov	r0, sl
    25d0:	9304      	str	r3, [sp, #16]
    25d2:	f7ff fd61 	bl	2098 <__aeabi_uidivmod>
    25d6:	9804      	ldr	r0, [sp, #16]
    25d8:	040b      	lsls	r3, r1, #16
    25da:	0c31      	lsrs	r1, r6, #16
    25dc:	4319      	orrs	r1, r3
    25de:	4288      	cmp	r0, r1
    25e0:	d909      	bls.n	25f6 <__aeabi_ddiv+0x342>
    25e2:	4441      	add	r1, r8
    25e4:	1e6b      	subs	r3, r5, #1
    25e6:	4588      	cmp	r8, r1
    25e8:	d900      	bls.n	25ec <__aeabi_ddiv+0x338>
    25ea:	e107      	b.n	27fc <__aeabi_ddiv+0x548>
    25ec:	4288      	cmp	r0, r1
    25ee:	d800      	bhi.n	25f2 <__aeabi_ddiv+0x33e>
    25f0:	e104      	b.n	27fc <__aeabi_ddiv+0x548>
    25f2:	3d02      	subs	r5, #2
    25f4:	4441      	add	r1, r8
    25f6:	9b04      	ldr	r3, [sp, #16]
    25f8:	1acb      	subs	r3, r1, r3
    25fa:	0018      	movs	r0, r3
    25fc:	0039      	movs	r1, r7
    25fe:	9304      	str	r3, [sp, #16]
    2600:	f7ff fcc4 	bl	1f8c <__udivsi3>
    2604:	9b01      	ldr	r3, [sp, #4]
    2606:	4682      	mov	sl, r0
    2608:	4343      	muls	r3, r0
    260a:	0039      	movs	r1, r7
    260c:	9804      	ldr	r0, [sp, #16]
    260e:	9301      	str	r3, [sp, #4]
    2610:	f7ff fd42 	bl	2098 <__aeabi_uidivmod>
    2614:	9801      	ldr	r0, [sp, #4]
    2616:	040b      	lsls	r3, r1, #16
    2618:	0431      	lsls	r1, r6, #16
    261a:	0c09      	lsrs	r1, r1, #16
    261c:	4319      	orrs	r1, r3
    261e:	4288      	cmp	r0, r1
    2620:	d90d      	bls.n	263e <__aeabi_ddiv+0x38a>
    2622:	4653      	mov	r3, sl
    2624:	4441      	add	r1, r8
    2626:	3b01      	subs	r3, #1
    2628:	4588      	cmp	r8, r1
    262a:	d900      	bls.n	262e <__aeabi_ddiv+0x37a>
    262c:	e0e8      	b.n	2800 <__aeabi_ddiv+0x54c>
    262e:	4288      	cmp	r0, r1
    2630:	d800      	bhi.n	2634 <__aeabi_ddiv+0x380>
    2632:	e0e5      	b.n	2800 <__aeabi_ddiv+0x54c>
    2634:	2302      	movs	r3, #2
    2636:	425b      	negs	r3, r3
    2638:	469c      	mov	ip, r3
    263a:	4441      	add	r1, r8
    263c:	44e2      	add	sl, ip
    263e:	9b01      	ldr	r3, [sp, #4]
    2640:	042d      	lsls	r5, r5, #16
    2642:	1ace      	subs	r6, r1, r3
    2644:	4651      	mov	r1, sl
    2646:	4329      	orrs	r1, r5
    2648:	9d05      	ldr	r5, [sp, #20]
    264a:	464f      	mov	r7, r9
    264c:	002a      	movs	r2, r5
    264e:	040b      	lsls	r3, r1, #16
    2650:	0c08      	lsrs	r0, r1, #16
    2652:	0c1b      	lsrs	r3, r3, #16
    2654:	435a      	muls	r2, r3
    2656:	4345      	muls	r5, r0
    2658:	437b      	muls	r3, r7
    265a:	4378      	muls	r0, r7
    265c:	195b      	adds	r3, r3, r5
    265e:	0c17      	lsrs	r7, r2, #16
    2660:	18fb      	adds	r3, r7, r3
    2662:	429d      	cmp	r5, r3
    2664:	d903      	bls.n	266e <__aeabi_ddiv+0x3ba>
    2666:	2580      	movs	r5, #128	; 0x80
    2668:	026d      	lsls	r5, r5, #9
    266a:	46ac      	mov	ip, r5
    266c:	4460      	add	r0, ip
    266e:	0c1d      	lsrs	r5, r3, #16
    2670:	0412      	lsls	r2, r2, #16
    2672:	041b      	lsls	r3, r3, #16
    2674:	0c12      	lsrs	r2, r2, #16
    2676:	1828      	adds	r0, r5, r0
    2678:	189b      	adds	r3, r3, r2
    267a:	4286      	cmp	r6, r0
    267c:	d200      	bcs.n	2680 <__aeabi_ddiv+0x3cc>
    267e:	e093      	b.n	27a8 <__aeabi_ddiv+0x4f4>
    2680:	d100      	bne.n	2684 <__aeabi_ddiv+0x3d0>
    2682:	e08e      	b.n	27a2 <__aeabi_ddiv+0x4ee>
    2684:	2301      	movs	r3, #1
    2686:	4319      	orrs	r1, r3
    2688:	4ba0      	ldr	r3, [pc, #640]	; (290c <__aeabi_ddiv+0x658>)
    268a:	18e3      	adds	r3, r4, r3
    268c:	2b00      	cmp	r3, #0
    268e:	dc00      	bgt.n	2692 <__aeabi_ddiv+0x3de>
    2690:	e099      	b.n	27c6 <__aeabi_ddiv+0x512>
    2692:	074a      	lsls	r2, r1, #29
    2694:	d000      	beq.n	2698 <__aeabi_ddiv+0x3e4>
    2696:	e09e      	b.n	27d6 <__aeabi_ddiv+0x522>
    2698:	465a      	mov	r2, fp
    269a:	01d2      	lsls	r2, r2, #7
    269c:	d506      	bpl.n	26ac <__aeabi_ddiv+0x3f8>
    269e:	465a      	mov	r2, fp
    26a0:	4b9b      	ldr	r3, [pc, #620]	; (2910 <__aeabi_ddiv+0x65c>)
    26a2:	401a      	ands	r2, r3
    26a4:	2380      	movs	r3, #128	; 0x80
    26a6:	4693      	mov	fp, r2
    26a8:	00db      	lsls	r3, r3, #3
    26aa:	18e3      	adds	r3, r4, r3
    26ac:	4a99      	ldr	r2, [pc, #612]	; (2914 <__aeabi_ddiv+0x660>)
    26ae:	4293      	cmp	r3, r2
    26b0:	dd68      	ble.n	2784 <__aeabi_ddiv+0x4d0>
    26b2:	2301      	movs	r3, #1
    26b4:	9a02      	ldr	r2, [sp, #8]
    26b6:	4c98      	ldr	r4, [pc, #608]	; (2918 <__aeabi_ddiv+0x664>)
    26b8:	401a      	ands	r2, r3
    26ba:	2300      	movs	r3, #0
    26bc:	4694      	mov	ip, r2
    26be:	4698      	mov	r8, r3
    26c0:	2200      	movs	r2, #0
    26c2:	e6c5      	b.n	2450 <__aeabi_ddiv+0x19c>
    26c4:	2280      	movs	r2, #128	; 0x80
    26c6:	464b      	mov	r3, r9
    26c8:	0312      	lsls	r2, r2, #12
    26ca:	4213      	tst	r3, r2
    26cc:	d00a      	beq.n	26e4 <__aeabi_ddiv+0x430>
    26ce:	465b      	mov	r3, fp
    26d0:	4213      	tst	r3, r2
    26d2:	d106      	bne.n	26e2 <__aeabi_ddiv+0x42e>
    26d4:	431a      	orrs	r2, r3
    26d6:	0312      	lsls	r2, r2, #12
    26d8:	0b12      	lsrs	r2, r2, #12
    26da:	46ac      	mov	ip, r5
    26dc:	4688      	mov	r8, r1
    26de:	4c8e      	ldr	r4, [pc, #568]	; (2918 <__aeabi_ddiv+0x664>)
    26e0:	e6b6      	b.n	2450 <__aeabi_ddiv+0x19c>
    26e2:	464b      	mov	r3, r9
    26e4:	431a      	orrs	r2, r3
    26e6:	0312      	lsls	r2, r2, #12
    26e8:	0b12      	lsrs	r2, r2, #12
    26ea:	46bc      	mov	ip, r7
    26ec:	4c8a      	ldr	r4, [pc, #552]	; (2918 <__aeabi_ddiv+0x664>)
    26ee:	e6af      	b.n	2450 <__aeabi_ddiv+0x19c>
    26f0:	0003      	movs	r3, r0
    26f2:	465a      	mov	r2, fp
    26f4:	3b28      	subs	r3, #40	; 0x28
    26f6:	409a      	lsls	r2, r3
    26f8:	2300      	movs	r3, #0
    26fa:	4691      	mov	r9, r2
    26fc:	4698      	mov	r8, r3
    26fe:	e657      	b.n	23b0 <__aeabi_ddiv+0xfc>
    2700:	4658      	mov	r0, fp
    2702:	f000 ff4b 	bl	359c <__clzsi2>
    2706:	3020      	adds	r0, #32
    2708:	e640      	b.n	238c <__aeabi_ddiv+0xd8>
    270a:	0003      	movs	r3, r0
    270c:	4652      	mov	r2, sl
    270e:	3b28      	subs	r3, #40	; 0x28
    2710:	409a      	lsls	r2, r3
    2712:	2100      	movs	r1, #0
    2714:	4693      	mov	fp, r2
    2716:	e677      	b.n	2408 <__aeabi_ddiv+0x154>
    2718:	f000 ff40 	bl	359c <__clzsi2>
    271c:	3020      	adds	r0, #32
    271e:	e65f      	b.n	23e0 <__aeabi_ddiv+0x12c>
    2720:	4588      	cmp	r8, r1
    2722:	d200      	bcs.n	2726 <__aeabi_ddiv+0x472>
    2724:	e6c7      	b.n	24b6 <__aeabi_ddiv+0x202>
    2726:	464b      	mov	r3, r9
    2728:	07de      	lsls	r6, r3, #31
    272a:	085d      	lsrs	r5, r3, #1
    272c:	4643      	mov	r3, r8
    272e:	085b      	lsrs	r3, r3, #1
    2730:	431e      	orrs	r6, r3
    2732:	4643      	mov	r3, r8
    2734:	07db      	lsls	r3, r3, #31
    2736:	469a      	mov	sl, r3
    2738:	e6c2      	b.n	24c0 <__aeabi_ddiv+0x20c>
    273a:	2500      	movs	r5, #0
    273c:	4592      	cmp	sl, r2
    273e:	d300      	bcc.n	2742 <__aeabi_ddiv+0x48e>
    2740:	e733      	b.n	25aa <__aeabi_ddiv+0x2f6>
    2742:	9e03      	ldr	r6, [sp, #12]
    2744:	4659      	mov	r1, fp
    2746:	46b4      	mov	ip, r6
    2748:	44e2      	add	sl, ip
    274a:	45b2      	cmp	sl, r6
    274c:	41ad      	sbcs	r5, r5
    274e:	426d      	negs	r5, r5
    2750:	4445      	add	r5, r8
    2752:	18eb      	adds	r3, r5, r3
    2754:	3901      	subs	r1, #1
    2756:	4598      	cmp	r8, r3
    2758:	d207      	bcs.n	276a <__aeabi_ddiv+0x4b6>
    275a:	4298      	cmp	r0, r3
    275c:	d900      	bls.n	2760 <__aeabi_ddiv+0x4ac>
    275e:	e07f      	b.n	2860 <__aeabi_ddiv+0x5ac>
    2760:	d100      	bne.n	2764 <__aeabi_ddiv+0x4b0>
    2762:	e0bc      	b.n	28de <__aeabi_ddiv+0x62a>
    2764:	1a1d      	subs	r5, r3, r0
    2766:	468b      	mov	fp, r1
    2768:	e71f      	b.n	25aa <__aeabi_ddiv+0x2f6>
    276a:	4598      	cmp	r8, r3
    276c:	d1fa      	bne.n	2764 <__aeabi_ddiv+0x4b0>
    276e:	9d03      	ldr	r5, [sp, #12]
    2770:	4555      	cmp	r5, sl
    2772:	d9f2      	bls.n	275a <__aeabi_ddiv+0x4a6>
    2774:	4643      	mov	r3, r8
    2776:	468b      	mov	fp, r1
    2778:	1a1d      	subs	r5, r3, r0
    277a:	e716      	b.n	25aa <__aeabi_ddiv+0x2f6>
    277c:	469b      	mov	fp, r3
    277e:	e6ca      	b.n	2516 <__aeabi_ddiv+0x262>
    2780:	0015      	movs	r5, r2
    2782:	e6e7      	b.n	2554 <__aeabi_ddiv+0x2a0>
    2784:	465a      	mov	r2, fp
    2786:	08c9      	lsrs	r1, r1, #3
    2788:	0752      	lsls	r2, r2, #29
    278a:	430a      	orrs	r2, r1
    278c:	055b      	lsls	r3, r3, #21
    278e:	4690      	mov	r8, r2
    2790:	0d5c      	lsrs	r4, r3, #21
    2792:	465a      	mov	r2, fp
    2794:	2301      	movs	r3, #1
    2796:	9902      	ldr	r1, [sp, #8]
    2798:	0252      	lsls	r2, r2, #9
    279a:	4019      	ands	r1, r3
    279c:	0b12      	lsrs	r2, r2, #12
    279e:	468c      	mov	ip, r1
    27a0:	e656      	b.n	2450 <__aeabi_ddiv+0x19c>
    27a2:	2b00      	cmp	r3, #0
    27a4:	d100      	bne.n	27a8 <__aeabi_ddiv+0x4f4>
    27a6:	e76f      	b.n	2688 <__aeabi_ddiv+0x3d4>
    27a8:	4446      	add	r6, r8
    27aa:	1e4a      	subs	r2, r1, #1
    27ac:	45b0      	cmp	r8, r6
    27ae:	d929      	bls.n	2804 <__aeabi_ddiv+0x550>
    27b0:	0011      	movs	r1, r2
    27b2:	4286      	cmp	r6, r0
    27b4:	d000      	beq.n	27b8 <__aeabi_ddiv+0x504>
    27b6:	e765      	b.n	2684 <__aeabi_ddiv+0x3d0>
    27b8:	9a03      	ldr	r2, [sp, #12]
    27ba:	4293      	cmp	r3, r2
    27bc:	d000      	beq.n	27c0 <__aeabi_ddiv+0x50c>
    27be:	e761      	b.n	2684 <__aeabi_ddiv+0x3d0>
    27c0:	e762      	b.n	2688 <__aeabi_ddiv+0x3d4>
    27c2:	2101      	movs	r1, #1
    27c4:	4249      	negs	r1, r1
    27c6:	2001      	movs	r0, #1
    27c8:	1ac2      	subs	r2, r0, r3
    27ca:	2a38      	cmp	r2, #56	; 0x38
    27cc:	dd21      	ble.n	2812 <__aeabi_ddiv+0x55e>
    27ce:	9b02      	ldr	r3, [sp, #8]
    27d0:	4003      	ands	r3, r0
    27d2:	469c      	mov	ip, r3
    27d4:	e638      	b.n	2448 <__aeabi_ddiv+0x194>
    27d6:	220f      	movs	r2, #15
    27d8:	400a      	ands	r2, r1
    27da:	2a04      	cmp	r2, #4
    27dc:	d100      	bne.n	27e0 <__aeabi_ddiv+0x52c>
    27de:	e75b      	b.n	2698 <__aeabi_ddiv+0x3e4>
    27e0:	000a      	movs	r2, r1
    27e2:	1d11      	adds	r1, r2, #4
    27e4:	4291      	cmp	r1, r2
    27e6:	4192      	sbcs	r2, r2
    27e8:	4252      	negs	r2, r2
    27ea:	4493      	add	fp, r2
    27ec:	e754      	b.n	2698 <__aeabi_ddiv+0x3e4>
    27ee:	4b47      	ldr	r3, [pc, #284]	; (290c <__aeabi_ddiv+0x658>)
    27f0:	18e3      	adds	r3, r4, r3
    27f2:	2b00      	cmp	r3, #0
    27f4:	dde5      	ble.n	27c2 <__aeabi_ddiv+0x50e>
    27f6:	2201      	movs	r2, #1
    27f8:	4252      	negs	r2, r2
    27fa:	e7f2      	b.n	27e2 <__aeabi_ddiv+0x52e>
    27fc:	001d      	movs	r5, r3
    27fe:	e6fa      	b.n	25f6 <__aeabi_ddiv+0x342>
    2800:	469a      	mov	sl, r3
    2802:	e71c      	b.n	263e <__aeabi_ddiv+0x38a>
    2804:	42b0      	cmp	r0, r6
    2806:	d839      	bhi.n	287c <__aeabi_ddiv+0x5c8>
    2808:	d06e      	beq.n	28e8 <__aeabi_ddiv+0x634>
    280a:	0011      	movs	r1, r2
    280c:	e73a      	b.n	2684 <__aeabi_ddiv+0x3d0>
    280e:	9302      	str	r3, [sp, #8]
    2810:	e73a      	b.n	2688 <__aeabi_ddiv+0x3d4>
    2812:	2a1f      	cmp	r2, #31
    2814:	dc3c      	bgt.n	2890 <__aeabi_ddiv+0x5dc>
    2816:	2320      	movs	r3, #32
    2818:	1a9b      	subs	r3, r3, r2
    281a:	000c      	movs	r4, r1
    281c:	4658      	mov	r0, fp
    281e:	4099      	lsls	r1, r3
    2820:	4098      	lsls	r0, r3
    2822:	1e4b      	subs	r3, r1, #1
    2824:	4199      	sbcs	r1, r3
    2826:	465b      	mov	r3, fp
    2828:	40d4      	lsrs	r4, r2
    282a:	40d3      	lsrs	r3, r2
    282c:	4320      	orrs	r0, r4
    282e:	4308      	orrs	r0, r1
    2830:	001a      	movs	r2, r3
    2832:	0743      	lsls	r3, r0, #29
    2834:	d009      	beq.n	284a <__aeabi_ddiv+0x596>
    2836:	230f      	movs	r3, #15
    2838:	4003      	ands	r3, r0
    283a:	2b04      	cmp	r3, #4
    283c:	d005      	beq.n	284a <__aeabi_ddiv+0x596>
    283e:	0001      	movs	r1, r0
    2840:	1d08      	adds	r0, r1, #4
    2842:	4288      	cmp	r0, r1
    2844:	419b      	sbcs	r3, r3
    2846:	425b      	negs	r3, r3
    2848:	18d2      	adds	r2, r2, r3
    284a:	0213      	lsls	r3, r2, #8
    284c:	d53a      	bpl.n	28c4 <__aeabi_ddiv+0x610>
    284e:	2301      	movs	r3, #1
    2850:	9a02      	ldr	r2, [sp, #8]
    2852:	2401      	movs	r4, #1
    2854:	401a      	ands	r2, r3
    2856:	2300      	movs	r3, #0
    2858:	4694      	mov	ip, r2
    285a:	4698      	mov	r8, r3
    285c:	2200      	movs	r2, #0
    285e:	e5f7      	b.n	2450 <__aeabi_ddiv+0x19c>
    2860:	2102      	movs	r1, #2
    2862:	4249      	negs	r1, r1
    2864:	468c      	mov	ip, r1
    2866:	9d03      	ldr	r5, [sp, #12]
    2868:	44e3      	add	fp, ip
    286a:	46ac      	mov	ip, r5
    286c:	44e2      	add	sl, ip
    286e:	45aa      	cmp	sl, r5
    2870:	41ad      	sbcs	r5, r5
    2872:	426d      	negs	r5, r5
    2874:	4445      	add	r5, r8
    2876:	18ed      	adds	r5, r5, r3
    2878:	1a2d      	subs	r5, r5, r0
    287a:	e696      	b.n	25aa <__aeabi_ddiv+0x2f6>
    287c:	1e8a      	subs	r2, r1, #2
    287e:	9903      	ldr	r1, [sp, #12]
    2880:	004d      	lsls	r5, r1, #1
    2882:	428d      	cmp	r5, r1
    2884:	4189      	sbcs	r1, r1
    2886:	4249      	negs	r1, r1
    2888:	4441      	add	r1, r8
    288a:	1876      	adds	r6, r6, r1
    288c:	9503      	str	r5, [sp, #12]
    288e:	e78f      	b.n	27b0 <__aeabi_ddiv+0x4fc>
    2890:	201f      	movs	r0, #31
    2892:	4240      	negs	r0, r0
    2894:	1ac3      	subs	r3, r0, r3
    2896:	4658      	mov	r0, fp
    2898:	40d8      	lsrs	r0, r3
    289a:	0003      	movs	r3, r0
    289c:	2a20      	cmp	r2, #32
    289e:	d028      	beq.n	28f2 <__aeabi_ddiv+0x63e>
    28a0:	2040      	movs	r0, #64	; 0x40
    28a2:	465d      	mov	r5, fp
    28a4:	1a82      	subs	r2, r0, r2
    28a6:	4095      	lsls	r5, r2
    28a8:	4329      	orrs	r1, r5
    28aa:	1e4a      	subs	r2, r1, #1
    28ac:	4191      	sbcs	r1, r2
    28ae:	4319      	orrs	r1, r3
    28b0:	2307      	movs	r3, #7
    28b2:	2200      	movs	r2, #0
    28b4:	400b      	ands	r3, r1
    28b6:	d009      	beq.n	28cc <__aeabi_ddiv+0x618>
    28b8:	230f      	movs	r3, #15
    28ba:	2200      	movs	r2, #0
    28bc:	400b      	ands	r3, r1
    28be:	0008      	movs	r0, r1
    28c0:	2b04      	cmp	r3, #4
    28c2:	d1bd      	bne.n	2840 <__aeabi_ddiv+0x58c>
    28c4:	0001      	movs	r1, r0
    28c6:	0753      	lsls	r3, r2, #29
    28c8:	0252      	lsls	r2, r2, #9
    28ca:	0b12      	lsrs	r2, r2, #12
    28cc:	08c9      	lsrs	r1, r1, #3
    28ce:	4319      	orrs	r1, r3
    28d0:	2301      	movs	r3, #1
    28d2:	4688      	mov	r8, r1
    28d4:	9902      	ldr	r1, [sp, #8]
    28d6:	2400      	movs	r4, #0
    28d8:	4019      	ands	r1, r3
    28da:	468c      	mov	ip, r1
    28dc:	e5b8      	b.n	2450 <__aeabi_ddiv+0x19c>
    28de:	4552      	cmp	r2, sl
    28e0:	d8be      	bhi.n	2860 <__aeabi_ddiv+0x5ac>
    28e2:	468b      	mov	fp, r1
    28e4:	2500      	movs	r5, #0
    28e6:	e660      	b.n	25aa <__aeabi_ddiv+0x2f6>
    28e8:	9d03      	ldr	r5, [sp, #12]
    28ea:	429d      	cmp	r5, r3
    28ec:	d3c6      	bcc.n	287c <__aeabi_ddiv+0x5c8>
    28ee:	0011      	movs	r1, r2
    28f0:	e762      	b.n	27b8 <__aeabi_ddiv+0x504>
    28f2:	2500      	movs	r5, #0
    28f4:	e7d8      	b.n	28a8 <__aeabi_ddiv+0x5f4>
    28f6:	2280      	movs	r2, #128	; 0x80
    28f8:	465b      	mov	r3, fp
    28fa:	0312      	lsls	r2, r2, #12
    28fc:	431a      	orrs	r2, r3
    28fe:	9b01      	ldr	r3, [sp, #4]
    2900:	0312      	lsls	r2, r2, #12
    2902:	0b12      	lsrs	r2, r2, #12
    2904:	469c      	mov	ip, r3
    2906:	4688      	mov	r8, r1
    2908:	4c03      	ldr	r4, [pc, #12]	; (2918 <__aeabi_ddiv+0x664>)
    290a:	e5a1      	b.n	2450 <__aeabi_ddiv+0x19c>
    290c:	000003ff 	.word	0x000003ff
    2910:	feffffff 	.word	0xfeffffff
    2914:	000007fe 	.word	0x000007fe
    2918:	000007ff 	.word	0x000007ff

0000291c <__aeabi_dmul>:
    291c:	b5f0      	push	{r4, r5, r6, r7, lr}
    291e:	4657      	mov	r7, sl
    2920:	4645      	mov	r5, r8
    2922:	46de      	mov	lr, fp
    2924:	464e      	mov	r6, r9
    2926:	b5e0      	push	{r5, r6, r7, lr}
    2928:	030c      	lsls	r4, r1, #12
    292a:	4698      	mov	r8, r3
    292c:	004e      	lsls	r6, r1, #1
    292e:	0b23      	lsrs	r3, r4, #12
    2930:	b087      	sub	sp, #28
    2932:	0007      	movs	r7, r0
    2934:	4692      	mov	sl, r2
    2936:	469b      	mov	fp, r3
    2938:	0d76      	lsrs	r6, r6, #21
    293a:	0fcd      	lsrs	r5, r1, #31
    293c:	2e00      	cmp	r6, #0
    293e:	d06b      	beq.n	2a18 <__aeabi_dmul+0xfc>
    2940:	4b6d      	ldr	r3, [pc, #436]	; (2af8 <__aeabi_dmul+0x1dc>)
    2942:	429e      	cmp	r6, r3
    2944:	d035      	beq.n	29b2 <__aeabi_dmul+0x96>
    2946:	2480      	movs	r4, #128	; 0x80
    2948:	465b      	mov	r3, fp
    294a:	0f42      	lsrs	r2, r0, #29
    294c:	0424      	lsls	r4, r4, #16
    294e:	00db      	lsls	r3, r3, #3
    2950:	4314      	orrs	r4, r2
    2952:	431c      	orrs	r4, r3
    2954:	00c3      	lsls	r3, r0, #3
    2956:	4699      	mov	r9, r3
    2958:	4b68      	ldr	r3, [pc, #416]	; (2afc <__aeabi_dmul+0x1e0>)
    295a:	46a3      	mov	fp, r4
    295c:	469c      	mov	ip, r3
    295e:	2300      	movs	r3, #0
    2960:	2700      	movs	r7, #0
    2962:	4466      	add	r6, ip
    2964:	9302      	str	r3, [sp, #8]
    2966:	4643      	mov	r3, r8
    2968:	031c      	lsls	r4, r3, #12
    296a:	005a      	lsls	r2, r3, #1
    296c:	0fdb      	lsrs	r3, r3, #31
    296e:	4650      	mov	r0, sl
    2970:	0b24      	lsrs	r4, r4, #12
    2972:	0d52      	lsrs	r2, r2, #21
    2974:	4698      	mov	r8, r3
    2976:	d100      	bne.n	297a <__aeabi_dmul+0x5e>
    2978:	e076      	b.n	2a68 <__aeabi_dmul+0x14c>
    297a:	4b5f      	ldr	r3, [pc, #380]	; (2af8 <__aeabi_dmul+0x1dc>)
    297c:	429a      	cmp	r2, r3
    297e:	d06d      	beq.n	2a5c <__aeabi_dmul+0x140>
    2980:	2380      	movs	r3, #128	; 0x80
    2982:	0f41      	lsrs	r1, r0, #29
    2984:	041b      	lsls	r3, r3, #16
    2986:	430b      	orrs	r3, r1
    2988:	495c      	ldr	r1, [pc, #368]	; (2afc <__aeabi_dmul+0x1e0>)
    298a:	00e4      	lsls	r4, r4, #3
    298c:	468c      	mov	ip, r1
    298e:	431c      	orrs	r4, r3
    2990:	00c3      	lsls	r3, r0, #3
    2992:	2000      	movs	r0, #0
    2994:	4462      	add	r2, ip
    2996:	4641      	mov	r1, r8
    2998:	18b6      	adds	r6, r6, r2
    299a:	4069      	eors	r1, r5
    299c:	1c72      	adds	r2, r6, #1
    299e:	9101      	str	r1, [sp, #4]
    29a0:	4694      	mov	ip, r2
    29a2:	4307      	orrs	r7, r0
    29a4:	2f0f      	cmp	r7, #15
    29a6:	d900      	bls.n	29aa <__aeabi_dmul+0x8e>
    29a8:	e0b0      	b.n	2b0c <__aeabi_dmul+0x1f0>
    29aa:	4a55      	ldr	r2, [pc, #340]	; (2b00 <__aeabi_dmul+0x1e4>)
    29ac:	00bf      	lsls	r7, r7, #2
    29ae:	59d2      	ldr	r2, [r2, r7]
    29b0:	4697      	mov	pc, r2
    29b2:	465b      	mov	r3, fp
    29b4:	4303      	orrs	r3, r0
    29b6:	4699      	mov	r9, r3
    29b8:	d000      	beq.n	29bc <__aeabi_dmul+0xa0>
    29ba:	e087      	b.n	2acc <__aeabi_dmul+0x1b0>
    29bc:	2300      	movs	r3, #0
    29be:	469b      	mov	fp, r3
    29c0:	3302      	adds	r3, #2
    29c2:	2708      	movs	r7, #8
    29c4:	9302      	str	r3, [sp, #8]
    29c6:	e7ce      	b.n	2966 <__aeabi_dmul+0x4a>
    29c8:	4642      	mov	r2, r8
    29ca:	9201      	str	r2, [sp, #4]
    29cc:	2802      	cmp	r0, #2
    29ce:	d067      	beq.n	2aa0 <__aeabi_dmul+0x184>
    29d0:	2803      	cmp	r0, #3
    29d2:	d100      	bne.n	29d6 <__aeabi_dmul+0xba>
    29d4:	e20e      	b.n	2df4 <__aeabi_dmul+0x4d8>
    29d6:	2801      	cmp	r0, #1
    29d8:	d000      	beq.n	29dc <__aeabi_dmul+0xc0>
    29da:	e162      	b.n	2ca2 <__aeabi_dmul+0x386>
    29dc:	2300      	movs	r3, #0
    29de:	2400      	movs	r4, #0
    29e0:	2200      	movs	r2, #0
    29e2:	4699      	mov	r9, r3
    29e4:	9901      	ldr	r1, [sp, #4]
    29e6:	4001      	ands	r1, r0
    29e8:	b2cd      	uxtb	r5, r1
    29ea:	2100      	movs	r1, #0
    29ec:	0312      	lsls	r2, r2, #12
    29ee:	0d0b      	lsrs	r3, r1, #20
    29f0:	0b12      	lsrs	r2, r2, #12
    29f2:	051b      	lsls	r3, r3, #20
    29f4:	4313      	orrs	r3, r2
    29f6:	4a43      	ldr	r2, [pc, #268]	; (2b04 <__aeabi_dmul+0x1e8>)
    29f8:	0524      	lsls	r4, r4, #20
    29fa:	4013      	ands	r3, r2
    29fc:	431c      	orrs	r4, r3
    29fe:	0064      	lsls	r4, r4, #1
    2a00:	07ed      	lsls	r5, r5, #31
    2a02:	0864      	lsrs	r4, r4, #1
    2a04:	432c      	orrs	r4, r5
    2a06:	4648      	mov	r0, r9
    2a08:	0021      	movs	r1, r4
    2a0a:	b007      	add	sp, #28
    2a0c:	bc3c      	pop	{r2, r3, r4, r5}
    2a0e:	4690      	mov	r8, r2
    2a10:	4699      	mov	r9, r3
    2a12:	46a2      	mov	sl, r4
    2a14:	46ab      	mov	fp, r5
    2a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a18:	4303      	orrs	r3, r0
    2a1a:	4699      	mov	r9, r3
    2a1c:	d04f      	beq.n	2abe <__aeabi_dmul+0x1a2>
    2a1e:	465b      	mov	r3, fp
    2a20:	2b00      	cmp	r3, #0
    2a22:	d100      	bne.n	2a26 <__aeabi_dmul+0x10a>
    2a24:	e189      	b.n	2d3a <__aeabi_dmul+0x41e>
    2a26:	4658      	mov	r0, fp
    2a28:	f000 fdb8 	bl	359c <__clzsi2>
    2a2c:	0003      	movs	r3, r0
    2a2e:	3b0b      	subs	r3, #11
    2a30:	2b1c      	cmp	r3, #28
    2a32:	dd00      	ble.n	2a36 <__aeabi_dmul+0x11a>
    2a34:	e17a      	b.n	2d2c <__aeabi_dmul+0x410>
    2a36:	221d      	movs	r2, #29
    2a38:	1ad3      	subs	r3, r2, r3
    2a3a:	003a      	movs	r2, r7
    2a3c:	0001      	movs	r1, r0
    2a3e:	465c      	mov	r4, fp
    2a40:	40da      	lsrs	r2, r3
    2a42:	3908      	subs	r1, #8
    2a44:	408c      	lsls	r4, r1
    2a46:	0013      	movs	r3, r2
    2a48:	408f      	lsls	r7, r1
    2a4a:	4323      	orrs	r3, r4
    2a4c:	469b      	mov	fp, r3
    2a4e:	46b9      	mov	r9, r7
    2a50:	2300      	movs	r3, #0
    2a52:	4e2d      	ldr	r6, [pc, #180]	; (2b08 <__aeabi_dmul+0x1ec>)
    2a54:	2700      	movs	r7, #0
    2a56:	1a36      	subs	r6, r6, r0
    2a58:	9302      	str	r3, [sp, #8]
    2a5a:	e784      	b.n	2966 <__aeabi_dmul+0x4a>
    2a5c:	4653      	mov	r3, sl
    2a5e:	4323      	orrs	r3, r4
    2a60:	d12a      	bne.n	2ab8 <__aeabi_dmul+0x19c>
    2a62:	2400      	movs	r4, #0
    2a64:	2002      	movs	r0, #2
    2a66:	e796      	b.n	2996 <__aeabi_dmul+0x7a>
    2a68:	4653      	mov	r3, sl
    2a6a:	4323      	orrs	r3, r4
    2a6c:	d020      	beq.n	2ab0 <__aeabi_dmul+0x194>
    2a6e:	2c00      	cmp	r4, #0
    2a70:	d100      	bne.n	2a74 <__aeabi_dmul+0x158>
    2a72:	e157      	b.n	2d24 <__aeabi_dmul+0x408>
    2a74:	0020      	movs	r0, r4
    2a76:	f000 fd91 	bl	359c <__clzsi2>
    2a7a:	0003      	movs	r3, r0
    2a7c:	3b0b      	subs	r3, #11
    2a7e:	2b1c      	cmp	r3, #28
    2a80:	dd00      	ble.n	2a84 <__aeabi_dmul+0x168>
    2a82:	e149      	b.n	2d18 <__aeabi_dmul+0x3fc>
    2a84:	211d      	movs	r1, #29
    2a86:	1acb      	subs	r3, r1, r3
    2a88:	4651      	mov	r1, sl
    2a8a:	0002      	movs	r2, r0
    2a8c:	40d9      	lsrs	r1, r3
    2a8e:	4653      	mov	r3, sl
    2a90:	3a08      	subs	r2, #8
    2a92:	4094      	lsls	r4, r2
    2a94:	4093      	lsls	r3, r2
    2a96:	430c      	orrs	r4, r1
    2a98:	4a1b      	ldr	r2, [pc, #108]	; (2b08 <__aeabi_dmul+0x1ec>)
    2a9a:	1a12      	subs	r2, r2, r0
    2a9c:	2000      	movs	r0, #0
    2a9e:	e77a      	b.n	2996 <__aeabi_dmul+0x7a>
    2aa0:	2501      	movs	r5, #1
    2aa2:	9b01      	ldr	r3, [sp, #4]
    2aa4:	4c14      	ldr	r4, [pc, #80]	; (2af8 <__aeabi_dmul+0x1dc>)
    2aa6:	401d      	ands	r5, r3
    2aa8:	2300      	movs	r3, #0
    2aaa:	2200      	movs	r2, #0
    2aac:	4699      	mov	r9, r3
    2aae:	e79c      	b.n	29ea <__aeabi_dmul+0xce>
    2ab0:	2400      	movs	r4, #0
    2ab2:	2200      	movs	r2, #0
    2ab4:	2001      	movs	r0, #1
    2ab6:	e76e      	b.n	2996 <__aeabi_dmul+0x7a>
    2ab8:	4653      	mov	r3, sl
    2aba:	2003      	movs	r0, #3
    2abc:	e76b      	b.n	2996 <__aeabi_dmul+0x7a>
    2abe:	2300      	movs	r3, #0
    2ac0:	469b      	mov	fp, r3
    2ac2:	3301      	adds	r3, #1
    2ac4:	2704      	movs	r7, #4
    2ac6:	2600      	movs	r6, #0
    2ac8:	9302      	str	r3, [sp, #8]
    2aca:	e74c      	b.n	2966 <__aeabi_dmul+0x4a>
    2acc:	2303      	movs	r3, #3
    2ace:	4681      	mov	r9, r0
    2ad0:	270c      	movs	r7, #12
    2ad2:	9302      	str	r3, [sp, #8]
    2ad4:	e747      	b.n	2966 <__aeabi_dmul+0x4a>
    2ad6:	2280      	movs	r2, #128	; 0x80
    2ad8:	2300      	movs	r3, #0
    2ada:	2500      	movs	r5, #0
    2adc:	0312      	lsls	r2, r2, #12
    2ade:	4699      	mov	r9, r3
    2ae0:	4c05      	ldr	r4, [pc, #20]	; (2af8 <__aeabi_dmul+0x1dc>)
    2ae2:	e782      	b.n	29ea <__aeabi_dmul+0xce>
    2ae4:	465c      	mov	r4, fp
    2ae6:	464b      	mov	r3, r9
    2ae8:	9802      	ldr	r0, [sp, #8]
    2aea:	e76f      	b.n	29cc <__aeabi_dmul+0xb0>
    2aec:	465c      	mov	r4, fp
    2aee:	464b      	mov	r3, r9
    2af0:	9501      	str	r5, [sp, #4]
    2af2:	9802      	ldr	r0, [sp, #8]
    2af4:	e76a      	b.n	29cc <__aeabi_dmul+0xb0>
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	000007ff 	.word	0x000007ff
    2afc:	fffffc01 	.word	0xfffffc01
    2b00:	00003a50 	.word	0x00003a50
    2b04:	800fffff 	.word	0x800fffff
    2b08:	fffffc0d 	.word	0xfffffc0d
    2b0c:	464a      	mov	r2, r9
    2b0e:	4649      	mov	r1, r9
    2b10:	0c17      	lsrs	r7, r2, #16
    2b12:	0c1a      	lsrs	r2, r3, #16
    2b14:	041b      	lsls	r3, r3, #16
    2b16:	0c1b      	lsrs	r3, r3, #16
    2b18:	0408      	lsls	r0, r1, #16
    2b1a:	0019      	movs	r1, r3
    2b1c:	0c00      	lsrs	r0, r0, #16
    2b1e:	4341      	muls	r1, r0
    2b20:	0015      	movs	r5, r2
    2b22:	4688      	mov	r8, r1
    2b24:	0019      	movs	r1, r3
    2b26:	437d      	muls	r5, r7
    2b28:	4379      	muls	r1, r7
    2b2a:	9503      	str	r5, [sp, #12]
    2b2c:	4689      	mov	r9, r1
    2b2e:	0029      	movs	r1, r5
    2b30:	0015      	movs	r5, r2
    2b32:	4345      	muls	r5, r0
    2b34:	444d      	add	r5, r9
    2b36:	9502      	str	r5, [sp, #8]
    2b38:	4645      	mov	r5, r8
    2b3a:	0c2d      	lsrs	r5, r5, #16
    2b3c:	46aa      	mov	sl, r5
    2b3e:	9d02      	ldr	r5, [sp, #8]
    2b40:	4455      	add	r5, sl
    2b42:	45a9      	cmp	r9, r5
    2b44:	d906      	bls.n	2b54 <__aeabi_dmul+0x238>
    2b46:	468a      	mov	sl, r1
    2b48:	2180      	movs	r1, #128	; 0x80
    2b4a:	0249      	lsls	r1, r1, #9
    2b4c:	4689      	mov	r9, r1
    2b4e:	44ca      	add	sl, r9
    2b50:	4651      	mov	r1, sl
    2b52:	9103      	str	r1, [sp, #12]
    2b54:	0c29      	lsrs	r1, r5, #16
    2b56:	9104      	str	r1, [sp, #16]
    2b58:	4641      	mov	r1, r8
    2b5a:	0409      	lsls	r1, r1, #16
    2b5c:	042d      	lsls	r5, r5, #16
    2b5e:	0c09      	lsrs	r1, r1, #16
    2b60:	4688      	mov	r8, r1
    2b62:	0029      	movs	r1, r5
    2b64:	0c25      	lsrs	r5, r4, #16
    2b66:	0424      	lsls	r4, r4, #16
    2b68:	4441      	add	r1, r8
    2b6a:	0c24      	lsrs	r4, r4, #16
    2b6c:	9105      	str	r1, [sp, #20]
    2b6e:	0021      	movs	r1, r4
    2b70:	4341      	muls	r1, r0
    2b72:	4688      	mov	r8, r1
    2b74:	0021      	movs	r1, r4
    2b76:	4379      	muls	r1, r7
    2b78:	468a      	mov	sl, r1
    2b7a:	4368      	muls	r0, r5
    2b7c:	4641      	mov	r1, r8
    2b7e:	4450      	add	r0, sl
    2b80:	4681      	mov	r9, r0
    2b82:	0c08      	lsrs	r0, r1, #16
    2b84:	4448      	add	r0, r9
    2b86:	436f      	muls	r7, r5
    2b88:	4582      	cmp	sl, r0
    2b8a:	d903      	bls.n	2b94 <__aeabi_dmul+0x278>
    2b8c:	2180      	movs	r1, #128	; 0x80
    2b8e:	0249      	lsls	r1, r1, #9
    2b90:	4689      	mov	r9, r1
    2b92:	444f      	add	r7, r9
    2b94:	0c01      	lsrs	r1, r0, #16
    2b96:	4689      	mov	r9, r1
    2b98:	0039      	movs	r1, r7
    2b9a:	4449      	add	r1, r9
    2b9c:	9102      	str	r1, [sp, #8]
    2b9e:	4641      	mov	r1, r8
    2ba0:	040f      	lsls	r7, r1, #16
    2ba2:	9904      	ldr	r1, [sp, #16]
    2ba4:	0c3f      	lsrs	r7, r7, #16
    2ba6:	4688      	mov	r8, r1
    2ba8:	0400      	lsls	r0, r0, #16
    2baa:	19c0      	adds	r0, r0, r7
    2bac:	4480      	add	r8, r0
    2bae:	4641      	mov	r1, r8
    2bb0:	9104      	str	r1, [sp, #16]
    2bb2:	4659      	mov	r1, fp
    2bb4:	0c0f      	lsrs	r7, r1, #16
    2bb6:	0409      	lsls	r1, r1, #16
    2bb8:	0c09      	lsrs	r1, r1, #16
    2bba:	4688      	mov	r8, r1
    2bbc:	4359      	muls	r1, r3
    2bbe:	468a      	mov	sl, r1
    2bc0:	0039      	movs	r1, r7
    2bc2:	4351      	muls	r1, r2
    2bc4:	4689      	mov	r9, r1
    2bc6:	4641      	mov	r1, r8
    2bc8:	434a      	muls	r2, r1
    2bca:	4651      	mov	r1, sl
    2bcc:	0c09      	lsrs	r1, r1, #16
    2bce:	468b      	mov	fp, r1
    2bd0:	437b      	muls	r3, r7
    2bd2:	18d2      	adds	r2, r2, r3
    2bd4:	445a      	add	r2, fp
    2bd6:	4293      	cmp	r3, r2
    2bd8:	d903      	bls.n	2be2 <__aeabi_dmul+0x2c6>
    2bda:	2380      	movs	r3, #128	; 0x80
    2bdc:	025b      	lsls	r3, r3, #9
    2bde:	469b      	mov	fp, r3
    2be0:	44d9      	add	r9, fp
    2be2:	4651      	mov	r1, sl
    2be4:	0409      	lsls	r1, r1, #16
    2be6:	0c09      	lsrs	r1, r1, #16
    2be8:	468a      	mov	sl, r1
    2bea:	4641      	mov	r1, r8
    2bec:	4361      	muls	r1, r4
    2bee:	437c      	muls	r4, r7
    2bf0:	0c13      	lsrs	r3, r2, #16
    2bf2:	0412      	lsls	r2, r2, #16
    2bf4:	444b      	add	r3, r9
    2bf6:	4452      	add	r2, sl
    2bf8:	46a1      	mov	r9, r4
    2bfa:	468a      	mov	sl, r1
    2bfc:	003c      	movs	r4, r7
    2bfe:	4641      	mov	r1, r8
    2c00:	436c      	muls	r4, r5
    2c02:	434d      	muls	r5, r1
    2c04:	4651      	mov	r1, sl
    2c06:	444d      	add	r5, r9
    2c08:	0c0f      	lsrs	r7, r1, #16
    2c0a:	197d      	adds	r5, r7, r5
    2c0c:	45a9      	cmp	r9, r5
    2c0e:	d903      	bls.n	2c18 <__aeabi_dmul+0x2fc>
    2c10:	2180      	movs	r1, #128	; 0x80
    2c12:	0249      	lsls	r1, r1, #9
    2c14:	4688      	mov	r8, r1
    2c16:	4444      	add	r4, r8
    2c18:	9f04      	ldr	r7, [sp, #16]
    2c1a:	9903      	ldr	r1, [sp, #12]
    2c1c:	46b8      	mov	r8, r7
    2c1e:	4441      	add	r1, r8
    2c20:	468b      	mov	fp, r1
    2c22:	4583      	cmp	fp, r0
    2c24:	4180      	sbcs	r0, r0
    2c26:	4241      	negs	r1, r0
    2c28:	4688      	mov	r8, r1
    2c2a:	4651      	mov	r1, sl
    2c2c:	0408      	lsls	r0, r1, #16
    2c2e:	042f      	lsls	r7, r5, #16
    2c30:	0c00      	lsrs	r0, r0, #16
    2c32:	183f      	adds	r7, r7, r0
    2c34:	4658      	mov	r0, fp
    2c36:	9902      	ldr	r1, [sp, #8]
    2c38:	1810      	adds	r0, r2, r0
    2c3a:	4689      	mov	r9, r1
    2c3c:	4290      	cmp	r0, r2
    2c3e:	4192      	sbcs	r2, r2
    2c40:	444f      	add	r7, r9
    2c42:	46ba      	mov	sl, r7
    2c44:	4252      	negs	r2, r2
    2c46:	4699      	mov	r9, r3
    2c48:	4693      	mov	fp, r2
    2c4a:	44c2      	add	sl, r8
    2c4c:	44d1      	add	r9, sl
    2c4e:	44cb      	add	fp, r9
    2c50:	428f      	cmp	r7, r1
    2c52:	41bf      	sbcs	r7, r7
    2c54:	45c2      	cmp	sl, r8
    2c56:	4189      	sbcs	r1, r1
    2c58:	4599      	cmp	r9, r3
    2c5a:	419b      	sbcs	r3, r3
    2c5c:	4593      	cmp	fp, r2
    2c5e:	4192      	sbcs	r2, r2
    2c60:	427f      	negs	r7, r7
    2c62:	4249      	negs	r1, r1
    2c64:	0c2d      	lsrs	r5, r5, #16
    2c66:	4252      	negs	r2, r2
    2c68:	430f      	orrs	r7, r1
    2c6a:	425b      	negs	r3, r3
    2c6c:	4313      	orrs	r3, r2
    2c6e:	197f      	adds	r7, r7, r5
    2c70:	18ff      	adds	r7, r7, r3
    2c72:	465b      	mov	r3, fp
    2c74:	193c      	adds	r4, r7, r4
    2c76:	0ddb      	lsrs	r3, r3, #23
    2c78:	9a05      	ldr	r2, [sp, #20]
    2c7a:	0264      	lsls	r4, r4, #9
    2c7c:	431c      	orrs	r4, r3
    2c7e:	0243      	lsls	r3, r0, #9
    2c80:	4313      	orrs	r3, r2
    2c82:	1e5d      	subs	r5, r3, #1
    2c84:	41ab      	sbcs	r3, r5
    2c86:	465a      	mov	r2, fp
    2c88:	0dc0      	lsrs	r0, r0, #23
    2c8a:	4303      	orrs	r3, r0
    2c8c:	0252      	lsls	r2, r2, #9
    2c8e:	4313      	orrs	r3, r2
    2c90:	01e2      	lsls	r2, r4, #7
    2c92:	d556      	bpl.n	2d42 <__aeabi_dmul+0x426>
    2c94:	2001      	movs	r0, #1
    2c96:	085a      	lsrs	r2, r3, #1
    2c98:	4003      	ands	r3, r0
    2c9a:	4313      	orrs	r3, r2
    2c9c:	07e2      	lsls	r2, r4, #31
    2c9e:	4313      	orrs	r3, r2
    2ca0:	0864      	lsrs	r4, r4, #1
    2ca2:	485a      	ldr	r0, [pc, #360]	; (2e0c <__aeabi_dmul+0x4f0>)
    2ca4:	4460      	add	r0, ip
    2ca6:	2800      	cmp	r0, #0
    2ca8:	dd4d      	ble.n	2d46 <__aeabi_dmul+0x42a>
    2caa:	075a      	lsls	r2, r3, #29
    2cac:	d009      	beq.n	2cc2 <__aeabi_dmul+0x3a6>
    2cae:	220f      	movs	r2, #15
    2cb0:	401a      	ands	r2, r3
    2cb2:	2a04      	cmp	r2, #4
    2cb4:	d005      	beq.n	2cc2 <__aeabi_dmul+0x3a6>
    2cb6:	1d1a      	adds	r2, r3, #4
    2cb8:	429a      	cmp	r2, r3
    2cba:	419b      	sbcs	r3, r3
    2cbc:	425b      	negs	r3, r3
    2cbe:	18e4      	adds	r4, r4, r3
    2cc0:	0013      	movs	r3, r2
    2cc2:	01e2      	lsls	r2, r4, #7
    2cc4:	d504      	bpl.n	2cd0 <__aeabi_dmul+0x3b4>
    2cc6:	2080      	movs	r0, #128	; 0x80
    2cc8:	4a51      	ldr	r2, [pc, #324]	; (2e10 <__aeabi_dmul+0x4f4>)
    2cca:	00c0      	lsls	r0, r0, #3
    2ccc:	4014      	ands	r4, r2
    2cce:	4460      	add	r0, ip
    2cd0:	4a50      	ldr	r2, [pc, #320]	; (2e14 <__aeabi_dmul+0x4f8>)
    2cd2:	4290      	cmp	r0, r2
    2cd4:	dd00      	ble.n	2cd8 <__aeabi_dmul+0x3bc>
    2cd6:	e6e3      	b.n	2aa0 <__aeabi_dmul+0x184>
    2cd8:	2501      	movs	r5, #1
    2cda:	08db      	lsrs	r3, r3, #3
    2cdc:	0762      	lsls	r2, r4, #29
    2cde:	431a      	orrs	r2, r3
    2ce0:	0264      	lsls	r4, r4, #9
    2ce2:	9b01      	ldr	r3, [sp, #4]
    2ce4:	4691      	mov	r9, r2
    2ce6:	0b22      	lsrs	r2, r4, #12
    2ce8:	0544      	lsls	r4, r0, #21
    2cea:	0d64      	lsrs	r4, r4, #21
    2cec:	401d      	ands	r5, r3
    2cee:	e67c      	b.n	29ea <__aeabi_dmul+0xce>
    2cf0:	2280      	movs	r2, #128	; 0x80
    2cf2:	4659      	mov	r1, fp
    2cf4:	0312      	lsls	r2, r2, #12
    2cf6:	4211      	tst	r1, r2
    2cf8:	d008      	beq.n	2d0c <__aeabi_dmul+0x3f0>
    2cfa:	4214      	tst	r4, r2
    2cfc:	d106      	bne.n	2d0c <__aeabi_dmul+0x3f0>
    2cfe:	4322      	orrs	r2, r4
    2d00:	0312      	lsls	r2, r2, #12
    2d02:	0b12      	lsrs	r2, r2, #12
    2d04:	4645      	mov	r5, r8
    2d06:	4699      	mov	r9, r3
    2d08:	4c43      	ldr	r4, [pc, #268]	; (2e18 <__aeabi_dmul+0x4fc>)
    2d0a:	e66e      	b.n	29ea <__aeabi_dmul+0xce>
    2d0c:	465b      	mov	r3, fp
    2d0e:	431a      	orrs	r2, r3
    2d10:	0312      	lsls	r2, r2, #12
    2d12:	0b12      	lsrs	r2, r2, #12
    2d14:	4c40      	ldr	r4, [pc, #256]	; (2e18 <__aeabi_dmul+0x4fc>)
    2d16:	e668      	b.n	29ea <__aeabi_dmul+0xce>
    2d18:	0003      	movs	r3, r0
    2d1a:	4654      	mov	r4, sl
    2d1c:	3b28      	subs	r3, #40	; 0x28
    2d1e:	409c      	lsls	r4, r3
    2d20:	2300      	movs	r3, #0
    2d22:	e6b9      	b.n	2a98 <__aeabi_dmul+0x17c>
    2d24:	f000 fc3a 	bl	359c <__clzsi2>
    2d28:	3020      	adds	r0, #32
    2d2a:	e6a6      	b.n	2a7a <__aeabi_dmul+0x15e>
    2d2c:	0003      	movs	r3, r0
    2d2e:	3b28      	subs	r3, #40	; 0x28
    2d30:	409f      	lsls	r7, r3
    2d32:	2300      	movs	r3, #0
    2d34:	46bb      	mov	fp, r7
    2d36:	4699      	mov	r9, r3
    2d38:	e68a      	b.n	2a50 <__aeabi_dmul+0x134>
    2d3a:	f000 fc2f 	bl	359c <__clzsi2>
    2d3e:	3020      	adds	r0, #32
    2d40:	e674      	b.n	2a2c <__aeabi_dmul+0x110>
    2d42:	46b4      	mov	ip, r6
    2d44:	e7ad      	b.n	2ca2 <__aeabi_dmul+0x386>
    2d46:	2501      	movs	r5, #1
    2d48:	1a2a      	subs	r2, r5, r0
    2d4a:	2a38      	cmp	r2, #56	; 0x38
    2d4c:	dd06      	ble.n	2d5c <__aeabi_dmul+0x440>
    2d4e:	9b01      	ldr	r3, [sp, #4]
    2d50:	2400      	movs	r4, #0
    2d52:	401d      	ands	r5, r3
    2d54:	2300      	movs	r3, #0
    2d56:	2200      	movs	r2, #0
    2d58:	4699      	mov	r9, r3
    2d5a:	e646      	b.n	29ea <__aeabi_dmul+0xce>
    2d5c:	2a1f      	cmp	r2, #31
    2d5e:	dc21      	bgt.n	2da4 <__aeabi_dmul+0x488>
    2d60:	2520      	movs	r5, #32
    2d62:	0020      	movs	r0, r4
    2d64:	1aad      	subs	r5, r5, r2
    2d66:	001e      	movs	r6, r3
    2d68:	40ab      	lsls	r3, r5
    2d6a:	40a8      	lsls	r0, r5
    2d6c:	40d6      	lsrs	r6, r2
    2d6e:	1e5d      	subs	r5, r3, #1
    2d70:	41ab      	sbcs	r3, r5
    2d72:	4330      	orrs	r0, r6
    2d74:	4318      	orrs	r0, r3
    2d76:	40d4      	lsrs	r4, r2
    2d78:	0743      	lsls	r3, r0, #29
    2d7a:	d009      	beq.n	2d90 <__aeabi_dmul+0x474>
    2d7c:	230f      	movs	r3, #15
    2d7e:	4003      	ands	r3, r0
    2d80:	2b04      	cmp	r3, #4
    2d82:	d005      	beq.n	2d90 <__aeabi_dmul+0x474>
    2d84:	0003      	movs	r3, r0
    2d86:	1d18      	adds	r0, r3, #4
    2d88:	4298      	cmp	r0, r3
    2d8a:	419b      	sbcs	r3, r3
    2d8c:	425b      	negs	r3, r3
    2d8e:	18e4      	adds	r4, r4, r3
    2d90:	0223      	lsls	r3, r4, #8
    2d92:	d521      	bpl.n	2dd8 <__aeabi_dmul+0x4bc>
    2d94:	2501      	movs	r5, #1
    2d96:	9b01      	ldr	r3, [sp, #4]
    2d98:	2401      	movs	r4, #1
    2d9a:	401d      	ands	r5, r3
    2d9c:	2300      	movs	r3, #0
    2d9e:	2200      	movs	r2, #0
    2da0:	4699      	mov	r9, r3
    2da2:	e622      	b.n	29ea <__aeabi_dmul+0xce>
    2da4:	251f      	movs	r5, #31
    2da6:	0021      	movs	r1, r4
    2da8:	426d      	negs	r5, r5
    2daa:	1a28      	subs	r0, r5, r0
    2dac:	40c1      	lsrs	r1, r0
    2dae:	0008      	movs	r0, r1
    2db0:	2a20      	cmp	r2, #32
    2db2:	d01d      	beq.n	2df0 <__aeabi_dmul+0x4d4>
    2db4:	355f      	adds	r5, #95	; 0x5f
    2db6:	1aaa      	subs	r2, r5, r2
    2db8:	4094      	lsls	r4, r2
    2dba:	4323      	orrs	r3, r4
    2dbc:	1e5c      	subs	r4, r3, #1
    2dbe:	41a3      	sbcs	r3, r4
    2dc0:	2507      	movs	r5, #7
    2dc2:	4303      	orrs	r3, r0
    2dc4:	401d      	ands	r5, r3
    2dc6:	2200      	movs	r2, #0
    2dc8:	2d00      	cmp	r5, #0
    2dca:	d009      	beq.n	2de0 <__aeabi_dmul+0x4c4>
    2dcc:	220f      	movs	r2, #15
    2dce:	2400      	movs	r4, #0
    2dd0:	401a      	ands	r2, r3
    2dd2:	0018      	movs	r0, r3
    2dd4:	2a04      	cmp	r2, #4
    2dd6:	d1d6      	bne.n	2d86 <__aeabi_dmul+0x46a>
    2dd8:	0003      	movs	r3, r0
    2dda:	0765      	lsls	r5, r4, #29
    2ddc:	0264      	lsls	r4, r4, #9
    2dde:	0b22      	lsrs	r2, r4, #12
    2de0:	08db      	lsrs	r3, r3, #3
    2de2:	432b      	orrs	r3, r5
    2de4:	2501      	movs	r5, #1
    2de6:	4699      	mov	r9, r3
    2de8:	9b01      	ldr	r3, [sp, #4]
    2dea:	2400      	movs	r4, #0
    2dec:	401d      	ands	r5, r3
    2dee:	e5fc      	b.n	29ea <__aeabi_dmul+0xce>
    2df0:	2400      	movs	r4, #0
    2df2:	e7e2      	b.n	2dba <__aeabi_dmul+0x49e>
    2df4:	2280      	movs	r2, #128	; 0x80
    2df6:	2501      	movs	r5, #1
    2df8:	0312      	lsls	r2, r2, #12
    2dfa:	4322      	orrs	r2, r4
    2dfc:	9901      	ldr	r1, [sp, #4]
    2dfe:	0312      	lsls	r2, r2, #12
    2e00:	0b12      	lsrs	r2, r2, #12
    2e02:	400d      	ands	r5, r1
    2e04:	4699      	mov	r9, r3
    2e06:	4c04      	ldr	r4, [pc, #16]	; (2e18 <__aeabi_dmul+0x4fc>)
    2e08:	e5ef      	b.n	29ea <__aeabi_dmul+0xce>
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	000003ff 	.word	0x000003ff
    2e10:	feffffff 	.word	0xfeffffff
    2e14:	000007fe 	.word	0x000007fe
    2e18:	000007ff 	.word	0x000007ff

00002e1c <__aeabi_dsub>:
    2e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e1e:	4646      	mov	r6, r8
    2e20:	46d6      	mov	lr, sl
    2e22:	464f      	mov	r7, r9
    2e24:	030c      	lsls	r4, r1, #12
    2e26:	b5c0      	push	{r6, r7, lr}
    2e28:	0fcd      	lsrs	r5, r1, #31
    2e2a:	004e      	lsls	r6, r1, #1
    2e2c:	0a61      	lsrs	r1, r4, #9
    2e2e:	0f44      	lsrs	r4, r0, #29
    2e30:	430c      	orrs	r4, r1
    2e32:	00c1      	lsls	r1, r0, #3
    2e34:	0058      	lsls	r0, r3, #1
    2e36:	0d40      	lsrs	r0, r0, #21
    2e38:	4684      	mov	ip, r0
    2e3a:	468a      	mov	sl, r1
    2e3c:	000f      	movs	r7, r1
    2e3e:	0319      	lsls	r1, r3, #12
    2e40:	0f50      	lsrs	r0, r2, #29
    2e42:	0a49      	lsrs	r1, r1, #9
    2e44:	4301      	orrs	r1, r0
    2e46:	48c6      	ldr	r0, [pc, #792]	; (3160 <__aeabi_dsub+0x344>)
    2e48:	0d76      	lsrs	r6, r6, #21
    2e4a:	46a8      	mov	r8, r5
    2e4c:	0fdb      	lsrs	r3, r3, #31
    2e4e:	00d2      	lsls	r2, r2, #3
    2e50:	4584      	cmp	ip, r0
    2e52:	d100      	bne.n	2e56 <__aeabi_dsub+0x3a>
    2e54:	e0d8      	b.n	3008 <__aeabi_dsub+0x1ec>
    2e56:	2001      	movs	r0, #1
    2e58:	4043      	eors	r3, r0
    2e5a:	42ab      	cmp	r3, r5
    2e5c:	d100      	bne.n	2e60 <__aeabi_dsub+0x44>
    2e5e:	e0a6      	b.n	2fae <__aeabi_dsub+0x192>
    2e60:	4660      	mov	r0, ip
    2e62:	1a35      	subs	r5, r6, r0
    2e64:	2d00      	cmp	r5, #0
    2e66:	dc00      	bgt.n	2e6a <__aeabi_dsub+0x4e>
    2e68:	e105      	b.n	3076 <__aeabi_dsub+0x25a>
    2e6a:	2800      	cmp	r0, #0
    2e6c:	d110      	bne.n	2e90 <__aeabi_dsub+0x74>
    2e6e:	000b      	movs	r3, r1
    2e70:	4313      	orrs	r3, r2
    2e72:	d100      	bne.n	2e76 <__aeabi_dsub+0x5a>
    2e74:	e0d7      	b.n	3026 <__aeabi_dsub+0x20a>
    2e76:	1e6b      	subs	r3, r5, #1
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d000      	beq.n	2e7e <__aeabi_dsub+0x62>
    2e7c:	e14b      	b.n	3116 <__aeabi_dsub+0x2fa>
    2e7e:	4653      	mov	r3, sl
    2e80:	1a9f      	subs	r7, r3, r2
    2e82:	45ba      	cmp	sl, r7
    2e84:	4180      	sbcs	r0, r0
    2e86:	1a64      	subs	r4, r4, r1
    2e88:	4240      	negs	r0, r0
    2e8a:	1a24      	subs	r4, r4, r0
    2e8c:	2601      	movs	r6, #1
    2e8e:	e01e      	b.n	2ece <__aeabi_dsub+0xb2>
    2e90:	4bb3      	ldr	r3, [pc, #716]	; (3160 <__aeabi_dsub+0x344>)
    2e92:	429e      	cmp	r6, r3
    2e94:	d048      	beq.n	2f28 <__aeabi_dsub+0x10c>
    2e96:	2380      	movs	r3, #128	; 0x80
    2e98:	041b      	lsls	r3, r3, #16
    2e9a:	4319      	orrs	r1, r3
    2e9c:	2d38      	cmp	r5, #56	; 0x38
    2e9e:	dd00      	ble.n	2ea2 <__aeabi_dsub+0x86>
    2ea0:	e119      	b.n	30d6 <__aeabi_dsub+0x2ba>
    2ea2:	2d1f      	cmp	r5, #31
    2ea4:	dd00      	ble.n	2ea8 <__aeabi_dsub+0x8c>
    2ea6:	e14c      	b.n	3142 <__aeabi_dsub+0x326>
    2ea8:	2320      	movs	r3, #32
    2eaa:	000f      	movs	r7, r1
    2eac:	1b5b      	subs	r3, r3, r5
    2eae:	0010      	movs	r0, r2
    2eb0:	409a      	lsls	r2, r3
    2eb2:	409f      	lsls	r7, r3
    2eb4:	40e8      	lsrs	r0, r5
    2eb6:	1e53      	subs	r3, r2, #1
    2eb8:	419a      	sbcs	r2, r3
    2eba:	40e9      	lsrs	r1, r5
    2ebc:	4307      	orrs	r7, r0
    2ebe:	4317      	orrs	r7, r2
    2ec0:	4653      	mov	r3, sl
    2ec2:	1bdf      	subs	r7, r3, r7
    2ec4:	1a61      	subs	r1, r4, r1
    2ec6:	45ba      	cmp	sl, r7
    2ec8:	41a4      	sbcs	r4, r4
    2eca:	4264      	negs	r4, r4
    2ecc:	1b0c      	subs	r4, r1, r4
    2ece:	0223      	lsls	r3, r4, #8
    2ed0:	d400      	bmi.n	2ed4 <__aeabi_dsub+0xb8>
    2ed2:	e0c5      	b.n	3060 <__aeabi_dsub+0x244>
    2ed4:	0264      	lsls	r4, r4, #9
    2ed6:	0a65      	lsrs	r5, r4, #9
    2ed8:	2d00      	cmp	r5, #0
    2eda:	d100      	bne.n	2ede <__aeabi_dsub+0xc2>
    2edc:	e0f6      	b.n	30cc <__aeabi_dsub+0x2b0>
    2ede:	0028      	movs	r0, r5
    2ee0:	f000 fb5c 	bl	359c <__clzsi2>
    2ee4:	0003      	movs	r3, r0
    2ee6:	3b08      	subs	r3, #8
    2ee8:	2b1f      	cmp	r3, #31
    2eea:	dd00      	ble.n	2eee <__aeabi_dsub+0xd2>
    2eec:	e0e9      	b.n	30c2 <__aeabi_dsub+0x2a6>
    2eee:	2220      	movs	r2, #32
    2ef0:	003c      	movs	r4, r7
    2ef2:	1ad2      	subs	r2, r2, r3
    2ef4:	409d      	lsls	r5, r3
    2ef6:	40d4      	lsrs	r4, r2
    2ef8:	409f      	lsls	r7, r3
    2efa:	4325      	orrs	r5, r4
    2efc:	429e      	cmp	r6, r3
    2efe:	dd00      	ble.n	2f02 <__aeabi_dsub+0xe6>
    2f00:	e0db      	b.n	30ba <__aeabi_dsub+0x29e>
    2f02:	1b9e      	subs	r6, r3, r6
    2f04:	1c73      	adds	r3, r6, #1
    2f06:	2b1f      	cmp	r3, #31
    2f08:	dd00      	ble.n	2f0c <__aeabi_dsub+0xf0>
    2f0a:	e10a      	b.n	3122 <__aeabi_dsub+0x306>
    2f0c:	2220      	movs	r2, #32
    2f0e:	0038      	movs	r0, r7
    2f10:	1ad2      	subs	r2, r2, r3
    2f12:	0029      	movs	r1, r5
    2f14:	4097      	lsls	r7, r2
    2f16:	002c      	movs	r4, r5
    2f18:	4091      	lsls	r1, r2
    2f1a:	40d8      	lsrs	r0, r3
    2f1c:	1e7a      	subs	r2, r7, #1
    2f1e:	4197      	sbcs	r7, r2
    2f20:	40dc      	lsrs	r4, r3
    2f22:	2600      	movs	r6, #0
    2f24:	4301      	orrs	r1, r0
    2f26:	430f      	orrs	r7, r1
    2f28:	077b      	lsls	r3, r7, #29
    2f2a:	d009      	beq.n	2f40 <__aeabi_dsub+0x124>
    2f2c:	230f      	movs	r3, #15
    2f2e:	403b      	ands	r3, r7
    2f30:	2b04      	cmp	r3, #4
    2f32:	d005      	beq.n	2f40 <__aeabi_dsub+0x124>
    2f34:	1d3b      	adds	r3, r7, #4
    2f36:	42bb      	cmp	r3, r7
    2f38:	41bf      	sbcs	r7, r7
    2f3a:	427f      	negs	r7, r7
    2f3c:	19e4      	adds	r4, r4, r7
    2f3e:	001f      	movs	r7, r3
    2f40:	0223      	lsls	r3, r4, #8
    2f42:	d525      	bpl.n	2f90 <__aeabi_dsub+0x174>
    2f44:	4b86      	ldr	r3, [pc, #536]	; (3160 <__aeabi_dsub+0x344>)
    2f46:	3601      	adds	r6, #1
    2f48:	429e      	cmp	r6, r3
    2f4a:	d100      	bne.n	2f4e <__aeabi_dsub+0x132>
    2f4c:	e0af      	b.n	30ae <__aeabi_dsub+0x292>
    2f4e:	4b85      	ldr	r3, [pc, #532]	; (3164 <__aeabi_dsub+0x348>)
    2f50:	2501      	movs	r5, #1
    2f52:	401c      	ands	r4, r3
    2f54:	4643      	mov	r3, r8
    2f56:	0762      	lsls	r2, r4, #29
    2f58:	08ff      	lsrs	r7, r7, #3
    2f5a:	0264      	lsls	r4, r4, #9
    2f5c:	0576      	lsls	r6, r6, #21
    2f5e:	4317      	orrs	r7, r2
    2f60:	0b24      	lsrs	r4, r4, #12
    2f62:	0d76      	lsrs	r6, r6, #21
    2f64:	401d      	ands	r5, r3
    2f66:	2100      	movs	r1, #0
    2f68:	0324      	lsls	r4, r4, #12
    2f6a:	0b23      	lsrs	r3, r4, #12
    2f6c:	0d0c      	lsrs	r4, r1, #20
    2f6e:	4a7e      	ldr	r2, [pc, #504]	; (3168 <__aeabi_dsub+0x34c>)
    2f70:	0524      	lsls	r4, r4, #20
    2f72:	431c      	orrs	r4, r3
    2f74:	4014      	ands	r4, r2
    2f76:	0533      	lsls	r3, r6, #20
    2f78:	4323      	orrs	r3, r4
    2f7a:	005b      	lsls	r3, r3, #1
    2f7c:	07ed      	lsls	r5, r5, #31
    2f7e:	085b      	lsrs	r3, r3, #1
    2f80:	432b      	orrs	r3, r5
    2f82:	0038      	movs	r0, r7
    2f84:	0019      	movs	r1, r3
    2f86:	bc1c      	pop	{r2, r3, r4}
    2f88:	4690      	mov	r8, r2
    2f8a:	4699      	mov	r9, r3
    2f8c:	46a2      	mov	sl, r4
    2f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f90:	2501      	movs	r5, #1
    2f92:	4643      	mov	r3, r8
    2f94:	0762      	lsls	r2, r4, #29
    2f96:	08ff      	lsrs	r7, r7, #3
    2f98:	4317      	orrs	r7, r2
    2f9a:	08e4      	lsrs	r4, r4, #3
    2f9c:	401d      	ands	r5, r3
    2f9e:	4b70      	ldr	r3, [pc, #448]	; (3160 <__aeabi_dsub+0x344>)
    2fa0:	429e      	cmp	r6, r3
    2fa2:	d036      	beq.n	3012 <__aeabi_dsub+0x1f6>
    2fa4:	0324      	lsls	r4, r4, #12
    2fa6:	0576      	lsls	r6, r6, #21
    2fa8:	0b24      	lsrs	r4, r4, #12
    2faa:	0d76      	lsrs	r6, r6, #21
    2fac:	e7db      	b.n	2f66 <__aeabi_dsub+0x14a>
    2fae:	4663      	mov	r3, ip
    2fb0:	1af3      	subs	r3, r6, r3
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	dc00      	bgt.n	2fb8 <__aeabi_dsub+0x19c>
    2fb6:	e094      	b.n	30e2 <__aeabi_dsub+0x2c6>
    2fb8:	4660      	mov	r0, ip
    2fba:	2800      	cmp	r0, #0
    2fbc:	d035      	beq.n	302a <__aeabi_dsub+0x20e>
    2fbe:	4868      	ldr	r0, [pc, #416]	; (3160 <__aeabi_dsub+0x344>)
    2fc0:	4286      	cmp	r6, r0
    2fc2:	d0b1      	beq.n	2f28 <__aeabi_dsub+0x10c>
    2fc4:	2780      	movs	r7, #128	; 0x80
    2fc6:	043f      	lsls	r7, r7, #16
    2fc8:	4339      	orrs	r1, r7
    2fca:	2b38      	cmp	r3, #56	; 0x38
    2fcc:	dc00      	bgt.n	2fd0 <__aeabi_dsub+0x1b4>
    2fce:	e0fd      	b.n	31cc <__aeabi_dsub+0x3b0>
    2fd0:	430a      	orrs	r2, r1
    2fd2:	0017      	movs	r7, r2
    2fd4:	2100      	movs	r1, #0
    2fd6:	1e7a      	subs	r2, r7, #1
    2fd8:	4197      	sbcs	r7, r2
    2fda:	4457      	add	r7, sl
    2fdc:	4557      	cmp	r7, sl
    2fde:	4180      	sbcs	r0, r0
    2fe0:	1909      	adds	r1, r1, r4
    2fe2:	4244      	negs	r4, r0
    2fe4:	190c      	adds	r4, r1, r4
    2fe6:	0223      	lsls	r3, r4, #8
    2fe8:	d53a      	bpl.n	3060 <__aeabi_dsub+0x244>
    2fea:	4b5d      	ldr	r3, [pc, #372]	; (3160 <__aeabi_dsub+0x344>)
    2fec:	3601      	adds	r6, #1
    2fee:	429e      	cmp	r6, r3
    2ff0:	d100      	bne.n	2ff4 <__aeabi_dsub+0x1d8>
    2ff2:	e14b      	b.n	328c <__aeabi_dsub+0x470>
    2ff4:	2201      	movs	r2, #1
    2ff6:	4b5b      	ldr	r3, [pc, #364]	; (3164 <__aeabi_dsub+0x348>)
    2ff8:	401c      	ands	r4, r3
    2ffa:	087b      	lsrs	r3, r7, #1
    2ffc:	4017      	ands	r7, r2
    2ffe:	431f      	orrs	r7, r3
    3000:	07e2      	lsls	r2, r4, #31
    3002:	4317      	orrs	r7, r2
    3004:	0864      	lsrs	r4, r4, #1
    3006:	e78f      	b.n	2f28 <__aeabi_dsub+0x10c>
    3008:	0008      	movs	r0, r1
    300a:	4310      	orrs	r0, r2
    300c:	d000      	beq.n	3010 <__aeabi_dsub+0x1f4>
    300e:	e724      	b.n	2e5a <__aeabi_dsub+0x3e>
    3010:	e721      	b.n	2e56 <__aeabi_dsub+0x3a>
    3012:	0023      	movs	r3, r4
    3014:	433b      	orrs	r3, r7
    3016:	d100      	bne.n	301a <__aeabi_dsub+0x1fe>
    3018:	e1b9      	b.n	338e <__aeabi_dsub+0x572>
    301a:	2280      	movs	r2, #128	; 0x80
    301c:	0312      	lsls	r2, r2, #12
    301e:	4314      	orrs	r4, r2
    3020:	0324      	lsls	r4, r4, #12
    3022:	0b24      	lsrs	r4, r4, #12
    3024:	e79f      	b.n	2f66 <__aeabi_dsub+0x14a>
    3026:	002e      	movs	r6, r5
    3028:	e77e      	b.n	2f28 <__aeabi_dsub+0x10c>
    302a:	0008      	movs	r0, r1
    302c:	4310      	orrs	r0, r2
    302e:	d100      	bne.n	3032 <__aeabi_dsub+0x216>
    3030:	e0ca      	b.n	31c8 <__aeabi_dsub+0x3ac>
    3032:	1e58      	subs	r0, r3, #1
    3034:	4684      	mov	ip, r0
    3036:	2800      	cmp	r0, #0
    3038:	d000      	beq.n	303c <__aeabi_dsub+0x220>
    303a:	e0e7      	b.n	320c <__aeabi_dsub+0x3f0>
    303c:	4452      	add	r2, sl
    303e:	4552      	cmp	r2, sl
    3040:	4180      	sbcs	r0, r0
    3042:	1864      	adds	r4, r4, r1
    3044:	4240      	negs	r0, r0
    3046:	1824      	adds	r4, r4, r0
    3048:	0017      	movs	r7, r2
    304a:	2601      	movs	r6, #1
    304c:	0223      	lsls	r3, r4, #8
    304e:	d507      	bpl.n	3060 <__aeabi_dsub+0x244>
    3050:	2602      	movs	r6, #2
    3052:	e7cf      	b.n	2ff4 <__aeabi_dsub+0x1d8>
    3054:	4664      	mov	r4, ip
    3056:	432c      	orrs	r4, r5
    3058:	d100      	bne.n	305c <__aeabi_dsub+0x240>
    305a:	e1b3      	b.n	33c4 <__aeabi_dsub+0x5a8>
    305c:	002c      	movs	r4, r5
    305e:	4667      	mov	r7, ip
    3060:	077b      	lsls	r3, r7, #29
    3062:	d000      	beq.n	3066 <__aeabi_dsub+0x24a>
    3064:	e762      	b.n	2f2c <__aeabi_dsub+0x110>
    3066:	0763      	lsls	r3, r4, #29
    3068:	08ff      	lsrs	r7, r7, #3
    306a:	431f      	orrs	r7, r3
    306c:	2501      	movs	r5, #1
    306e:	4643      	mov	r3, r8
    3070:	08e4      	lsrs	r4, r4, #3
    3072:	401d      	ands	r5, r3
    3074:	e793      	b.n	2f9e <__aeabi_dsub+0x182>
    3076:	2d00      	cmp	r5, #0
    3078:	d178      	bne.n	316c <__aeabi_dsub+0x350>
    307a:	1c75      	adds	r5, r6, #1
    307c:	056d      	lsls	r5, r5, #21
    307e:	0d6d      	lsrs	r5, r5, #21
    3080:	2d01      	cmp	r5, #1
    3082:	dc00      	bgt.n	3086 <__aeabi_dsub+0x26a>
    3084:	e0f2      	b.n	326c <__aeabi_dsub+0x450>
    3086:	4650      	mov	r0, sl
    3088:	1a80      	subs	r0, r0, r2
    308a:	4582      	cmp	sl, r0
    308c:	41bf      	sbcs	r7, r7
    308e:	1a65      	subs	r5, r4, r1
    3090:	427f      	negs	r7, r7
    3092:	1bed      	subs	r5, r5, r7
    3094:	4684      	mov	ip, r0
    3096:	0228      	lsls	r0, r5, #8
    3098:	d400      	bmi.n	309c <__aeabi_dsub+0x280>
    309a:	e08c      	b.n	31b6 <__aeabi_dsub+0x39a>
    309c:	4650      	mov	r0, sl
    309e:	1a17      	subs	r7, r2, r0
    30a0:	42ba      	cmp	r2, r7
    30a2:	4192      	sbcs	r2, r2
    30a4:	1b0c      	subs	r4, r1, r4
    30a6:	4255      	negs	r5, r2
    30a8:	1b65      	subs	r5, r4, r5
    30aa:	4698      	mov	r8, r3
    30ac:	e714      	b.n	2ed8 <__aeabi_dsub+0xbc>
    30ae:	2501      	movs	r5, #1
    30b0:	4643      	mov	r3, r8
    30b2:	2400      	movs	r4, #0
    30b4:	401d      	ands	r5, r3
    30b6:	2700      	movs	r7, #0
    30b8:	e755      	b.n	2f66 <__aeabi_dsub+0x14a>
    30ba:	4c2a      	ldr	r4, [pc, #168]	; (3164 <__aeabi_dsub+0x348>)
    30bc:	1af6      	subs	r6, r6, r3
    30be:	402c      	ands	r4, r5
    30c0:	e732      	b.n	2f28 <__aeabi_dsub+0x10c>
    30c2:	003d      	movs	r5, r7
    30c4:	3828      	subs	r0, #40	; 0x28
    30c6:	4085      	lsls	r5, r0
    30c8:	2700      	movs	r7, #0
    30ca:	e717      	b.n	2efc <__aeabi_dsub+0xe0>
    30cc:	0038      	movs	r0, r7
    30ce:	f000 fa65 	bl	359c <__clzsi2>
    30d2:	3020      	adds	r0, #32
    30d4:	e706      	b.n	2ee4 <__aeabi_dsub+0xc8>
    30d6:	430a      	orrs	r2, r1
    30d8:	0017      	movs	r7, r2
    30da:	2100      	movs	r1, #0
    30dc:	1e7a      	subs	r2, r7, #1
    30de:	4197      	sbcs	r7, r2
    30e0:	e6ee      	b.n	2ec0 <__aeabi_dsub+0xa4>
    30e2:	2b00      	cmp	r3, #0
    30e4:	d000      	beq.n	30e8 <__aeabi_dsub+0x2cc>
    30e6:	e0e5      	b.n	32b4 <__aeabi_dsub+0x498>
    30e8:	1c73      	adds	r3, r6, #1
    30ea:	469c      	mov	ip, r3
    30ec:	055b      	lsls	r3, r3, #21
    30ee:	0d5b      	lsrs	r3, r3, #21
    30f0:	2b01      	cmp	r3, #1
    30f2:	dc00      	bgt.n	30f6 <__aeabi_dsub+0x2da>
    30f4:	e09f      	b.n	3236 <__aeabi_dsub+0x41a>
    30f6:	4b1a      	ldr	r3, [pc, #104]	; (3160 <__aeabi_dsub+0x344>)
    30f8:	459c      	cmp	ip, r3
    30fa:	d100      	bne.n	30fe <__aeabi_dsub+0x2e2>
    30fc:	e0c5      	b.n	328a <__aeabi_dsub+0x46e>
    30fe:	4452      	add	r2, sl
    3100:	4552      	cmp	r2, sl
    3102:	4180      	sbcs	r0, r0
    3104:	1864      	adds	r4, r4, r1
    3106:	4240      	negs	r0, r0
    3108:	1824      	adds	r4, r4, r0
    310a:	07e7      	lsls	r7, r4, #31
    310c:	0852      	lsrs	r2, r2, #1
    310e:	4317      	orrs	r7, r2
    3110:	0864      	lsrs	r4, r4, #1
    3112:	4666      	mov	r6, ip
    3114:	e708      	b.n	2f28 <__aeabi_dsub+0x10c>
    3116:	4812      	ldr	r0, [pc, #72]	; (3160 <__aeabi_dsub+0x344>)
    3118:	4285      	cmp	r5, r0
    311a:	d100      	bne.n	311e <__aeabi_dsub+0x302>
    311c:	e085      	b.n	322a <__aeabi_dsub+0x40e>
    311e:	001d      	movs	r5, r3
    3120:	e6bc      	b.n	2e9c <__aeabi_dsub+0x80>
    3122:	0029      	movs	r1, r5
    3124:	3e1f      	subs	r6, #31
    3126:	40f1      	lsrs	r1, r6
    3128:	2b20      	cmp	r3, #32
    312a:	d100      	bne.n	312e <__aeabi_dsub+0x312>
    312c:	e07f      	b.n	322e <__aeabi_dsub+0x412>
    312e:	2240      	movs	r2, #64	; 0x40
    3130:	1ad3      	subs	r3, r2, r3
    3132:	409d      	lsls	r5, r3
    3134:	432f      	orrs	r7, r5
    3136:	1e7d      	subs	r5, r7, #1
    3138:	41af      	sbcs	r7, r5
    313a:	2400      	movs	r4, #0
    313c:	430f      	orrs	r7, r1
    313e:	2600      	movs	r6, #0
    3140:	e78e      	b.n	3060 <__aeabi_dsub+0x244>
    3142:	002b      	movs	r3, r5
    3144:	000f      	movs	r7, r1
    3146:	3b20      	subs	r3, #32
    3148:	40df      	lsrs	r7, r3
    314a:	2d20      	cmp	r5, #32
    314c:	d071      	beq.n	3232 <__aeabi_dsub+0x416>
    314e:	2340      	movs	r3, #64	; 0x40
    3150:	1b5d      	subs	r5, r3, r5
    3152:	40a9      	lsls	r1, r5
    3154:	430a      	orrs	r2, r1
    3156:	1e51      	subs	r1, r2, #1
    3158:	418a      	sbcs	r2, r1
    315a:	2100      	movs	r1, #0
    315c:	4317      	orrs	r7, r2
    315e:	e6af      	b.n	2ec0 <__aeabi_dsub+0xa4>
    3160:	000007ff 	.word	0x000007ff
    3164:	ff7fffff 	.word	0xff7fffff
    3168:	800fffff 	.word	0x800fffff
    316c:	2e00      	cmp	r6, #0
    316e:	d03e      	beq.n	31ee <__aeabi_dsub+0x3d2>
    3170:	4eb3      	ldr	r6, [pc, #716]	; (3440 <__aeabi_dsub+0x624>)
    3172:	45b4      	cmp	ip, r6
    3174:	d045      	beq.n	3202 <__aeabi_dsub+0x3e6>
    3176:	2680      	movs	r6, #128	; 0x80
    3178:	0436      	lsls	r6, r6, #16
    317a:	426d      	negs	r5, r5
    317c:	4334      	orrs	r4, r6
    317e:	2d38      	cmp	r5, #56	; 0x38
    3180:	dd00      	ble.n	3184 <__aeabi_dsub+0x368>
    3182:	e0a8      	b.n	32d6 <__aeabi_dsub+0x4ba>
    3184:	2d1f      	cmp	r5, #31
    3186:	dd00      	ble.n	318a <__aeabi_dsub+0x36e>
    3188:	e11f      	b.n	33ca <__aeabi_dsub+0x5ae>
    318a:	2620      	movs	r6, #32
    318c:	0027      	movs	r7, r4
    318e:	4650      	mov	r0, sl
    3190:	1b76      	subs	r6, r6, r5
    3192:	40b7      	lsls	r7, r6
    3194:	40e8      	lsrs	r0, r5
    3196:	4307      	orrs	r7, r0
    3198:	4650      	mov	r0, sl
    319a:	40b0      	lsls	r0, r6
    319c:	1e46      	subs	r6, r0, #1
    319e:	41b0      	sbcs	r0, r6
    31a0:	40ec      	lsrs	r4, r5
    31a2:	4338      	orrs	r0, r7
    31a4:	1a17      	subs	r7, r2, r0
    31a6:	42ba      	cmp	r2, r7
    31a8:	4192      	sbcs	r2, r2
    31aa:	1b0c      	subs	r4, r1, r4
    31ac:	4252      	negs	r2, r2
    31ae:	1aa4      	subs	r4, r4, r2
    31b0:	4666      	mov	r6, ip
    31b2:	4698      	mov	r8, r3
    31b4:	e68b      	b.n	2ece <__aeabi_dsub+0xb2>
    31b6:	4664      	mov	r4, ip
    31b8:	4667      	mov	r7, ip
    31ba:	432c      	orrs	r4, r5
    31bc:	d000      	beq.n	31c0 <__aeabi_dsub+0x3a4>
    31be:	e68b      	b.n	2ed8 <__aeabi_dsub+0xbc>
    31c0:	2500      	movs	r5, #0
    31c2:	2600      	movs	r6, #0
    31c4:	2700      	movs	r7, #0
    31c6:	e6ea      	b.n	2f9e <__aeabi_dsub+0x182>
    31c8:	001e      	movs	r6, r3
    31ca:	e6ad      	b.n	2f28 <__aeabi_dsub+0x10c>
    31cc:	2b1f      	cmp	r3, #31
    31ce:	dc60      	bgt.n	3292 <__aeabi_dsub+0x476>
    31d0:	2720      	movs	r7, #32
    31d2:	1af8      	subs	r0, r7, r3
    31d4:	000f      	movs	r7, r1
    31d6:	4684      	mov	ip, r0
    31d8:	4087      	lsls	r7, r0
    31da:	0010      	movs	r0, r2
    31dc:	40d8      	lsrs	r0, r3
    31de:	4307      	orrs	r7, r0
    31e0:	4660      	mov	r0, ip
    31e2:	4082      	lsls	r2, r0
    31e4:	1e50      	subs	r0, r2, #1
    31e6:	4182      	sbcs	r2, r0
    31e8:	40d9      	lsrs	r1, r3
    31ea:	4317      	orrs	r7, r2
    31ec:	e6f5      	b.n	2fda <__aeabi_dsub+0x1be>
    31ee:	0026      	movs	r6, r4
    31f0:	4650      	mov	r0, sl
    31f2:	4306      	orrs	r6, r0
    31f4:	d005      	beq.n	3202 <__aeabi_dsub+0x3e6>
    31f6:	43ed      	mvns	r5, r5
    31f8:	2d00      	cmp	r5, #0
    31fa:	d0d3      	beq.n	31a4 <__aeabi_dsub+0x388>
    31fc:	4e90      	ldr	r6, [pc, #576]	; (3440 <__aeabi_dsub+0x624>)
    31fe:	45b4      	cmp	ip, r6
    3200:	d1bd      	bne.n	317e <__aeabi_dsub+0x362>
    3202:	000c      	movs	r4, r1
    3204:	0017      	movs	r7, r2
    3206:	4666      	mov	r6, ip
    3208:	4698      	mov	r8, r3
    320a:	e68d      	b.n	2f28 <__aeabi_dsub+0x10c>
    320c:	488c      	ldr	r0, [pc, #560]	; (3440 <__aeabi_dsub+0x624>)
    320e:	4283      	cmp	r3, r0
    3210:	d00b      	beq.n	322a <__aeabi_dsub+0x40e>
    3212:	4663      	mov	r3, ip
    3214:	e6d9      	b.n	2fca <__aeabi_dsub+0x1ae>
    3216:	2d00      	cmp	r5, #0
    3218:	d000      	beq.n	321c <__aeabi_dsub+0x400>
    321a:	e096      	b.n	334a <__aeabi_dsub+0x52e>
    321c:	0008      	movs	r0, r1
    321e:	4310      	orrs	r0, r2
    3220:	d100      	bne.n	3224 <__aeabi_dsub+0x408>
    3222:	e0e2      	b.n	33ea <__aeabi_dsub+0x5ce>
    3224:	000c      	movs	r4, r1
    3226:	0017      	movs	r7, r2
    3228:	4698      	mov	r8, r3
    322a:	4e85      	ldr	r6, [pc, #532]	; (3440 <__aeabi_dsub+0x624>)
    322c:	e67c      	b.n	2f28 <__aeabi_dsub+0x10c>
    322e:	2500      	movs	r5, #0
    3230:	e780      	b.n	3134 <__aeabi_dsub+0x318>
    3232:	2100      	movs	r1, #0
    3234:	e78e      	b.n	3154 <__aeabi_dsub+0x338>
    3236:	0023      	movs	r3, r4
    3238:	4650      	mov	r0, sl
    323a:	4303      	orrs	r3, r0
    323c:	2e00      	cmp	r6, #0
    323e:	d000      	beq.n	3242 <__aeabi_dsub+0x426>
    3240:	e0a8      	b.n	3394 <__aeabi_dsub+0x578>
    3242:	2b00      	cmp	r3, #0
    3244:	d100      	bne.n	3248 <__aeabi_dsub+0x42c>
    3246:	e0de      	b.n	3406 <__aeabi_dsub+0x5ea>
    3248:	000b      	movs	r3, r1
    324a:	4313      	orrs	r3, r2
    324c:	d100      	bne.n	3250 <__aeabi_dsub+0x434>
    324e:	e66b      	b.n	2f28 <__aeabi_dsub+0x10c>
    3250:	4452      	add	r2, sl
    3252:	4552      	cmp	r2, sl
    3254:	4180      	sbcs	r0, r0
    3256:	1864      	adds	r4, r4, r1
    3258:	4240      	negs	r0, r0
    325a:	1824      	adds	r4, r4, r0
    325c:	0017      	movs	r7, r2
    325e:	0223      	lsls	r3, r4, #8
    3260:	d400      	bmi.n	3264 <__aeabi_dsub+0x448>
    3262:	e6fd      	b.n	3060 <__aeabi_dsub+0x244>
    3264:	4b77      	ldr	r3, [pc, #476]	; (3444 <__aeabi_dsub+0x628>)
    3266:	4666      	mov	r6, ip
    3268:	401c      	ands	r4, r3
    326a:	e65d      	b.n	2f28 <__aeabi_dsub+0x10c>
    326c:	0025      	movs	r5, r4
    326e:	4650      	mov	r0, sl
    3270:	4305      	orrs	r5, r0
    3272:	2e00      	cmp	r6, #0
    3274:	d1cf      	bne.n	3216 <__aeabi_dsub+0x3fa>
    3276:	2d00      	cmp	r5, #0
    3278:	d14f      	bne.n	331a <__aeabi_dsub+0x4fe>
    327a:	000c      	movs	r4, r1
    327c:	4314      	orrs	r4, r2
    327e:	d100      	bne.n	3282 <__aeabi_dsub+0x466>
    3280:	e0a0      	b.n	33c4 <__aeabi_dsub+0x5a8>
    3282:	000c      	movs	r4, r1
    3284:	0017      	movs	r7, r2
    3286:	4698      	mov	r8, r3
    3288:	e64e      	b.n	2f28 <__aeabi_dsub+0x10c>
    328a:	4666      	mov	r6, ip
    328c:	2400      	movs	r4, #0
    328e:	2700      	movs	r7, #0
    3290:	e685      	b.n	2f9e <__aeabi_dsub+0x182>
    3292:	001f      	movs	r7, r3
    3294:	0008      	movs	r0, r1
    3296:	3f20      	subs	r7, #32
    3298:	40f8      	lsrs	r0, r7
    329a:	0007      	movs	r7, r0
    329c:	2b20      	cmp	r3, #32
    329e:	d100      	bne.n	32a2 <__aeabi_dsub+0x486>
    32a0:	e08e      	b.n	33c0 <__aeabi_dsub+0x5a4>
    32a2:	2040      	movs	r0, #64	; 0x40
    32a4:	1ac3      	subs	r3, r0, r3
    32a6:	4099      	lsls	r1, r3
    32a8:	430a      	orrs	r2, r1
    32aa:	1e51      	subs	r1, r2, #1
    32ac:	418a      	sbcs	r2, r1
    32ae:	2100      	movs	r1, #0
    32b0:	4317      	orrs	r7, r2
    32b2:	e692      	b.n	2fda <__aeabi_dsub+0x1be>
    32b4:	2e00      	cmp	r6, #0
    32b6:	d114      	bne.n	32e2 <__aeabi_dsub+0x4c6>
    32b8:	0026      	movs	r6, r4
    32ba:	4650      	mov	r0, sl
    32bc:	4306      	orrs	r6, r0
    32be:	d062      	beq.n	3386 <__aeabi_dsub+0x56a>
    32c0:	43db      	mvns	r3, r3
    32c2:	2b00      	cmp	r3, #0
    32c4:	d15c      	bne.n	3380 <__aeabi_dsub+0x564>
    32c6:	1887      	adds	r7, r0, r2
    32c8:	4297      	cmp	r7, r2
    32ca:	4192      	sbcs	r2, r2
    32cc:	1864      	adds	r4, r4, r1
    32ce:	4252      	negs	r2, r2
    32d0:	18a4      	adds	r4, r4, r2
    32d2:	4666      	mov	r6, ip
    32d4:	e687      	b.n	2fe6 <__aeabi_dsub+0x1ca>
    32d6:	4650      	mov	r0, sl
    32d8:	4320      	orrs	r0, r4
    32da:	1e44      	subs	r4, r0, #1
    32dc:	41a0      	sbcs	r0, r4
    32de:	2400      	movs	r4, #0
    32e0:	e760      	b.n	31a4 <__aeabi_dsub+0x388>
    32e2:	4e57      	ldr	r6, [pc, #348]	; (3440 <__aeabi_dsub+0x624>)
    32e4:	45b4      	cmp	ip, r6
    32e6:	d04e      	beq.n	3386 <__aeabi_dsub+0x56a>
    32e8:	2680      	movs	r6, #128	; 0x80
    32ea:	0436      	lsls	r6, r6, #16
    32ec:	425b      	negs	r3, r3
    32ee:	4334      	orrs	r4, r6
    32f0:	2b38      	cmp	r3, #56	; 0x38
    32f2:	dd00      	ble.n	32f6 <__aeabi_dsub+0x4da>
    32f4:	e07f      	b.n	33f6 <__aeabi_dsub+0x5da>
    32f6:	2b1f      	cmp	r3, #31
    32f8:	dd00      	ble.n	32fc <__aeabi_dsub+0x4e0>
    32fa:	e08b      	b.n	3414 <__aeabi_dsub+0x5f8>
    32fc:	2620      	movs	r6, #32
    32fe:	0027      	movs	r7, r4
    3300:	4650      	mov	r0, sl
    3302:	1af6      	subs	r6, r6, r3
    3304:	40b7      	lsls	r7, r6
    3306:	40d8      	lsrs	r0, r3
    3308:	4307      	orrs	r7, r0
    330a:	4650      	mov	r0, sl
    330c:	40b0      	lsls	r0, r6
    330e:	1e46      	subs	r6, r0, #1
    3310:	41b0      	sbcs	r0, r6
    3312:	4307      	orrs	r7, r0
    3314:	40dc      	lsrs	r4, r3
    3316:	18bf      	adds	r7, r7, r2
    3318:	e7d6      	b.n	32c8 <__aeabi_dsub+0x4ac>
    331a:	000d      	movs	r5, r1
    331c:	4315      	orrs	r5, r2
    331e:	d100      	bne.n	3322 <__aeabi_dsub+0x506>
    3320:	e602      	b.n	2f28 <__aeabi_dsub+0x10c>
    3322:	4650      	mov	r0, sl
    3324:	1a80      	subs	r0, r0, r2
    3326:	4582      	cmp	sl, r0
    3328:	41bf      	sbcs	r7, r7
    332a:	1a65      	subs	r5, r4, r1
    332c:	427f      	negs	r7, r7
    332e:	1bed      	subs	r5, r5, r7
    3330:	4684      	mov	ip, r0
    3332:	0228      	lsls	r0, r5, #8
    3334:	d400      	bmi.n	3338 <__aeabi_dsub+0x51c>
    3336:	e68d      	b.n	3054 <__aeabi_dsub+0x238>
    3338:	4650      	mov	r0, sl
    333a:	1a17      	subs	r7, r2, r0
    333c:	42ba      	cmp	r2, r7
    333e:	4192      	sbcs	r2, r2
    3340:	1b0c      	subs	r4, r1, r4
    3342:	4252      	negs	r2, r2
    3344:	1aa4      	subs	r4, r4, r2
    3346:	4698      	mov	r8, r3
    3348:	e5ee      	b.n	2f28 <__aeabi_dsub+0x10c>
    334a:	000d      	movs	r5, r1
    334c:	4315      	orrs	r5, r2
    334e:	d100      	bne.n	3352 <__aeabi_dsub+0x536>
    3350:	e76b      	b.n	322a <__aeabi_dsub+0x40e>
    3352:	4650      	mov	r0, sl
    3354:	0767      	lsls	r7, r4, #29
    3356:	08c0      	lsrs	r0, r0, #3
    3358:	4307      	orrs	r7, r0
    335a:	2080      	movs	r0, #128	; 0x80
    335c:	08e4      	lsrs	r4, r4, #3
    335e:	0300      	lsls	r0, r0, #12
    3360:	4204      	tst	r4, r0
    3362:	d007      	beq.n	3374 <__aeabi_dsub+0x558>
    3364:	08cd      	lsrs	r5, r1, #3
    3366:	4205      	tst	r5, r0
    3368:	d104      	bne.n	3374 <__aeabi_dsub+0x558>
    336a:	002c      	movs	r4, r5
    336c:	4698      	mov	r8, r3
    336e:	08d7      	lsrs	r7, r2, #3
    3370:	0749      	lsls	r1, r1, #29
    3372:	430f      	orrs	r7, r1
    3374:	0f7b      	lsrs	r3, r7, #29
    3376:	00e4      	lsls	r4, r4, #3
    3378:	431c      	orrs	r4, r3
    337a:	00ff      	lsls	r7, r7, #3
    337c:	4e30      	ldr	r6, [pc, #192]	; (3440 <__aeabi_dsub+0x624>)
    337e:	e5d3      	b.n	2f28 <__aeabi_dsub+0x10c>
    3380:	4e2f      	ldr	r6, [pc, #188]	; (3440 <__aeabi_dsub+0x624>)
    3382:	45b4      	cmp	ip, r6
    3384:	d1b4      	bne.n	32f0 <__aeabi_dsub+0x4d4>
    3386:	000c      	movs	r4, r1
    3388:	0017      	movs	r7, r2
    338a:	4666      	mov	r6, ip
    338c:	e5cc      	b.n	2f28 <__aeabi_dsub+0x10c>
    338e:	2700      	movs	r7, #0
    3390:	2400      	movs	r4, #0
    3392:	e5e8      	b.n	2f66 <__aeabi_dsub+0x14a>
    3394:	2b00      	cmp	r3, #0
    3396:	d039      	beq.n	340c <__aeabi_dsub+0x5f0>
    3398:	000b      	movs	r3, r1
    339a:	4313      	orrs	r3, r2
    339c:	d100      	bne.n	33a0 <__aeabi_dsub+0x584>
    339e:	e744      	b.n	322a <__aeabi_dsub+0x40e>
    33a0:	08c0      	lsrs	r0, r0, #3
    33a2:	0767      	lsls	r7, r4, #29
    33a4:	4307      	orrs	r7, r0
    33a6:	2080      	movs	r0, #128	; 0x80
    33a8:	08e4      	lsrs	r4, r4, #3
    33aa:	0300      	lsls	r0, r0, #12
    33ac:	4204      	tst	r4, r0
    33ae:	d0e1      	beq.n	3374 <__aeabi_dsub+0x558>
    33b0:	08cb      	lsrs	r3, r1, #3
    33b2:	4203      	tst	r3, r0
    33b4:	d1de      	bne.n	3374 <__aeabi_dsub+0x558>
    33b6:	08d7      	lsrs	r7, r2, #3
    33b8:	0749      	lsls	r1, r1, #29
    33ba:	430f      	orrs	r7, r1
    33bc:	001c      	movs	r4, r3
    33be:	e7d9      	b.n	3374 <__aeabi_dsub+0x558>
    33c0:	2100      	movs	r1, #0
    33c2:	e771      	b.n	32a8 <__aeabi_dsub+0x48c>
    33c4:	2500      	movs	r5, #0
    33c6:	2700      	movs	r7, #0
    33c8:	e5e9      	b.n	2f9e <__aeabi_dsub+0x182>
    33ca:	002e      	movs	r6, r5
    33cc:	0027      	movs	r7, r4
    33ce:	3e20      	subs	r6, #32
    33d0:	40f7      	lsrs	r7, r6
    33d2:	2d20      	cmp	r5, #32
    33d4:	d02f      	beq.n	3436 <__aeabi_dsub+0x61a>
    33d6:	2640      	movs	r6, #64	; 0x40
    33d8:	1b75      	subs	r5, r6, r5
    33da:	40ac      	lsls	r4, r5
    33dc:	4650      	mov	r0, sl
    33de:	4320      	orrs	r0, r4
    33e0:	1e44      	subs	r4, r0, #1
    33e2:	41a0      	sbcs	r0, r4
    33e4:	2400      	movs	r4, #0
    33e6:	4338      	orrs	r0, r7
    33e8:	e6dc      	b.n	31a4 <__aeabi_dsub+0x388>
    33ea:	2480      	movs	r4, #128	; 0x80
    33ec:	2500      	movs	r5, #0
    33ee:	0324      	lsls	r4, r4, #12
    33f0:	4e13      	ldr	r6, [pc, #76]	; (3440 <__aeabi_dsub+0x624>)
    33f2:	2700      	movs	r7, #0
    33f4:	e5d3      	b.n	2f9e <__aeabi_dsub+0x182>
    33f6:	4650      	mov	r0, sl
    33f8:	4320      	orrs	r0, r4
    33fa:	0007      	movs	r7, r0
    33fc:	1e78      	subs	r0, r7, #1
    33fe:	4187      	sbcs	r7, r0
    3400:	2400      	movs	r4, #0
    3402:	18bf      	adds	r7, r7, r2
    3404:	e760      	b.n	32c8 <__aeabi_dsub+0x4ac>
    3406:	000c      	movs	r4, r1
    3408:	0017      	movs	r7, r2
    340a:	e58d      	b.n	2f28 <__aeabi_dsub+0x10c>
    340c:	000c      	movs	r4, r1
    340e:	0017      	movs	r7, r2
    3410:	4e0b      	ldr	r6, [pc, #44]	; (3440 <__aeabi_dsub+0x624>)
    3412:	e589      	b.n	2f28 <__aeabi_dsub+0x10c>
    3414:	001e      	movs	r6, r3
    3416:	0027      	movs	r7, r4
    3418:	3e20      	subs	r6, #32
    341a:	40f7      	lsrs	r7, r6
    341c:	2b20      	cmp	r3, #32
    341e:	d00c      	beq.n	343a <__aeabi_dsub+0x61e>
    3420:	2640      	movs	r6, #64	; 0x40
    3422:	1af3      	subs	r3, r6, r3
    3424:	409c      	lsls	r4, r3
    3426:	4650      	mov	r0, sl
    3428:	4320      	orrs	r0, r4
    342a:	1e44      	subs	r4, r0, #1
    342c:	41a0      	sbcs	r0, r4
    342e:	4307      	orrs	r7, r0
    3430:	2400      	movs	r4, #0
    3432:	18bf      	adds	r7, r7, r2
    3434:	e748      	b.n	32c8 <__aeabi_dsub+0x4ac>
    3436:	2400      	movs	r4, #0
    3438:	e7d0      	b.n	33dc <__aeabi_dsub+0x5c0>
    343a:	2400      	movs	r4, #0
    343c:	e7f3      	b.n	3426 <__aeabi_dsub+0x60a>
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	000007ff 	.word	0x000007ff
    3444:	ff7fffff 	.word	0xff7fffff

00003448 <__aeabi_d2iz>:
    3448:	b530      	push	{r4, r5, lr}
    344a:	4d13      	ldr	r5, [pc, #76]	; (3498 <__aeabi_d2iz+0x50>)
    344c:	030a      	lsls	r2, r1, #12
    344e:	004b      	lsls	r3, r1, #1
    3450:	0b12      	lsrs	r2, r2, #12
    3452:	0d5b      	lsrs	r3, r3, #21
    3454:	0fc9      	lsrs	r1, r1, #31
    3456:	2400      	movs	r4, #0
    3458:	42ab      	cmp	r3, r5
    345a:	dd10      	ble.n	347e <__aeabi_d2iz+0x36>
    345c:	4c0f      	ldr	r4, [pc, #60]	; (349c <__aeabi_d2iz+0x54>)
    345e:	42a3      	cmp	r3, r4
    3460:	dc0f      	bgt.n	3482 <__aeabi_d2iz+0x3a>
    3462:	2480      	movs	r4, #128	; 0x80
    3464:	4d0e      	ldr	r5, [pc, #56]	; (34a0 <__aeabi_d2iz+0x58>)
    3466:	0364      	lsls	r4, r4, #13
    3468:	4322      	orrs	r2, r4
    346a:	1aed      	subs	r5, r5, r3
    346c:	2d1f      	cmp	r5, #31
    346e:	dd0b      	ble.n	3488 <__aeabi_d2iz+0x40>
    3470:	480c      	ldr	r0, [pc, #48]	; (34a4 <__aeabi_d2iz+0x5c>)
    3472:	1ac3      	subs	r3, r0, r3
    3474:	40da      	lsrs	r2, r3
    3476:	4254      	negs	r4, r2
    3478:	2900      	cmp	r1, #0
    347a:	d100      	bne.n	347e <__aeabi_d2iz+0x36>
    347c:	0014      	movs	r4, r2
    347e:	0020      	movs	r0, r4
    3480:	bd30      	pop	{r4, r5, pc}
    3482:	4b09      	ldr	r3, [pc, #36]	; (34a8 <__aeabi_d2iz+0x60>)
    3484:	18cc      	adds	r4, r1, r3
    3486:	e7fa      	b.n	347e <__aeabi_d2iz+0x36>
    3488:	4c08      	ldr	r4, [pc, #32]	; (34ac <__aeabi_d2iz+0x64>)
    348a:	40e8      	lsrs	r0, r5
    348c:	46a4      	mov	ip, r4
    348e:	4463      	add	r3, ip
    3490:	409a      	lsls	r2, r3
    3492:	4302      	orrs	r2, r0
    3494:	e7ef      	b.n	3476 <__aeabi_d2iz+0x2e>
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	000003fe 	.word	0x000003fe
    349c:	0000041d 	.word	0x0000041d
    34a0:	00000433 	.word	0x00000433
    34a4:	00000413 	.word	0x00000413
    34a8:	7fffffff 	.word	0x7fffffff
    34ac:	fffffbed 	.word	0xfffffbed

000034b0 <__aeabi_ui2d>:
    34b0:	b510      	push	{r4, lr}
    34b2:	1e04      	subs	r4, r0, #0
    34b4:	d028      	beq.n	3508 <__aeabi_ui2d+0x58>
    34b6:	f000 f871 	bl	359c <__clzsi2>
    34ba:	4b15      	ldr	r3, [pc, #84]	; (3510 <__aeabi_ui2d+0x60>)
    34bc:	4a15      	ldr	r2, [pc, #84]	; (3514 <__aeabi_ui2d+0x64>)
    34be:	1a1b      	subs	r3, r3, r0
    34c0:	1ad2      	subs	r2, r2, r3
    34c2:	2a1f      	cmp	r2, #31
    34c4:	dd15      	ble.n	34f2 <__aeabi_ui2d+0x42>
    34c6:	4a14      	ldr	r2, [pc, #80]	; (3518 <__aeabi_ui2d+0x68>)
    34c8:	1ad2      	subs	r2, r2, r3
    34ca:	4094      	lsls	r4, r2
    34cc:	2200      	movs	r2, #0
    34ce:	0324      	lsls	r4, r4, #12
    34d0:	055b      	lsls	r3, r3, #21
    34d2:	0b24      	lsrs	r4, r4, #12
    34d4:	0d5b      	lsrs	r3, r3, #21
    34d6:	2100      	movs	r1, #0
    34d8:	0010      	movs	r0, r2
    34da:	0324      	lsls	r4, r4, #12
    34dc:	0d0a      	lsrs	r2, r1, #20
    34de:	0b24      	lsrs	r4, r4, #12
    34e0:	0512      	lsls	r2, r2, #20
    34e2:	4322      	orrs	r2, r4
    34e4:	4c0d      	ldr	r4, [pc, #52]	; (351c <__aeabi_ui2d+0x6c>)
    34e6:	051b      	lsls	r3, r3, #20
    34e8:	4022      	ands	r2, r4
    34ea:	4313      	orrs	r3, r2
    34ec:	005b      	lsls	r3, r3, #1
    34ee:	0859      	lsrs	r1, r3, #1
    34f0:	bd10      	pop	{r4, pc}
    34f2:	0021      	movs	r1, r4
    34f4:	4091      	lsls	r1, r2
    34f6:	000a      	movs	r2, r1
    34f8:	210b      	movs	r1, #11
    34fa:	1a08      	subs	r0, r1, r0
    34fc:	40c4      	lsrs	r4, r0
    34fe:	055b      	lsls	r3, r3, #21
    3500:	0324      	lsls	r4, r4, #12
    3502:	0b24      	lsrs	r4, r4, #12
    3504:	0d5b      	lsrs	r3, r3, #21
    3506:	e7e6      	b.n	34d6 <__aeabi_ui2d+0x26>
    3508:	2300      	movs	r3, #0
    350a:	2400      	movs	r4, #0
    350c:	2200      	movs	r2, #0
    350e:	e7e2      	b.n	34d6 <__aeabi_ui2d+0x26>
    3510:	0000041e 	.word	0x0000041e
    3514:	00000433 	.word	0x00000433
    3518:	00000413 	.word	0x00000413
    351c:	800fffff 	.word	0x800fffff

00003520 <__aeabi_cdrcmple>:
    3520:	4684      	mov	ip, r0
    3522:	1c10      	adds	r0, r2, #0
    3524:	4662      	mov	r2, ip
    3526:	468c      	mov	ip, r1
    3528:	1c19      	adds	r1, r3, #0
    352a:	4663      	mov	r3, ip
    352c:	e000      	b.n	3530 <__aeabi_cdcmpeq>
    352e:	46c0      	nop			; (mov r8, r8)

00003530 <__aeabi_cdcmpeq>:
    3530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3532:	f000 f8ef 	bl	3714 <__ledf2>
    3536:	2800      	cmp	r0, #0
    3538:	d401      	bmi.n	353e <__aeabi_cdcmpeq+0xe>
    353a:	2100      	movs	r1, #0
    353c:	42c8      	cmn	r0, r1
    353e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003540 <__aeabi_dcmpeq>:
    3540:	b510      	push	{r4, lr}
    3542:	f000 f849 	bl	35d8 <__eqdf2>
    3546:	4240      	negs	r0, r0
    3548:	3001      	adds	r0, #1
    354a:	bd10      	pop	{r4, pc}

0000354c <__aeabi_dcmplt>:
    354c:	b510      	push	{r4, lr}
    354e:	f000 f8e1 	bl	3714 <__ledf2>
    3552:	2800      	cmp	r0, #0
    3554:	db01      	blt.n	355a <__aeabi_dcmplt+0xe>
    3556:	2000      	movs	r0, #0
    3558:	bd10      	pop	{r4, pc}
    355a:	2001      	movs	r0, #1
    355c:	bd10      	pop	{r4, pc}
    355e:	46c0      	nop			; (mov r8, r8)

00003560 <__aeabi_dcmple>:
    3560:	b510      	push	{r4, lr}
    3562:	f000 f8d7 	bl	3714 <__ledf2>
    3566:	2800      	cmp	r0, #0
    3568:	dd01      	ble.n	356e <__aeabi_dcmple+0xe>
    356a:	2000      	movs	r0, #0
    356c:	bd10      	pop	{r4, pc}
    356e:	2001      	movs	r0, #1
    3570:	bd10      	pop	{r4, pc}
    3572:	46c0      	nop			; (mov r8, r8)

00003574 <__aeabi_dcmpgt>:
    3574:	b510      	push	{r4, lr}
    3576:	f000 f869 	bl	364c <__gedf2>
    357a:	2800      	cmp	r0, #0
    357c:	dc01      	bgt.n	3582 <__aeabi_dcmpgt+0xe>
    357e:	2000      	movs	r0, #0
    3580:	bd10      	pop	{r4, pc}
    3582:	2001      	movs	r0, #1
    3584:	bd10      	pop	{r4, pc}
    3586:	46c0      	nop			; (mov r8, r8)

00003588 <__aeabi_dcmpge>:
    3588:	b510      	push	{r4, lr}
    358a:	f000 f85f 	bl	364c <__gedf2>
    358e:	2800      	cmp	r0, #0
    3590:	da01      	bge.n	3596 <__aeabi_dcmpge+0xe>
    3592:	2000      	movs	r0, #0
    3594:	bd10      	pop	{r4, pc}
    3596:	2001      	movs	r0, #1
    3598:	bd10      	pop	{r4, pc}
    359a:	46c0      	nop			; (mov r8, r8)

0000359c <__clzsi2>:
    359c:	211c      	movs	r1, #28
    359e:	2301      	movs	r3, #1
    35a0:	041b      	lsls	r3, r3, #16
    35a2:	4298      	cmp	r0, r3
    35a4:	d301      	bcc.n	35aa <__clzsi2+0xe>
    35a6:	0c00      	lsrs	r0, r0, #16
    35a8:	3910      	subs	r1, #16
    35aa:	0a1b      	lsrs	r3, r3, #8
    35ac:	4298      	cmp	r0, r3
    35ae:	d301      	bcc.n	35b4 <__clzsi2+0x18>
    35b0:	0a00      	lsrs	r0, r0, #8
    35b2:	3908      	subs	r1, #8
    35b4:	091b      	lsrs	r3, r3, #4
    35b6:	4298      	cmp	r0, r3
    35b8:	d301      	bcc.n	35be <__clzsi2+0x22>
    35ba:	0900      	lsrs	r0, r0, #4
    35bc:	3904      	subs	r1, #4
    35be:	a202      	add	r2, pc, #8	; (adr r2, 35c8 <__clzsi2+0x2c>)
    35c0:	5c10      	ldrb	r0, [r2, r0]
    35c2:	1840      	adds	r0, r0, r1
    35c4:	4770      	bx	lr
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	02020304 	.word	0x02020304
    35cc:	01010101 	.word	0x01010101
	...

000035d8 <__eqdf2>:
    35d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35da:	464f      	mov	r7, r9
    35dc:	4646      	mov	r6, r8
    35de:	46d6      	mov	lr, sl
    35e0:	005c      	lsls	r4, r3, #1
    35e2:	b5c0      	push	{r6, r7, lr}
    35e4:	031f      	lsls	r7, r3, #12
    35e6:	0fdb      	lsrs	r3, r3, #31
    35e8:	469a      	mov	sl, r3
    35ea:	4b17      	ldr	r3, [pc, #92]	; (3648 <__eqdf2+0x70>)
    35ec:	030e      	lsls	r6, r1, #12
    35ee:	004d      	lsls	r5, r1, #1
    35f0:	4684      	mov	ip, r0
    35f2:	4680      	mov	r8, r0
    35f4:	0b36      	lsrs	r6, r6, #12
    35f6:	0d6d      	lsrs	r5, r5, #21
    35f8:	0fc9      	lsrs	r1, r1, #31
    35fa:	4691      	mov	r9, r2
    35fc:	0b3f      	lsrs	r7, r7, #12
    35fe:	0d64      	lsrs	r4, r4, #21
    3600:	2001      	movs	r0, #1
    3602:	429d      	cmp	r5, r3
    3604:	d008      	beq.n	3618 <__eqdf2+0x40>
    3606:	429c      	cmp	r4, r3
    3608:	d001      	beq.n	360e <__eqdf2+0x36>
    360a:	42a5      	cmp	r5, r4
    360c:	d00b      	beq.n	3626 <__eqdf2+0x4e>
    360e:	bc1c      	pop	{r2, r3, r4}
    3610:	4690      	mov	r8, r2
    3612:	4699      	mov	r9, r3
    3614:	46a2      	mov	sl, r4
    3616:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3618:	4663      	mov	r3, ip
    361a:	4333      	orrs	r3, r6
    361c:	d1f7      	bne.n	360e <__eqdf2+0x36>
    361e:	42ac      	cmp	r4, r5
    3620:	d1f5      	bne.n	360e <__eqdf2+0x36>
    3622:	433a      	orrs	r2, r7
    3624:	d1f3      	bne.n	360e <__eqdf2+0x36>
    3626:	2001      	movs	r0, #1
    3628:	42be      	cmp	r6, r7
    362a:	d1f0      	bne.n	360e <__eqdf2+0x36>
    362c:	45c8      	cmp	r8, r9
    362e:	d1ee      	bne.n	360e <__eqdf2+0x36>
    3630:	4551      	cmp	r1, sl
    3632:	d007      	beq.n	3644 <__eqdf2+0x6c>
    3634:	2d00      	cmp	r5, #0
    3636:	d1ea      	bne.n	360e <__eqdf2+0x36>
    3638:	4663      	mov	r3, ip
    363a:	431e      	orrs	r6, r3
    363c:	0030      	movs	r0, r6
    363e:	1e46      	subs	r6, r0, #1
    3640:	41b0      	sbcs	r0, r6
    3642:	e7e4      	b.n	360e <__eqdf2+0x36>
    3644:	2000      	movs	r0, #0
    3646:	e7e2      	b.n	360e <__eqdf2+0x36>
    3648:	000007ff 	.word	0x000007ff

0000364c <__gedf2>:
    364c:	b5f0      	push	{r4, r5, r6, r7, lr}
    364e:	4645      	mov	r5, r8
    3650:	46de      	mov	lr, fp
    3652:	4657      	mov	r7, sl
    3654:	464e      	mov	r6, r9
    3656:	b5e0      	push	{r5, r6, r7, lr}
    3658:	031f      	lsls	r7, r3, #12
    365a:	0b3d      	lsrs	r5, r7, #12
    365c:	4f2c      	ldr	r7, [pc, #176]	; (3710 <__gedf2+0xc4>)
    365e:	030e      	lsls	r6, r1, #12
    3660:	004c      	lsls	r4, r1, #1
    3662:	46ab      	mov	fp, r5
    3664:	005d      	lsls	r5, r3, #1
    3666:	4684      	mov	ip, r0
    3668:	0b36      	lsrs	r6, r6, #12
    366a:	0d64      	lsrs	r4, r4, #21
    366c:	0fc9      	lsrs	r1, r1, #31
    366e:	4690      	mov	r8, r2
    3670:	0d6d      	lsrs	r5, r5, #21
    3672:	0fdb      	lsrs	r3, r3, #31
    3674:	42bc      	cmp	r4, r7
    3676:	d02a      	beq.n	36ce <__gedf2+0x82>
    3678:	4f25      	ldr	r7, [pc, #148]	; (3710 <__gedf2+0xc4>)
    367a:	42bd      	cmp	r5, r7
    367c:	d02d      	beq.n	36da <__gedf2+0x8e>
    367e:	2c00      	cmp	r4, #0
    3680:	d10f      	bne.n	36a2 <__gedf2+0x56>
    3682:	4330      	orrs	r0, r6
    3684:	0007      	movs	r7, r0
    3686:	4681      	mov	r9, r0
    3688:	4278      	negs	r0, r7
    368a:	4178      	adcs	r0, r7
    368c:	b2c0      	uxtb	r0, r0
    368e:	2d00      	cmp	r5, #0
    3690:	d117      	bne.n	36c2 <__gedf2+0x76>
    3692:	465f      	mov	r7, fp
    3694:	433a      	orrs	r2, r7
    3696:	d114      	bne.n	36c2 <__gedf2+0x76>
    3698:	464b      	mov	r3, r9
    369a:	2000      	movs	r0, #0
    369c:	2b00      	cmp	r3, #0
    369e:	d00a      	beq.n	36b6 <__gedf2+0x6a>
    36a0:	e006      	b.n	36b0 <__gedf2+0x64>
    36a2:	2d00      	cmp	r5, #0
    36a4:	d102      	bne.n	36ac <__gedf2+0x60>
    36a6:	4658      	mov	r0, fp
    36a8:	4302      	orrs	r2, r0
    36aa:	d001      	beq.n	36b0 <__gedf2+0x64>
    36ac:	4299      	cmp	r1, r3
    36ae:	d018      	beq.n	36e2 <__gedf2+0x96>
    36b0:	4248      	negs	r0, r1
    36b2:	2101      	movs	r1, #1
    36b4:	4308      	orrs	r0, r1
    36b6:	bc3c      	pop	{r2, r3, r4, r5}
    36b8:	4690      	mov	r8, r2
    36ba:	4699      	mov	r9, r3
    36bc:	46a2      	mov	sl, r4
    36be:	46ab      	mov	fp, r5
    36c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36c2:	2800      	cmp	r0, #0
    36c4:	d0f2      	beq.n	36ac <__gedf2+0x60>
    36c6:	2001      	movs	r0, #1
    36c8:	3b01      	subs	r3, #1
    36ca:	4318      	orrs	r0, r3
    36cc:	e7f3      	b.n	36b6 <__gedf2+0x6a>
    36ce:	0037      	movs	r7, r6
    36d0:	4307      	orrs	r7, r0
    36d2:	d0d1      	beq.n	3678 <__gedf2+0x2c>
    36d4:	2002      	movs	r0, #2
    36d6:	4240      	negs	r0, r0
    36d8:	e7ed      	b.n	36b6 <__gedf2+0x6a>
    36da:	465f      	mov	r7, fp
    36dc:	4317      	orrs	r7, r2
    36de:	d0ce      	beq.n	367e <__gedf2+0x32>
    36e0:	e7f8      	b.n	36d4 <__gedf2+0x88>
    36e2:	42ac      	cmp	r4, r5
    36e4:	dce4      	bgt.n	36b0 <__gedf2+0x64>
    36e6:	da03      	bge.n	36f0 <__gedf2+0xa4>
    36e8:	1e48      	subs	r0, r1, #1
    36ea:	2101      	movs	r1, #1
    36ec:	4308      	orrs	r0, r1
    36ee:	e7e2      	b.n	36b6 <__gedf2+0x6a>
    36f0:	455e      	cmp	r6, fp
    36f2:	d8dd      	bhi.n	36b0 <__gedf2+0x64>
    36f4:	d006      	beq.n	3704 <__gedf2+0xb8>
    36f6:	2000      	movs	r0, #0
    36f8:	455e      	cmp	r6, fp
    36fa:	d2dc      	bcs.n	36b6 <__gedf2+0x6a>
    36fc:	2301      	movs	r3, #1
    36fe:	1e48      	subs	r0, r1, #1
    3700:	4318      	orrs	r0, r3
    3702:	e7d8      	b.n	36b6 <__gedf2+0x6a>
    3704:	45c4      	cmp	ip, r8
    3706:	d8d3      	bhi.n	36b0 <__gedf2+0x64>
    3708:	2000      	movs	r0, #0
    370a:	45c4      	cmp	ip, r8
    370c:	d3f6      	bcc.n	36fc <__gedf2+0xb0>
    370e:	e7d2      	b.n	36b6 <__gedf2+0x6a>
    3710:	000007ff 	.word	0x000007ff

00003714 <__ledf2>:
    3714:	b5f0      	push	{r4, r5, r6, r7, lr}
    3716:	464e      	mov	r6, r9
    3718:	4645      	mov	r5, r8
    371a:	46de      	mov	lr, fp
    371c:	4657      	mov	r7, sl
    371e:	005c      	lsls	r4, r3, #1
    3720:	b5e0      	push	{r5, r6, r7, lr}
    3722:	031f      	lsls	r7, r3, #12
    3724:	0fdb      	lsrs	r3, r3, #31
    3726:	4699      	mov	r9, r3
    3728:	4b2a      	ldr	r3, [pc, #168]	; (37d4 <__ledf2+0xc0>)
    372a:	030e      	lsls	r6, r1, #12
    372c:	004d      	lsls	r5, r1, #1
    372e:	0fc9      	lsrs	r1, r1, #31
    3730:	4684      	mov	ip, r0
    3732:	0b36      	lsrs	r6, r6, #12
    3734:	0d6d      	lsrs	r5, r5, #21
    3736:	468b      	mov	fp, r1
    3738:	4690      	mov	r8, r2
    373a:	0b3f      	lsrs	r7, r7, #12
    373c:	0d64      	lsrs	r4, r4, #21
    373e:	429d      	cmp	r5, r3
    3740:	d020      	beq.n	3784 <__ledf2+0x70>
    3742:	4b24      	ldr	r3, [pc, #144]	; (37d4 <__ledf2+0xc0>)
    3744:	429c      	cmp	r4, r3
    3746:	d022      	beq.n	378e <__ledf2+0x7a>
    3748:	2d00      	cmp	r5, #0
    374a:	d112      	bne.n	3772 <__ledf2+0x5e>
    374c:	4330      	orrs	r0, r6
    374e:	4243      	negs	r3, r0
    3750:	4143      	adcs	r3, r0
    3752:	b2db      	uxtb	r3, r3
    3754:	2c00      	cmp	r4, #0
    3756:	d01f      	beq.n	3798 <__ledf2+0x84>
    3758:	2b00      	cmp	r3, #0
    375a:	d00c      	beq.n	3776 <__ledf2+0x62>
    375c:	464b      	mov	r3, r9
    375e:	2001      	movs	r0, #1
    3760:	3b01      	subs	r3, #1
    3762:	4303      	orrs	r3, r0
    3764:	0018      	movs	r0, r3
    3766:	bc3c      	pop	{r2, r3, r4, r5}
    3768:	4690      	mov	r8, r2
    376a:	4699      	mov	r9, r3
    376c:	46a2      	mov	sl, r4
    376e:	46ab      	mov	fp, r5
    3770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3772:	2c00      	cmp	r4, #0
    3774:	d016      	beq.n	37a4 <__ledf2+0x90>
    3776:	45cb      	cmp	fp, r9
    3778:	d017      	beq.n	37aa <__ledf2+0x96>
    377a:	465b      	mov	r3, fp
    377c:	4259      	negs	r1, r3
    377e:	2301      	movs	r3, #1
    3780:	430b      	orrs	r3, r1
    3782:	e7ef      	b.n	3764 <__ledf2+0x50>
    3784:	0031      	movs	r1, r6
    3786:	2302      	movs	r3, #2
    3788:	4301      	orrs	r1, r0
    378a:	d1eb      	bne.n	3764 <__ledf2+0x50>
    378c:	e7d9      	b.n	3742 <__ledf2+0x2e>
    378e:	0039      	movs	r1, r7
    3790:	2302      	movs	r3, #2
    3792:	4311      	orrs	r1, r2
    3794:	d1e6      	bne.n	3764 <__ledf2+0x50>
    3796:	e7d7      	b.n	3748 <__ledf2+0x34>
    3798:	433a      	orrs	r2, r7
    379a:	d1dd      	bne.n	3758 <__ledf2+0x44>
    379c:	2300      	movs	r3, #0
    379e:	2800      	cmp	r0, #0
    37a0:	d0e0      	beq.n	3764 <__ledf2+0x50>
    37a2:	e7ea      	b.n	377a <__ledf2+0x66>
    37a4:	433a      	orrs	r2, r7
    37a6:	d1e6      	bne.n	3776 <__ledf2+0x62>
    37a8:	e7e7      	b.n	377a <__ledf2+0x66>
    37aa:	42a5      	cmp	r5, r4
    37ac:	dce5      	bgt.n	377a <__ledf2+0x66>
    37ae:	db05      	blt.n	37bc <__ledf2+0xa8>
    37b0:	42be      	cmp	r6, r7
    37b2:	d8e2      	bhi.n	377a <__ledf2+0x66>
    37b4:	d007      	beq.n	37c6 <__ledf2+0xb2>
    37b6:	2300      	movs	r3, #0
    37b8:	42be      	cmp	r6, r7
    37ba:	d2d3      	bcs.n	3764 <__ledf2+0x50>
    37bc:	4659      	mov	r1, fp
    37be:	2301      	movs	r3, #1
    37c0:	3901      	subs	r1, #1
    37c2:	430b      	orrs	r3, r1
    37c4:	e7ce      	b.n	3764 <__ledf2+0x50>
    37c6:	45c4      	cmp	ip, r8
    37c8:	d8d7      	bhi.n	377a <__ledf2+0x66>
    37ca:	2300      	movs	r3, #0
    37cc:	45c4      	cmp	ip, r8
    37ce:	d3f5      	bcc.n	37bc <__ledf2+0xa8>
    37d0:	e7c8      	b.n	3764 <__ledf2+0x50>
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	000007ff 	.word	0x000007ff

000037d8 <__libc_init_array>:
    37d8:	b570      	push	{r4, r5, r6, lr}
    37da:	2600      	movs	r6, #0
    37dc:	4d0c      	ldr	r5, [pc, #48]	; (3810 <__libc_init_array+0x38>)
    37de:	4c0d      	ldr	r4, [pc, #52]	; (3814 <__libc_init_array+0x3c>)
    37e0:	1b64      	subs	r4, r4, r5
    37e2:	10a4      	asrs	r4, r4, #2
    37e4:	42a6      	cmp	r6, r4
    37e6:	d109      	bne.n	37fc <__libc_init_array+0x24>
    37e8:	2600      	movs	r6, #0
    37ea:	f000 f965 	bl	3ab8 <_init>
    37ee:	4d0a      	ldr	r5, [pc, #40]	; (3818 <__libc_init_array+0x40>)
    37f0:	4c0a      	ldr	r4, [pc, #40]	; (381c <__libc_init_array+0x44>)
    37f2:	1b64      	subs	r4, r4, r5
    37f4:	10a4      	asrs	r4, r4, #2
    37f6:	42a6      	cmp	r6, r4
    37f8:	d105      	bne.n	3806 <__libc_init_array+0x2e>
    37fa:	bd70      	pop	{r4, r5, r6, pc}
    37fc:	00b3      	lsls	r3, r6, #2
    37fe:	58eb      	ldr	r3, [r5, r3]
    3800:	4798      	blx	r3
    3802:	3601      	adds	r6, #1
    3804:	e7ee      	b.n	37e4 <__libc_init_array+0xc>
    3806:	00b3      	lsls	r3, r6, #2
    3808:	58eb      	ldr	r3, [r5, r3]
    380a:	4798      	blx	r3
    380c:	3601      	adds	r6, #1
    380e:	e7f2      	b.n	37f6 <__libc_init_array+0x1e>
    3810:	00003ac4 	.word	0x00003ac4
    3814:	00003ac4 	.word	0x00003ac4
    3818:	00003ac4 	.word	0x00003ac4
    381c:	00003ac8 	.word	0x00003ac8

00003820 <__utoa>:
    3820:	b5f0      	push	{r4, r5, r6, r7, lr}
    3822:	0017      	movs	r7, r2
    3824:	b08f      	sub	sp, #60	; 0x3c
    3826:	2225      	movs	r2, #37	; 0x25
    3828:	0006      	movs	r6, r0
    382a:	000d      	movs	r5, r1
    382c:	a804      	add	r0, sp, #16
    382e:	4918      	ldr	r1, [pc, #96]	; (3890 <__utoa+0x70>)
    3830:	f000 f834 	bl	389c <memcpy>
    3834:	aa04      	add	r2, sp, #16
    3836:	1ebb      	subs	r3, r7, #2
    3838:	2400      	movs	r4, #0
    383a:	9203      	str	r2, [sp, #12]
    383c:	2b22      	cmp	r3, #34	; 0x22
    383e:	d905      	bls.n	384c <__utoa+0x2c>
    3840:	702c      	strb	r4, [r5, #0]
    3842:	0025      	movs	r5, r4
    3844:	0028      	movs	r0, r5
    3846:	b00f      	add	sp, #60	; 0x3c
    3848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    384a:	9c01      	ldr	r4, [sp, #4]
    384c:	1c63      	adds	r3, r4, #1
    384e:	9301      	str	r3, [sp, #4]
    3850:	18eb      	adds	r3, r5, r3
    3852:	9300      	str	r3, [sp, #0]
    3854:	0030      	movs	r0, r6
    3856:	3b01      	subs	r3, #1
    3858:	0039      	movs	r1, r7
    385a:	9302      	str	r3, [sp, #8]
    385c:	f7fe fc1c 	bl	2098 <__aeabi_uidivmod>
    3860:	9b03      	ldr	r3, [sp, #12]
    3862:	9a02      	ldr	r2, [sp, #8]
    3864:	5c5b      	ldrb	r3, [r3, r1]
    3866:	0030      	movs	r0, r6
    3868:	7013      	strb	r3, [r2, #0]
    386a:	0039      	movs	r1, r7
    386c:	f7fe fb8e 	bl	1f8c <__udivsi3>
    3870:	1e06      	subs	r6, r0, #0
    3872:	d1ea      	bne.n	384a <__utoa+0x2a>
    3874:	9b00      	ldr	r3, [sp, #0]
    3876:	7018      	strb	r0, [r3, #0]
    3878:	002b      	movs	r3, r5
    387a:	1b5a      	subs	r2, r3, r5
    387c:	4294      	cmp	r4, r2
    387e:	dde1      	ble.n	3844 <__utoa+0x24>
    3880:	781a      	ldrb	r2, [r3, #0]
    3882:	5d29      	ldrb	r1, [r5, r4]
    3884:	7019      	strb	r1, [r3, #0]
    3886:	552a      	strb	r2, [r5, r4]
    3888:	3301      	adds	r3, #1
    388a:	3c01      	subs	r4, #1
    388c:	e7f5      	b.n	387a <__utoa+0x5a>
    388e:	46c0      	nop			; (mov r8, r8)
    3890:	00003a90 	.word	0x00003a90

00003894 <utoa>:
    3894:	b510      	push	{r4, lr}
    3896:	f7ff ffc3 	bl	3820 <__utoa>
    389a:	bd10      	pop	{r4, pc}

0000389c <memcpy>:
    389c:	2300      	movs	r3, #0
    389e:	b510      	push	{r4, lr}
    38a0:	429a      	cmp	r2, r3
    38a2:	d100      	bne.n	38a6 <memcpy+0xa>
    38a4:	bd10      	pop	{r4, pc}
    38a6:	5ccc      	ldrb	r4, [r1, r3]
    38a8:	54c4      	strb	r4, [r0, r3]
    38aa:	3301      	adds	r3, #1
    38ac:	e7f8      	b.n	38a0 <memcpy+0x4>
	...

000038b0 <_AD_reg>:
    38b0:	0280 0382 0385 0288 028a 018f 0292 0294     ................
    38c0:	0296 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    38d0:	6c61 615f 6364 735f 6e79 2e63 0063 0000     al_adc_sync.c...
    38e0:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
    38f0:	6332 6d5f 735f 6e79 2e63 0063 2e2e 682f     2c_m_sync.c.../h
    3900:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.

00003910 <_adcs>:
    3910:	0000 0500 0000 1807 0000 0144 0000 0000     ..........D.....
	...
    392c:	2e2e 682f 6c70 612f 6364 682f 6c70 615f     ../hpl/adc/hpl_a
    393c:	6364 632e 0000 0000                         dc.c....

00003944 <_usarts>:
	...

00003958 <_i2cms>:
    3958:	0001 0000 0014 0020 0100 0000 0f0e 0000     ...... .........
    3968:	0000 00d7 0aaa 003d                         ......=.

00003970 <_i2css>:
	...

00003980 <sercomspi_regs>:
	...
    3994:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    39a4:	5f6c 6573 6372 6d6f 632e 0000 1bb6 0000     l_sercom.c......
    39b4:	1bca 0000 1bd8 0000 1be6 0000 1bf4 0000     ................
    39c4:	1c02 0000 1c16 0000 1c26 0000 1c40 0000     ........&...@...
    39d4:	1c5a 0000 1c74 0000 1c80 0000 1c90 0000     Z...t...........
    39e4:	1ca2 0000 1e26 0000 1e32 0000 1e38 0000     ....&...2...8...
    39f4:	1e2a 0000 1e2a 0000 1e2a 0000 1e2a 0000     *...*...*...*...
    3a04:	1e3e 0000 1e6e 0000 1e86 0000 24ac 0000     >...n........$..
    3a14:	248e 0000 2448 0000 2366 0000 2448 0000     .$..H$..f#..H$..
    3a24:	2480 0000 2448 0000 2366 0000 248e 0000     .$..H$..f#...$..
    3a34:	248e 0000 2480 0000 2366 0000 235e 0000     .$...$..f#..^#..
    3a44:	235e 0000 235e 0000 26c4 0000 2b0c 0000     ^#..^#...&...+..
    3a54:	29cc 0000 29cc 0000 29c8 0000 2ae4 0000     .)...)...)...*..
    3a64:	2ae4 0000 2ad6 0000 29c8 0000 2ae4 0000     .*...*...)...*..
    3a74:	2ad6 0000 2ae4 0000 29c8 0000 2aec 0000     .*...*...)...*..
    3a84:	2aec 0000 2aec 0000 2cf0 0000 3130 3332     .*...*...,..0123
    3a94:	3534 3736 3938 6261 6463 6665 6867 6a69     456789abcdefghij
    3aa4:	6c6b 6e6d 706f 7271 7473 7675 7877 7a79     klmnopqrstuvwxyz
    3ab4:	0000 0000                                   ....

00003ab8 <_init>:
    3ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3abe:	bc08      	pop	{r3}
    3ac0:	469e      	mov	lr, r3
    3ac2:	4770      	bx	lr

00003ac4 <__init_array_start>:
    3ac4:	000000dd 	.word	0x000000dd

00003ac8 <_fini>:
    3ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aca:	46c0      	nop			; (mov r8, r8)
    3acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3ace:	bc08      	pop	{r3}
    3ad0:	469e      	mov	lr, r3
    3ad2:	4770      	bx	lr

00003ad4 <__fini_array_start>:
    3ad4:	000000b5 	.word	0x000000b5
