
EMG_Sensors_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b24  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00003b24  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020014  2**0
                  CONTENTS
  3 .bss          00000080  20000014  00003b38  00020014  2**2
                  ALLOC
  4 .stack        00002004  20000094  00003bb8  00020014  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002287b  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e48  00000000  00000000  00042910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e3bf  00000000  00000000  00045758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bc8  00000000  00000000  00053b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ca8  00000000  00000000  000546df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c075  00000000  00000000  00055387  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011047  00000000  00000000  000713fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00091cdc  00000000  00000000  00082443  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001fac  00000000  00000000  00114120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 20 00 20 01 06 00 00 fd 05 00 00 fd 05 00 00     . . ............
	...
      2c:	fd 05 00 00 00 00 00 00 00 00 00 00 fd 05 00 00     ................
      3c:	89 17 00 00 fd 05 00 00 fd 05 00 00 fd 05 00 00     ................
      4c:	fd 05 00 00 fd 05 00 00 fd 05 00 00 fd 05 00 00     ................
      5c:	fd 05 00 00 5d 1d 00 00 fd 05 00 00 fd 05 00 00     ....]...........
      6c:	fd 05 00 00 fd 05 00 00 fd 05 00 00 fd 05 00 00     ................
      7c:	fd 05 00 00 fd 05 00 00 fd 05 00 00 fd 05 00 00     ................
	...
      94:	fd 05 00 00 fd 05 00 00 fd 05 00 00 fd 05 00 00     ................
      a4:	fd 05 00 00 fd 05 00 00 fd 05 00 00 00 00 00 00     ................

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000014 	.word	0x20000014
      d4:	00000000 	.word	0x00000000
      d8:	00003b24 	.word	0x00003b24

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000018 	.word	0x20000018
     108:	00003b24 	.word	0x00003b24
     10c:	00003b24 	.word	0x00003b24
     110:	00000000 	.word	0x00000000

00000114 <AD_get_bytes>:
		}
	}
	return 1;
}

uint8_t AD_get_bytes(AD_i2c_reg_t reg, uint8_t *value) {
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b083      	sub	sp, #12
     118:	ab01      	add	r3, sp, #4
     11a:	8018      	strh	r0, [r3, #0]
     11c:	000f      	movs	r7, r1
	for (uint8_t i = 0; i < reg.size; i++) {
     11e:	2400      	movs	r4, #0
     120:	e013      	b.n	14a <AD_get_bytes+0x36>
		point_addr_buf[1] = reg.addr + i;
     122:	ab01      	add	r3, sp, #4
     124:	781b      	ldrb	r3, [r3, #0]
     126:	18e3      	adds	r3, r4, r3
     128:	490b      	ldr	r1, [pc, #44]	; (158 <AD_get_bytes+0x44>)
     12a:	704b      	strb	r3, [r1, #1]
		if ((ret = io_write(i2c_mst_io, point_addr_buf, 2)) < I2C_OK) return ret;
     12c:	4e0b      	ldr	r6, [pc, #44]	; (15c <AD_get_bytes+0x48>)
     12e:	2202      	movs	r2, #2
     130:	6830      	ldr	r0, [r6, #0]
     132:	4b0b      	ldr	r3, [pc, #44]	; (160 <AD_get_bytes+0x4c>)
     134:	4798      	blx	r3
     136:	4d0b      	ldr	r5, [pc, #44]	; (164 <AD_get_bytes+0x50>)
     138:	7028      	strb	r0, [r5, #0]
		if ((ret = io_read(i2c_mst_io, &value[i], 1)) < I2C_OK) return ret;
     13a:	1939      	adds	r1, r7, r4
     13c:	6830      	ldr	r0, [r6, #0]
     13e:	2201      	movs	r2, #1
     140:	4b09      	ldr	r3, [pc, #36]	; (168 <AD_get_bytes+0x54>)
     142:	4798      	blx	r3
     144:	7028      	strb	r0, [r5, #0]
	for (uint8_t i = 0; i < reg.size; i++) {
     146:	3401      	adds	r4, #1
     148:	b2e4      	uxtb	r4, r4
     14a:	ab01      	add	r3, sp, #4
     14c:	785b      	ldrb	r3, [r3, #1]
     14e:	429c      	cmp	r4, r3
     150:	d3e7      	bcc.n	122 <AD_get_bytes+0xe>
	}
	return I2C_OK;
}
     152:	2000      	movs	r0, #0
     154:	b003      	add	sp, #12
     156:	bdf0      	pop	{r4, r5, r6, r7, pc}
     158:	20000058 	.word	0x20000058
     15c:	20000030 	.word	0x20000030
     160:	00000b85 	.word	0x00000b85
     164:	2000005a 	.word	0x2000005a
     168:	00000bbd 	.word	0x00000bbd

0000016c <AD_scan>:
uint8_t AD_scan(void) {
     16c:	b510      	push	{r4, lr}
     16e:	b082      	sub	sp, #8
	point_addr_buf[0] = AD5933_PTR;
     170:	22b0      	movs	r2, #176	; 0xb0
     172:	4b13      	ldr	r3, [pc, #76]	; (1c0 <AD_scan+0x54>)
     174:	701a      	strb	r2, [r3, #0]
	block_read_buf[0] = AD5933_BR;
     176:	4b13      	ldr	r3, [pc, #76]	; (1c4 <AD_scan+0x58>)
     178:	3a0f      	subs	r2, #15
     17a:	701a      	strb	r2, [r3, #0]
	block_read_buf[1] = 4;
     17c:	3a9d      	subs	r2, #157	; 0x9d
     17e:	705a      	strb	r2, [r3, #1]
	i2c_m_sync_get_io_descriptor(&I2C_MST, &i2c_mst_io);
     180:	4c11      	ldr	r4, [pc, #68]	; (1c8 <AD_scan+0x5c>)
     182:	4912      	ldr	r1, [pc, #72]	; (1cc <AD_scan+0x60>)
     184:	0020      	movs	r0, r4
     186:	4b12      	ldr	r3, [pc, #72]	; (1d0 <AD_scan+0x64>)
     188:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_MST, AD5933_ADDR, I2C_M_SEVEN);
     18a:	2280      	movs	r2, #128	; 0x80
     18c:	0112      	lsls	r2, r2, #4
     18e:	210d      	movs	r1, #13
     190:	0020      	movs	r0, r4
     192:	4b10      	ldr	r3, [pc, #64]	; (1d4 <AD_scan+0x68>)
     194:	4798      	blx	r3
	if (AD_get_bytes(_AD_reg[AD5933_CTRL], reg_buf) == I2C_OK) {
     196:	a901      	add	r1, sp, #4
     198:	4b0f      	ldr	r3, [pc, #60]	; (1d8 <AD_scan+0x6c>)
     19a:	6818      	ldr	r0, [r3, #0]
     19c:	4b0f      	ldr	r3, [pc, #60]	; (1dc <AD_scan+0x70>)
     19e:	4798      	blx	r3
     1a0:	2800      	cmp	r0, #0
     1a2:	d10a      	bne.n	1ba <AD_scan+0x4e>
		if((reg_buf[0] << 8 | reg_buf[1])==0xA000) {
     1a4:	aa01      	add	r2, sp, #4
     1a6:	7813      	ldrb	r3, [r2, #0]
     1a8:	021b      	lsls	r3, r3, #8
     1aa:	7852      	ldrb	r2, [r2, #1]
     1ac:	4313      	orrs	r3, r2
     1ae:	22a0      	movs	r2, #160	; 0xa0
     1b0:	0212      	lsls	r2, r2, #8
     1b2:	4293      	cmp	r3, r2
     1b4:	d002      	beq.n	1bc <AD_scan+0x50>
	return 1;
     1b6:	3001      	adds	r0, #1
     1b8:	e000      	b.n	1bc <AD_scan+0x50>
     1ba:	2001      	movs	r0, #1
}
     1bc:	b002      	add	sp, #8
     1be:	bd10      	pop	{r4, pc}
     1c0:	20000058 	.word	0x20000058
     1c4:	2000005c 	.word	0x2000005c
     1c8:	20000064 	.word	0x20000064
     1cc:	20000030 	.word	0x20000030
     1d0:	00000b7d 	.word	0x00000b7d
     1d4:	00000ad9 	.word	0x00000ad9
     1d8:	000038fc 	.word	0x000038fc
     1dc:	00000115 	.word	0x00000115

000001e0 <AD_set_bytes>:

uint8_t AD_set_bytes(AD_i2c_reg_t reg, uint8_t *value) {
     1e0:	b530      	push	{r4, r5, lr}
     1e2:	b085      	sub	sp, #20
     1e4:	ab01      	add	r3, sp, #4
     1e6:	8018      	strh	r0, [r3, #0]
     1e8:	000d      	movs	r5, r1
	uint8_t addr_d_buf[2];
	for (uint8_t i = 0; i < reg.size; i++) {
     1ea:	2400      	movs	r4, #0
     1ec:	e00f      	b.n	20e <AD_set_bytes+0x2e>
		addr_d_buf[0] = reg.addr + i;
     1ee:	ab01      	add	r3, sp, #4
     1f0:	781b      	ldrb	r3, [r3, #0]
     1f2:	18e3      	adds	r3, r4, r3
     1f4:	a903      	add	r1, sp, #12
     1f6:	700b      	strb	r3, [r1, #0]
		addr_d_buf[1] = value[i];
     1f8:	5d2b      	ldrb	r3, [r5, r4]
     1fa:	704b      	strb	r3, [r1, #1]
		if ((ret = io_write(i2c_mst_io, addr_d_buf, 2)) < I2C_OK) return ret;
     1fc:	4b07      	ldr	r3, [pc, #28]	; (21c <AD_set_bytes+0x3c>)
     1fe:	6818      	ldr	r0, [r3, #0]
     200:	2202      	movs	r2, #2
     202:	4b07      	ldr	r3, [pc, #28]	; (220 <AD_set_bytes+0x40>)
     204:	4798      	blx	r3
     206:	4b07      	ldr	r3, [pc, #28]	; (224 <AD_set_bytes+0x44>)
     208:	7018      	strb	r0, [r3, #0]
	for (uint8_t i = 0; i < reg.size; i++) {
     20a:	3401      	adds	r4, #1
     20c:	b2e4      	uxtb	r4, r4
     20e:	ab01      	add	r3, sp, #4
     210:	785b      	ldrb	r3, [r3, #1]
     212:	429c      	cmp	r4, r3
     214:	d3eb      	bcc.n	1ee <AD_set_bytes+0xe>
	}
	return I2C_OK;
}
     216:	2000      	movs	r0, #0
     218:	b005      	add	sp, #20
     21a:	bd30      	pop	{r4, r5, pc}
     21c:	20000030 	.word	0x20000030
     220:	00000b85 	.word	0x00000b85
     224:	2000005a 	.word	0x2000005a

00000228 <AD_reset>:

uint8_t AD_reset(void) {
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
	uint8_t val[2];
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
     22c:	a901      	add	r1, sp, #4
     22e:	4b0a      	ldr	r3, [pc, #40]	; (258 <AD_reset+0x30>)
     230:	6818      	ldr	r0, [r3, #0]
     232:	4b0a      	ldr	r3, [pc, #40]	; (25c <AD_reset+0x34>)
     234:	4798      	blx	r3
     236:	4a0a      	ldr	r2, [pc, #40]	; (260 <AD_reset+0x38>)
     238:	7010      	strb	r0, [r2, #0]
     23a:	2800      	cmp	r0, #0
     23c:	d001      	beq.n	242 <AD_reset+0x1a>
	val[1] |= CTRL_RESET;
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
}
     23e:	b003      	add	sp, #12
     240:	bd00      	pop	{pc}
	val[1] |= CTRL_RESET;
     242:	a901      	add	r1, sp, #4
     244:	784b      	ldrb	r3, [r1, #1]
     246:	2210      	movs	r2, #16
     248:	4313      	orrs	r3, r2
     24a:	704b      	strb	r3, [r1, #1]
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
     24c:	4b02      	ldr	r3, [pc, #8]	; (258 <AD_reset+0x30>)
     24e:	6818      	ldr	r0, [r3, #0]
     250:	4b04      	ldr	r3, [pc, #16]	; (264 <AD_reset+0x3c>)
     252:	4798      	blx	r3
     254:	e7f3      	b.n	23e <AD_reset+0x16>
     256:	46c0      	nop			; (mov r8, r8)
     258:	000038fc 	.word	0x000038fc
     25c:	00000115 	.word	0x00000115
     260:	2000005a 	.word	0x2000005a
     264:	000001e1 	.word	0x000001e1

00000268 <AD_set_control_mode>:

uint8_t AD_set_control_mode(uint8_t mode) {
     268:	b510      	push	{r4, lr}
     26a:	b082      	sub	sp, #8
     26c:	0004      	movs	r4, r0
	uint8_t val[2];
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
     26e:	a901      	add	r1, sp, #4
     270:	4b0a      	ldr	r3, [pc, #40]	; (29c <AD_set_control_mode+0x34>)
     272:	6818      	ldr	r0, [r3, #0]
     274:	4b0a      	ldr	r3, [pc, #40]	; (2a0 <AD_set_control_mode+0x38>)
     276:	4798      	blx	r3
     278:	4a0a      	ldr	r2, [pc, #40]	; (2a4 <AD_set_control_mode+0x3c>)
     27a:	7010      	strb	r0, [r2, #0]
     27c:	2800      	cmp	r0, #0
     27e:	d001      	beq.n	284 <AD_set_control_mode+0x1c>
	val[0] &= 0x0F; 
	val[0] |= mode;
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
}
     280:	b002      	add	sp, #8
     282:	bd10      	pop	{r4, pc}
	val[0] &= 0x0F; 
     284:	a901      	add	r1, sp, #4
     286:	780b      	ldrb	r3, [r1, #0]
     288:	300f      	adds	r0, #15
     28a:	4018      	ands	r0, r3
	val[0] |= mode;
     28c:	4320      	orrs	r0, r4
     28e:	7008      	strb	r0, [r1, #0]
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
     290:	4b02      	ldr	r3, [pc, #8]	; (29c <AD_set_control_mode+0x34>)
     292:	6818      	ldr	r0, [r3, #0]
     294:	4b04      	ldr	r3, [pc, #16]	; (2a8 <AD_set_control_mode+0x40>)
     296:	4798      	blx	r3
     298:	e7f2      	b.n	280 <AD_set_control_mode+0x18>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	000038fc 	.word	0x000038fc
     2a0:	00000115 	.word	0x00000115
     2a4:	2000005a 	.word	0x2000005a
     2a8:	000001e1 	.word	0x000001e1

000002ac <AD_set_clock_internal>:

uint8_t AD_set_clock_internal(void) {
     2ac:	b500      	push	{lr}
     2ae:	b083      	sub	sp, #12
	uint8_t val[2];
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
     2b0:	a901      	add	r1, sp, #4
     2b2:	4b09      	ldr	r3, [pc, #36]	; (2d8 <AD_set_clock_internal+0x2c>)
     2b4:	6818      	ldr	r0, [r3, #0]
     2b6:	4b09      	ldr	r3, [pc, #36]	; (2dc <AD_set_clock_internal+0x30>)
     2b8:	4798      	blx	r3
     2ba:	4a09      	ldr	r2, [pc, #36]	; (2e0 <AD_set_clock_internal+0x34>)
     2bc:	7010      	strb	r0, [r2, #0]
     2be:	2800      	cmp	r0, #0
     2c0:	d001      	beq.n	2c6 <AD_set_clock_internal+0x1a>
	val[1] = CTRL_CLOCK_INTERNAL; 
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
}
     2c2:	b003      	add	sp, #12
     2c4:	bd00      	pop	{pc}
	val[1] = CTRL_CLOCK_INTERNAL; 
     2c6:	a901      	add	r1, sp, #4
     2c8:	2300      	movs	r3, #0
     2ca:	704b      	strb	r3, [r1, #1]
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
     2cc:	4b02      	ldr	r3, [pc, #8]	; (2d8 <AD_set_clock_internal+0x2c>)
     2ce:	6818      	ldr	r0, [r3, #0]
     2d0:	4b04      	ldr	r3, [pc, #16]	; (2e4 <AD_set_clock_internal+0x38>)
     2d2:	4798      	blx	r3
     2d4:	e7f5      	b.n	2c2 <AD_set_clock_internal+0x16>
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	000038fc 	.word	0x000038fc
     2dc:	00000115 	.word	0x00000115
     2e0:	2000005a 	.word	0x2000005a
     2e4:	000001e1 	.word	0x000001e1

000002e8 <AD_set_settling_cycles>:
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
	val[1] = CTRL_CLOCK_EXTERNAL;
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
}

uint8_t AD_set_settling_cycles(uint32_t time) {
     2e8:	b500      	push	{lr}
     2ea:	b083      	sub	sp, #12
	uint32_t cycles;
	uint8_t settleTime[2], val;
	
	settleTime[1] = time & 0xFF;
     2ec:	ab01      	add	r3, sp, #4
     2ee:	7058      	strb	r0, [r3, #1]
	settleTime[0] = (time >> 8) & 0xFF;
     2f0:	0a00      	lsrs	r0, r0, #8
     2f2:	b2c0      	uxtb	r0, r0
     2f4:	7018      	strb	r0, [r3, #0]
	
	cycles = (settleTime[1] | (settleTime[0] & 0x1));
	val = (uint8_t)((settleTime[0] & 0x7) >> 1);
     2f6:	0840      	lsrs	r0, r0, #1
     2f8:	2303      	movs	r3, #3
     2fa:	4018      	ands	r0, r3
	
	if ((cycles > 0x1FF) || !(val == 0 || val == 1 || val == 3))
     2fc:	2801      	cmp	r0, #1
     2fe:	d904      	bls.n	30a <AD_set_settling_cycles+0x22>
     300:	2803      	cmp	r0, #3
     302:	d002      	beq.n	30a <AD_set_settling_cycles+0x22>
	{
		return 255;
     304:	20ff      	movs	r0, #255	; 0xff
	}

	return (AD_set_bytes(_AD_reg[AD5933_N_CYC], settleTime));
}
     306:	b003      	add	sp, #12
     308:	bd00      	pop	{pc}
	return (AD_set_bytes(_AD_reg[AD5933_N_CYC], settleTime));
     30a:	a901      	add	r1, sp, #4
     30c:	4b02      	ldr	r3, [pc, #8]	; (318 <AD_set_settling_cycles+0x30>)
     30e:	6898      	ldr	r0, [r3, #8]
     310:	4b02      	ldr	r3, [pc, #8]	; (31c <AD_set_settling_cycles+0x34>)
     312:	4798      	blx	r3
     314:	e7f7      	b.n	306 <AD_set_settling_cycles+0x1e>
     316:	46c0      	nop			; (mov r8, r8)
     318:	000038fc 	.word	0x000038fc
     31c:	000001e1 	.word	0x000001e1

00000320 <AD_set_start_freq>:

uint8_t AD_set_start_freq(uint32_t start) {
     320:	b530      	push	{r4, r5, lr}
     322:	b083      	sub	sp, #12
	uint32_t freqHex = (start/(clock_speed/4.0))*pow(2, 27);
     324:	4b11      	ldr	r3, [pc, #68]	; (36c <AD_set_start_freq+0x4c>)
     326:	4798      	blx	r3
     328:	2200      	movs	r2, #0
     32a:	4b11      	ldr	r3, [pc, #68]	; (370 <AD_set_start_freq+0x50>)
     32c:	4c11      	ldr	r4, [pc, #68]	; (374 <AD_set_start_freq+0x54>)
     32e:	47a0      	blx	r4
     330:	2200      	movs	r2, #0
     332:	4b11      	ldr	r3, [pc, #68]	; (378 <AD_set_start_freq+0x58>)
     334:	4c11      	ldr	r4, [pc, #68]	; (37c <AD_set_start_freq+0x5c>)
     336:	47a0      	blx	r4
     338:	4b11      	ldr	r3, [pc, #68]	; (380 <AD_set_start_freq+0x60>)
     33a:	4798      	blx	r3
	if (freqHex > 0xFFFFFF) return 255;
     33c:	4b11      	ldr	r3, [pc, #68]	; (384 <AD_set_start_freq+0x64>)
     33e:	4298      	cmp	r0, r3
     340:	d902      	bls.n	348 <AD_set_start_freq+0x28>
     342:	20ff      	movs	r0, #255	; 0xff
	freq_buf[2] = freqHex & 0xFF;
	
	AD_set_bytes(_AD_reg[AD5933_START_FREQ], freq_buf);
	
	return AD_get_bytes(_AD_reg[AD5933_START_FREQ], freq_buf);
}
     344:	b003      	add	sp, #12
     346:	bd30      	pop	{r4, r5, pc}
	freq_buf[0] = (freqHex >> 16) & 0xFF;
     348:	0c03      	lsrs	r3, r0, #16
     34a:	ac01      	add	r4, sp, #4
     34c:	7023      	strb	r3, [r4, #0]
	freq_buf[1] = (freqHex >> 8) & 0xFF;
     34e:	0a03      	lsrs	r3, r0, #8
     350:	7063      	strb	r3, [r4, #1]
	freq_buf[2] = freqHex & 0xFF;
     352:	70a0      	strb	r0, [r4, #2]
	AD_set_bytes(_AD_reg[AD5933_START_FREQ], freq_buf);
     354:	4b0c      	ldr	r3, [pc, #48]	; (388 <AD_set_start_freq+0x68>)
     356:	885d      	ldrh	r5, [r3, #2]
     358:	0021      	movs	r1, r4
     35a:	0028      	movs	r0, r5
     35c:	4b0b      	ldr	r3, [pc, #44]	; (38c <AD_set_start_freq+0x6c>)
     35e:	4798      	blx	r3
	return AD_get_bytes(_AD_reg[AD5933_START_FREQ], freq_buf);
     360:	0021      	movs	r1, r4
     362:	0028      	movs	r0, r5
     364:	4b0a      	ldr	r3, [pc, #40]	; (390 <AD_set_start_freq+0x70>)
     366:	4798      	blx	r3
     368:	e7ec      	b.n	344 <AD_set_start_freq+0x24>
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	000034fd 	.word	0x000034fd
     370:	414fff68 	.word	0x414fff68
     374:	00002301 	.word	0x00002301
     378:	41a00000 	.word	0x41a00000
     37c:	00002969 	.word	0x00002969
     380:	000022c5 	.word	0x000022c5
     384:	00ffffff 	.word	0x00ffffff
     388:	000038fc 	.word	0x000038fc
     38c:	000001e1 	.word	0x000001e1
     390:	00000115 	.word	0x00000115

00000394 <AD_set_increment_freq>:

uint8_t AD_set_increment_freq(uint32_t increment) {
     394:	b510      	push	{r4, lr}
     396:	b082      	sub	sp, #8
	uint32_t freqHex = (increment/(clock_speed/4.0))*pow(2, 27);
     398:	4b0e      	ldr	r3, [pc, #56]	; (3d4 <AD_set_increment_freq+0x40>)
     39a:	4798      	blx	r3
     39c:	2200      	movs	r2, #0
     39e:	4b0e      	ldr	r3, [pc, #56]	; (3d8 <AD_set_increment_freq+0x44>)
     3a0:	4c0e      	ldr	r4, [pc, #56]	; (3dc <AD_set_increment_freq+0x48>)
     3a2:	47a0      	blx	r4
     3a4:	2200      	movs	r2, #0
     3a6:	4b0e      	ldr	r3, [pc, #56]	; (3e0 <AD_set_increment_freq+0x4c>)
     3a8:	4c0e      	ldr	r4, [pc, #56]	; (3e4 <AD_set_increment_freq+0x50>)
     3aa:	47a0      	blx	r4
     3ac:	4b0e      	ldr	r3, [pc, #56]	; (3e8 <AD_set_increment_freq+0x54>)
     3ae:	4798      	blx	r3
	if (freqHex > 0xFFFFFF) return 255;
     3b0:	4b0e      	ldr	r3, [pc, #56]	; (3ec <AD_set_increment_freq+0x58>)
     3b2:	4298      	cmp	r0, r3
     3b4:	d902      	bls.n	3bc <AD_set_increment_freq+0x28>
     3b6:	20ff      	movs	r0, #255	; 0xff
	freq_buf[0] = (freqHex >> 16) & 0xFF;
	freq_buf[1] = (freqHex >> 8) & 0xFF;
	freq_buf[2] = freqHex & 0xFF;
	
	return AD_set_bytes(_AD_reg[AD5933_FREQ_INC], freq_buf);
}
     3b8:	b002      	add	sp, #8
     3ba:	bd10      	pop	{r4, pc}
	freq_buf[0] = (freqHex >> 16) & 0xFF;
     3bc:	0c03      	lsrs	r3, r0, #16
     3be:	a901      	add	r1, sp, #4
     3c0:	700b      	strb	r3, [r1, #0]
	freq_buf[1] = (freqHex >> 8) & 0xFF;
     3c2:	0a03      	lsrs	r3, r0, #8
     3c4:	704b      	strb	r3, [r1, #1]
	freq_buf[2] = freqHex & 0xFF;
     3c6:	7088      	strb	r0, [r1, #2]
	return AD_set_bytes(_AD_reg[AD5933_FREQ_INC], freq_buf);
     3c8:	4b09      	ldr	r3, [pc, #36]	; (3f0 <AD_set_increment_freq+0x5c>)
     3ca:	6858      	ldr	r0, [r3, #4]
     3cc:	4b09      	ldr	r3, [pc, #36]	; (3f4 <AD_set_increment_freq+0x60>)
     3ce:	4798      	blx	r3
     3d0:	e7f2      	b.n	3b8 <AD_set_increment_freq+0x24>
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	000034fd 	.word	0x000034fd
     3d8:	414fff68 	.word	0x414fff68
     3dc:	00002301 	.word	0x00002301
     3e0:	41a00000 	.word	0x41a00000
     3e4:	00002969 	.word	0x00002969
     3e8:	000022c5 	.word	0x000022c5
     3ec:	00ffffff 	.word	0x00ffffff
     3f0:	000038fc 	.word	0x000038fc
     3f4:	000001e1 	.word	0x000001e1

000003f8 <AD_set_n_increments>:

uint8_t AD_set_n_increments(uint32_t n) {
     3f8:	b500      	push	{lr}
     3fa:	b083      	sub	sp, #12
	if (n > 511) return 255;
     3fc:	4b07      	ldr	r3, [pc, #28]	; (41c <AD_set_n_increments+0x24>)
     3fe:	4298      	cmp	r0, r3
     400:	d902      	bls.n	408 <AD_set_n_increments+0x10>
     402:	20ff      	movs	r0, #255	; 0xff
	uint8_t val[2];
	val[0] = (n >> 8) & 0xFF;
	val[1] = n & 0xFF;
	
	return AD_set_bytes(_AD_reg[AD5933_N_INC], val);
}
     404:	b003      	add	sp, #12
     406:	bd00      	pop	{pc}
	val[0] = (n >> 8) & 0xFF;
     408:	0a03      	lsrs	r3, r0, #8
     40a:	a901      	add	r1, sp, #4
     40c:	700b      	strb	r3, [r1, #0]
	val[1] = n & 0xFF;
     40e:	7048      	strb	r0, [r1, #1]
	return AD_set_bytes(_AD_reg[AD5933_N_INC], val);
     410:	4b03      	ldr	r3, [pc, #12]	; (420 <AD_set_n_increments+0x28>)
     412:	88d8      	ldrh	r0, [r3, #6]
     414:	4b03      	ldr	r3, [pc, #12]	; (424 <AD_set_n_increments+0x2c>)
     416:	4798      	blx	r3
     418:	e7f4      	b.n	404 <AD_set_n_increments+0xc>
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	000001ff 	.word	0x000001ff
     420:	000038fc 	.word	0x000038fc
     424:	000001e1 	.word	0x000001e1

00000428 <AD_set_PGA_gain>:

uint8_t AD_set_PGA_gain(uint8_t gain) {
     428:	b510      	push	{r4, lr}
     42a:	b082      	sub	sp, #8
     42c:	0004      	movs	r4, r0
	uint8_t val[2];
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
     42e:	a901      	add	r1, sp, #4
     430:	4b0e      	ldr	r3, [pc, #56]	; (46c <AD_set_PGA_gain+0x44>)
     432:	6818      	ldr	r0, [r3, #0]
     434:	4b0e      	ldr	r3, [pc, #56]	; (470 <AD_set_PGA_gain+0x48>)
     436:	4798      	blx	r3
     438:	4a0e      	ldr	r2, [pc, #56]	; (474 <AD_set_PGA_gain+0x4c>)
     43a:	7010      	strb	r0, [r2, #0]
     43c:	2800      	cmp	r0, #0
     43e:	d111      	bne.n	464 <AD_set_PGA_gain+0x3c>
	
	val[0] &= 0xFE;
     440:	aa01      	add	r2, sp, #4
     442:	7813      	ldrb	r3, [r2, #0]
     444:	2101      	movs	r1, #1
     446:	438b      	bics	r3, r1
     448:	7013      	strb	r3, [r2, #0]
	
	switch (gain) {
     44a:	2c00      	cmp	r4, #0
     44c:	d005      	beq.n	45a <AD_set_PGA_gain+0x32>
     44e:	2c01      	cmp	r4, #1
     450:	d10a      	bne.n	468 <AD_set_PGA_gain+0x40>
		case CTRL_PGA_GAIN_X1:
			val[0] |= CTRL_PGA_GAIN_X1;
     452:	2201      	movs	r2, #1
     454:	4313      	orrs	r3, r2
     456:	aa01      	add	r2, sp, #4
     458:	7013      	strb	r3, [r2, #0]
			break;		
		default:
			return 255;
	}
	
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
     45a:	a901      	add	r1, sp, #4
     45c:	4b03      	ldr	r3, [pc, #12]	; (46c <AD_set_PGA_gain+0x44>)
     45e:	6818      	ldr	r0, [r3, #0]
     460:	4b05      	ldr	r3, [pc, #20]	; (478 <AD_set_PGA_gain+0x50>)
     462:	4798      	blx	r3
}
     464:	b002      	add	sp, #8
     466:	bd10      	pop	{r4, pc}
			return 255;
     468:	20ff      	movs	r0, #255	; 0xff
     46a:	e7fb      	b.n	464 <AD_set_PGA_gain+0x3c>
     46c:	000038fc 	.word	0x000038fc
     470:	00000115 	.word	0x00000115
     474:	2000005a 	.word	0x2000005a
     478:	000001e1 	.word	0x000001e1

0000047c <AD_set_range>:

uint8_t AD_set_range(uint8_t range) {
     47c:	b510      	push	{r4, lr}
     47e:	b082      	sub	sp, #8
     480:	0004      	movs	r4, r0
	uint8_t val[2];
	if ((ret = AD_get_bytes(_AD_reg[AD5933_CTRL], val)) != I2C_OK) return ret;
     482:	a901      	add	r1, sp, #4
     484:	4b13      	ldr	r3, [pc, #76]	; (4d4 <AD_set_range+0x58>)
     486:	6818      	ldr	r0, [r3, #0]
     488:	4b13      	ldr	r3, [pc, #76]	; (4d8 <AD_set_range+0x5c>)
     48a:	4798      	blx	r3
     48c:	4a13      	ldr	r2, [pc, #76]	; (4dc <AD_set_range+0x60>)
     48e:	7010      	strb	r0, [r2, #0]
     490:	2800      	cmp	r0, #0
     492:	d118      	bne.n	4c6 <AD_set_range+0x4a>
	
	val[0] &= 0xF9;
     494:	aa01      	add	r2, sp, #4
     496:	7813      	ldrb	r3, [r2, #0]
     498:	2106      	movs	r1, #6
     49a:	438b      	bics	r3, r1
     49c:	7013      	strb	r3, [r2, #0]
	
	switch (range) {
     49e:	2c04      	cmp	r4, #4
     4a0:	d013      	beq.n	4ca <AD_set_range+0x4e>
     4a2:	2c06      	cmp	r4, #6
     4a4:	d006      	beq.n	4b4 <AD_set_range+0x38>
     4a6:	2c00      	cmp	r4, #0
     4a8:	d008      	beq.n	4bc <AD_set_range+0x40>
			break;
		case CTRL_OUTPUT_RANGE_3:
			val[0] |= CTRL_OUTPUT_RANGE_3; // 400mv p-p
			break;
		default:
			val[0] |= CTRL_OUTPUT_RANGE_4; // 200mv p-p
     4aa:	2202      	movs	r2, #2
     4ac:	4313      	orrs	r3, r2
     4ae:	aa01      	add	r2, sp, #4
     4b0:	7013      	strb	r3, [r2, #0]
     4b2:	e003      	b.n	4bc <AD_set_range+0x40>
			val[0] |= CTRL_OUTPUT_RANGE_2; // 1v p-p
     4b4:	2206      	movs	r2, #6
     4b6:	4313      	orrs	r3, r2
     4b8:	aa01      	add	r2, sp, #4
     4ba:	7013      	strb	r3, [r2, #0]
	}
	
	return AD_set_bytes(_AD_reg[AD5933_CTRL], val);
     4bc:	a901      	add	r1, sp, #4
     4be:	4b05      	ldr	r3, [pc, #20]	; (4d4 <AD_set_range+0x58>)
     4c0:	6818      	ldr	r0, [r3, #0]
     4c2:	4b07      	ldr	r3, [pc, #28]	; (4e0 <AD_set_range+0x64>)
     4c4:	4798      	blx	r3
}
     4c6:	b002      	add	sp, #8
     4c8:	bd10      	pop	{r4, pc}
			val[0] |= CTRL_OUTPUT_RANGE_3; // 400mv p-p
     4ca:	2204      	movs	r2, #4
     4cc:	4313      	orrs	r3, r2
     4ce:	aa01      	add	r2, sp, #4
     4d0:	7013      	strb	r3, [r2, #0]
			break;
     4d2:	e7f3      	b.n	4bc <AD_set_range+0x40>
     4d4:	000038fc 	.word	0x000038fc
     4d8:	00000115 	.word	0x00000115
     4dc:	2000005a 	.word	0x2000005a
     4e0:	000001e1 	.word	0x000001e1

000004e4 <AD_set_power_mode>:
													 // what if it isn't how do we want to handle this here? TODO: test
	
	return AD_set_power_mode(POWER_STANDBY);
}

uint8_t AD_set_power_mode(uint8_t level) {
     4e4:	b510      	push	{r4, lr}
	switch(level) {
     4e6:	28a0      	cmp	r0, #160	; 0xa0
     4e8:	d00c      	beq.n	504 <AD_set_power_mode+0x20>
     4ea:	28b0      	cmp	r0, #176	; 0xb0
     4ec:	d006      	beq.n	4fc <AD_set_power_mode+0x18>
     4ee:	2800      	cmp	r0, #0
     4f0:	d001      	beq.n	4f6 <AD_set_power_mode+0x12>
		case POWER_STANDBY:
			return AD_set_control_mode(CTRL_STANDBY_MODE);
		case POWER_DOWN:
			return AD_set_control_mode(CTRL_POWER_DOWN_MODE);
		default:
			return 255;
     4f2:	20ff      	movs	r0, #255	; 0xff
     4f4:	e001      	b.n	4fa <AD_set_power_mode+0x16>
			return AD_set_control_mode(CTRL_NO_OPERATION);
     4f6:	4b05      	ldr	r3, [pc, #20]	; (50c <AD_set_power_mode+0x28>)
     4f8:	4798      	blx	r3
	}
     4fa:	bd10      	pop	{r4, pc}
			return AD_set_control_mode(CTRL_STANDBY_MODE);
     4fc:	20b0      	movs	r0, #176	; 0xb0
     4fe:	4b03      	ldr	r3, [pc, #12]	; (50c <AD_set_power_mode+0x28>)
     500:	4798      	blx	r3
     502:	e7fa      	b.n	4fa <AD_set_power_mode+0x16>
			return AD_set_control_mode(CTRL_POWER_DOWN_MODE);
     504:	20a0      	movs	r0, #160	; 0xa0
     506:	4b01      	ldr	r3, [pc, #4]	; (50c <AD_set_power_mode+0x28>)
     508:	4798      	blx	r3
     50a:	e7f6      	b.n	4fa <AD_set_power_mode+0x16>
     50c:	00000269 	.word	0x00000269

00000510 <AD_get_complex_data>:
uint8_t AD_get_complex_data(uint8_t *real, uint8_t *img) {
     510:	b530      	push	{r4, r5, lr}
     512:	b083      	sub	sp, #12
     514:	0004      	movs	r4, r0
     516:	000d      	movs	r5, r1
	if ((ret = AD_set_power_mode(POWER_STANDBY)) != I2C_OK) return ret;
     518:	20b0      	movs	r0, #176	; 0xb0
     51a:	4b2f      	ldr	r3, [pc, #188]	; (5d8 <AD_get_complex_data+0xc8>)
     51c:	4798      	blx	r3
     51e:	1e03      	subs	r3, r0, #0
     520:	4a2e      	ldr	r2, [pc, #184]	; (5dc <AD_get_complex_data+0xcc>)
     522:	7010      	strb	r0, [r2, #0]
     524:	d002      	beq.n	52c <AD_get_complex_data+0x1c>
}
     526:	0018      	movs	r0, r3
     528:	b003      	add	sp, #12
     52a:	bd30      	pop	{r4, r5, pc}
	delay_us(500);
     52c:	20fa      	movs	r0, #250	; 0xfa
     52e:	0040      	lsls	r0, r0, #1
     530:	4b2b      	ldr	r3, [pc, #172]	; (5e0 <AD_get_complex_data+0xd0>)
     532:	4798      	blx	r3
	if ((ret = AD_set_control_mode(CTRL_INIT_START_FREQ)) != I2C_OK) return ret;
     534:	2010      	movs	r0, #16
     536:	4b2b      	ldr	r3, [pc, #172]	; (5e4 <AD_get_complex_data+0xd4>)
     538:	4798      	blx	r3
     53a:	1e03      	subs	r3, r0, #0
     53c:	4a27      	ldr	r2, [pc, #156]	; (5dc <AD_get_complex_data+0xcc>)
     53e:	7010      	strb	r0, [r2, #0]
     540:	d1f1      	bne.n	526 <AD_get_complex_data+0x16>
	delay_us(500);
     542:	20fa      	movs	r0, #250	; 0xfa
     544:	0040      	lsls	r0, r0, #1
     546:	4b26      	ldr	r3, [pc, #152]	; (5e0 <AD_get_complex_data+0xd0>)
     548:	4798      	blx	r3
	if ((ret = AD_set_control_mode(CTRL_START_FREQ_SWEEP)) != I2C_OK) return ret;
     54a:	2020      	movs	r0, #32
     54c:	4b25      	ldr	r3, [pc, #148]	; (5e4 <AD_get_complex_data+0xd4>)
     54e:	4798      	blx	r3
     550:	1e03      	subs	r3, r0, #0
     552:	4a22      	ldr	r2, [pc, #136]	; (5dc <AD_get_complex_data+0xcc>)
     554:	7010      	strb	r0, [r2, #0]
     556:	d1e6      	bne.n	526 <AD_get_complex_data+0x16>
	uint8_t status_reg = 0;
     558:	2200      	movs	r2, #0
     55a:	466b      	mov	r3, sp
     55c:	71da      	strb	r2, [r3, #7]
		if ((ret = AD_get_bytes(_AD_reg[AD5933_STAT], &status_reg)) != I2C_OK) return ret; // can we save cycles by not pointing?
     55e:	4b22      	ldr	r3, [pc, #136]	; (5e8 <AD_get_complex_data+0xd8>)
     560:	8958      	ldrh	r0, [r3, #10]
     562:	466b      	mov	r3, sp
     564:	1dd9      	adds	r1, r3, #7
     566:	4b21      	ldr	r3, [pc, #132]	; (5ec <AD_get_complex_data+0xdc>)
     568:	4798      	blx	r3
     56a:	1e03      	subs	r3, r0, #0
     56c:	4a1b      	ldr	r2, [pc, #108]	; (5dc <AD_get_complex_data+0xcc>)
     56e:	7010      	strb	r0, [r2, #0]
     570:	d1d9      	bne.n	526 <AD_get_complex_data+0x16>
	} while((status_reg & STATUS_DATA_VALID) != STATUS_DATA_VALID);
     572:	466b      	mov	r3, sp
     574:	3307      	adds	r3, #7
     576:	781b      	ldrb	r3, [r3, #0]
     578:	079b      	lsls	r3, r3, #30
     57a:	d5f0      	bpl.n	55e <AD_get_complex_data+0x4e>
	if ((ret = AD_get_bytes(_AD_reg[AD5933_REAL], real)) != I2C_OK) return ret;
     57c:	4b1a      	ldr	r3, [pc, #104]	; (5e8 <AD_get_complex_data+0xd8>)
     57e:	89d8      	ldrh	r0, [r3, #14]
     580:	0021      	movs	r1, r4
     582:	4b1a      	ldr	r3, [pc, #104]	; (5ec <AD_get_complex_data+0xdc>)
     584:	4798      	blx	r3
     586:	1e03      	subs	r3, r0, #0
     588:	4a14      	ldr	r2, [pc, #80]	; (5dc <AD_get_complex_data+0xcc>)
     58a:	7010      	strb	r0, [r2, #0]
     58c:	d1cb      	bne.n	526 <AD_get_complex_data+0x16>
	if ((ret = AD_get_bytes(_AD_reg[AD5933_IMGY], img))  != I2C_OK) return ret;
     58e:	0029      	movs	r1, r5
     590:	4b15      	ldr	r3, [pc, #84]	; (5e8 <AD_get_complex_data+0xd8>)
     592:	6918      	ldr	r0, [r3, #16]
     594:	4b15      	ldr	r3, [pc, #84]	; (5ec <AD_get_complex_data+0xdc>)
     596:	4798      	blx	r3
     598:	1e03      	subs	r3, r0, #0
     59a:	4a10      	ldr	r2, [pc, #64]	; (5dc <AD_get_complex_data+0xcc>)
     59c:	7010      	strb	r0, [r2, #0]
     59e:	d1c2      	bne.n	526 <AD_get_complex_data+0x16>
	if ((ret = AD_set_control_mode(CTRL_INCREMENT_FREQ)) != I2C_OK) return ret;
     5a0:	2030      	movs	r0, #48	; 0x30
     5a2:	4b10      	ldr	r3, [pc, #64]	; (5e4 <AD_get_complex_data+0xd4>)
     5a4:	4798      	blx	r3
     5a6:	1e03      	subs	r3, r0, #0
     5a8:	4a0c      	ldr	r2, [pc, #48]	; (5dc <AD_get_complex_data+0xcc>)
     5aa:	7010      	strb	r0, [r2, #0]
     5ac:	d1bb      	bne.n	526 <AD_get_complex_data+0x16>
		if ((ret = AD_get_bytes(_AD_reg[AD5933_STAT], &status_reg)) != I2C_OK) return ret;
     5ae:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <AD_get_complex_data+0xd8>)
     5b0:	8958      	ldrh	r0, [r3, #10]
     5b2:	466b      	mov	r3, sp
     5b4:	1dd9      	adds	r1, r3, #7
     5b6:	4b0d      	ldr	r3, [pc, #52]	; (5ec <AD_get_complex_data+0xdc>)
     5b8:	4798      	blx	r3
     5ba:	1e03      	subs	r3, r0, #0
     5bc:	4a07      	ldr	r2, [pc, #28]	; (5dc <AD_get_complex_data+0xcc>)
     5be:	7010      	strb	r0, [r2, #0]
     5c0:	d1b1      	bne.n	526 <AD_get_complex_data+0x16>
	} while ((status_reg & STATUS_SWEEP_DONE) != STATUS_SWEEP_DONE); // sweep should be done as we have no increments expected
     5c2:	466b      	mov	r3, sp
     5c4:	3307      	adds	r3, #7
     5c6:	781b      	ldrb	r3, [r3, #0]
     5c8:	075b      	lsls	r3, r3, #29
     5ca:	d5f0      	bpl.n	5ae <AD_get_complex_data+0x9e>
	return AD_set_power_mode(POWER_STANDBY);
     5cc:	20b0      	movs	r0, #176	; 0xb0
     5ce:	4b02      	ldr	r3, [pc, #8]	; (5d8 <AD_get_complex_data+0xc8>)
     5d0:	4798      	blx	r3
     5d2:	0003      	movs	r3, r0
     5d4:	e7a7      	b.n	526 <AD_get_complex_data+0x16>
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	000004e5 	.word	0x000004e5
     5dc:	2000005a 	.word	0x2000005a
     5e0:	00000a05 	.word	0x00000a05
     5e4:	00000269 	.word	0x00000269
     5e8:	000038fc 	.word	0x000038fc
     5ec:	00000115 	.word	0x00000115

000005f0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     5f0:	b510      	push	{r4, lr}
	system_init();
     5f2:	4b01      	ldr	r3, [pc, #4]	; (5f8 <atmel_start_init+0x8>)
     5f4:	4798      	blx	r3
}
     5f6:	bd10      	pop	{r4, pc}
     5f8:	00000799 	.word	0x00000799

000005fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     5fc:	e7fe      	b.n	5fc <Dummy_Handler>
	...

00000600 <Reset_Handler>:
{
     600:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     602:	4a12      	ldr	r2, [pc, #72]	; (64c <Reset_Handler+0x4c>)
     604:	4b12      	ldr	r3, [pc, #72]	; (650 <Reset_Handler+0x50>)
     606:	429a      	cmp	r2, r3
     608:	d009      	beq.n	61e <Reset_Handler+0x1e>
     60a:	4b11      	ldr	r3, [pc, #68]	; (650 <Reset_Handler+0x50>)
     60c:	4a0f      	ldr	r2, [pc, #60]	; (64c <Reset_Handler+0x4c>)
     60e:	e003      	b.n	618 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     610:	6811      	ldr	r1, [r2, #0]
     612:	6019      	str	r1, [r3, #0]
     614:	3304      	adds	r3, #4
     616:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     618:	490e      	ldr	r1, [pc, #56]	; (654 <Reset_Handler+0x54>)
     61a:	428b      	cmp	r3, r1
     61c:	d3f8      	bcc.n	610 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     61e:	4b0e      	ldr	r3, [pc, #56]	; (658 <Reset_Handler+0x58>)
     620:	e002      	b.n	628 <Reset_Handler+0x28>
                *pDest++ = 0;
     622:	2200      	movs	r2, #0
     624:	601a      	str	r2, [r3, #0]
     626:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     628:	4a0c      	ldr	r2, [pc, #48]	; (65c <Reset_Handler+0x5c>)
     62a:	4293      	cmp	r3, r2
     62c:	d3f9      	bcc.n	622 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     62e:	4a0c      	ldr	r2, [pc, #48]	; (660 <Reset_Handler+0x60>)
     630:	21ff      	movs	r1, #255	; 0xff
     632:	4b0c      	ldr	r3, [pc, #48]	; (664 <Reset_Handler+0x64>)
     634:	438b      	bics	r3, r1
     636:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     638:	4a0b      	ldr	r2, [pc, #44]	; (668 <Reset_Handler+0x68>)
     63a:	6851      	ldr	r1, [r2, #4]
     63c:	2380      	movs	r3, #128	; 0x80
     63e:	430b      	orrs	r3, r1
     640:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     642:	4b0a      	ldr	r3, [pc, #40]	; (66c <Reset_Handler+0x6c>)
     644:	4798      	blx	r3
        main();
     646:	4b0a      	ldr	r3, [pc, #40]	; (670 <Reset_Handler+0x70>)
     648:	4798      	blx	r3
     64a:	e7fe      	b.n	64a <Reset_Handler+0x4a>
     64c:	00003b24 	.word	0x00003b24
     650:	20000000 	.word	0x20000000
     654:	20000014 	.word	0x20000014
     658:	20000014 	.word	0x20000014
     65c:	20000094 	.word	0x20000094
     660:	e000ed00 	.word	0xe000ed00
     664:	00000000 	.word	0x00000000
     668:	41004000 	.word	0x41004000
     66c:	00003825 	.word	0x00003825
     670:	0000192d 	.word	0x0000192d

00000674 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     674:	2280      	movs	r2, #128	; 0x80
     676:	23c0      	movs	r3, #192	; 0xc0
     678:	05db      	lsls	r3, r3, #23
     67a:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     67c:	4a0a      	ldr	r2, [pc, #40]	; (6a8 <ADC_0_PORT_init+0x34>)
     67e:	4b0b      	ldr	r3, [pc, #44]	; (6ac <ADC_0_PORT_init+0x38>)
     680:	6293      	str	r3, [r2, #40]	; 0x28
     682:	23c0      	movs	r3, #192	; 0xc0
     684:	061b      	lsls	r3, r3, #24
     686:	6293      	str	r3, [r2, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     688:	2147      	movs	r1, #71	; 0x47
     68a:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     68c:	2001      	movs	r0, #1
     68e:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     690:	4303      	orrs	r3, r0
     692:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     694:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     696:	3914      	subs	r1, #20
     698:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     69a:	200f      	movs	r0, #15
     69c:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     69e:	2010      	movs	r0, #16
     6a0:	4303      	orrs	r3, r0
     6a2:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a4:	5453      	strb	r3, [r2, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(EMG_ADC, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(EMG_ADC, PINMUX_PA07B_ADC_AIN7);
}
     6a6:	4770      	bx	lr
     6a8:	40002800 	.word	0x40002800
     6ac:	40000080 	.word	0x40000080

000006b0 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC;
     6b0:	4a04      	ldr	r2, [pc, #16]	; (6c4 <ADC_0_CLOCK_init+0x14>)
     6b2:	6a13      	ldr	r3, [r2, #32]
     6b4:	2108      	movs	r1, #8
     6b6:	430b      	orrs	r3, r1
     6b8:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     6ba:	3138      	adds	r1, #56	; 0x38
     6bc:	23f8      	movs	r3, #248	; 0xf8
     6be:	4a02      	ldr	r2, [pc, #8]	; (6c8 <ADC_0_CLOCK_init+0x18>)
     6c0:	50d1      	str	r1, [r2, r3]

void ADC_0_CLOCK_init(void)
{
	hri_mclk_set_APBDMASK_ADC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC_GCLK_ID, CONF_GCLK_ADC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     6c2:	4770      	bx	lr
     6c4:	40000400 	.word	0x40000400
     6c8:	40001800 	.word	0x40001800

000006cc <ADC_0_init>:

void ADC_0_init(void)
{
     6cc:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <ADC_0_init+0x18>)
     6d0:	4798      	blx	r3
	ADC_0_PORT_init();
     6d2:	4b05      	ldr	r3, [pc, #20]	; (6e8 <ADC_0_init+0x1c>)
     6d4:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     6d6:	2200      	movs	r2, #0
     6d8:	4904      	ldr	r1, [pc, #16]	; (6ec <ADC_0_init+0x20>)
     6da:	4805      	ldr	r0, [pc, #20]	; (6f0 <ADC_0_init+0x24>)
     6dc:	4b05      	ldr	r3, [pc, #20]	; (6f4 <ADC_0_init+0x28>)
     6de:	4798      	blx	r3
}
     6e0:	bd10      	pop	{r4, pc}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	000006b1 	.word	0x000006b1
     6e8:	00000675 	.word	0x00000675
     6ec:	43000c00 	.word	0x43000c00
     6f0:	20000060 	.word	0x20000060
     6f4:	000008d5 	.word	0x000008d5

000006f8 <I2C_MST_PORT_init>:

void I2C_MST_PORT_init(void)
{
     6f8:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6fa:	4b13      	ldr	r3, [pc, #76]	; (748 <I2C_MST_PORT_init+0x50>)
     6fc:	2050      	movs	r0, #80	; 0x50
     6fe:	5c19      	ldrb	r1, [r3, r0]
     700:	2204      	movs	r2, #4
     702:	4391      	bics	r1, r2
     704:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     706:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     708:	2501      	movs	r5, #1
     70a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     70c:	2401      	movs	r4, #1
     70e:	4321      	orrs	r1, r4
     710:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     712:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     714:	3818      	subs	r0, #24
     716:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     718:	260f      	movs	r6, #15
     71a:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     71c:	2602      	movs	r6, #2
     71e:	4331      	orrs	r1, r6
     720:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     722:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     724:	2151      	movs	r1, #81	; 0x51
     726:	5c5e      	ldrb	r6, [r3, r1]
     728:	4396      	bics	r6, r2
     72a:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     72c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     72e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     730:	4322      	orrs	r2, r4
     732:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     734:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     736:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     738:	3942      	subs	r1, #66	; 0x42
     73a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     73c:	2120      	movs	r1, #32
     73e:	430a      	orrs	r2, r1
     740:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     742:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(I2C_SCL, PINMUX_PA17C_SERCOM1_PAD1);
}
     744:	bd70      	pop	{r4, r5, r6, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	40002800 	.word	0x40002800

0000074c <I2C_MST_CLOCK_init>:
     74c:	4b06      	ldr	r3, [pc, #24]	; (768 <I2C_MST_CLOCK_init+0x1c>)
     74e:	2142      	movs	r1, #66	; 0x42
     750:	22cc      	movs	r2, #204	; 0xcc
     752:	5099      	str	r1, [r3, r2]
     754:	3101      	adds	r1, #1
     756:	3a08      	subs	r2, #8
     758:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     75a:	4a04      	ldr	r2, [pc, #16]	; (76c <I2C_MST_CLOCK_init+0x20>)
     75c:	69d3      	ldr	r3, [r2, #28]
     75e:	3941      	subs	r1, #65	; 0x41
     760:	430b      	orrs	r3, r1
     762:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
}
     764:	4770      	bx	lr
     766:	46c0      	nop			; (mov r8, r8)
     768:	40001800 	.word	0x40001800
     76c:	40000400 	.word	0x40000400

00000770 <I2C_MST_init>:

void I2C_MST_init(void)
{
     770:	b510      	push	{r4, lr}
	I2C_MST_CLOCK_init();
     772:	4b04      	ldr	r3, [pc, #16]	; (784 <I2C_MST_init+0x14>)
     774:	4798      	blx	r3
	i2c_m_sync_init(&I2C_MST, SERCOM1);
     776:	4904      	ldr	r1, [pc, #16]	; (788 <I2C_MST_init+0x18>)
     778:	4804      	ldr	r0, [pc, #16]	; (78c <I2C_MST_init+0x1c>)
     77a:	4b05      	ldr	r3, [pc, #20]	; (790 <I2C_MST_init+0x20>)
     77c:	4798      	blx	r3
	I2C_MST_PORT_init();
     77e:	4b05      	ldr	r3, [pc, #20]	; (794 <I2C_MST_init+0x24>)
     780:	4798      	blx	r3
}
     782:	bd10      	pop	{r4, pc}
     784:	0000074d 	.word	0x0000074d
     788:	42000400 	.word	0x42000400
     78c:	20000064 	.word	0x20000064
     790:	00000a8d 	.word	0x00000a8d
     794:	000006f9 	.word	0x000006f9

00000798 <system_init>:

void system_init(void)
{
     798:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     79a:	4b42      	ldr	r3, [pc, #264]	; (8a4 <system_init+0x10c>)
     79c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     79e:	4b42      	ldr	r3, [pc, #264]	; (8a8 <system_init+0x110>)
     7a0:	2248      	movs	r2, #72	; 0x48
     7a2:	5c99      	ldrb	r1, [r3, r2]
     7a4:	2604      	movs	r6, #4
     7a6:	43b1      	bics	r1, r6
     7a8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7aa:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ac:	2101      	movs	r1, #1
     7ae:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7b0:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7b2:	3201      	adds	r2, #1
     7b4:	5c98      	ldrb	r0, [r3, r2]
     7b6:	43b0      	bics	r0, r6
     7b8:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ba:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7bc:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7be:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7c0:	22c0      	movs	r2, #192	; 0xc0
     7c2:	05d2      	lsls	r2, r2, #23
     7c4:	2080      	movs	r0, #128	; 0x80
     7c6:	00c0      	lsls	r0, r0, #3
     7c8:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7ca:	4c38      	ldr	r4, [pc, #224]	; (8ac <system_init+0x114>)
     7cc:	629c      	str	r4, [r3, #40]	; 0x28
     7ce:	24c0      	movs	r4, #192	; 0xc0
     7d0:	0624      	lsls	r4, r4, #24
     7d2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7d4:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7d6:	254a      	movs	r5, #74	; 0x4a
     7d8:	5d58      	ldrb	r0, [r3, r5]
     7da:	43b0      	bics	r0, r6
     7dc:	5558      	strb	r0, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7de:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7e0:	4388      	bics	r0, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7e2:	2601      	movs	r6, #1
     7e4:	4330      	orrs	r0, r6
     7e6:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7e8:	5558      	strb	r0, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ea:	3d15      	subs	r5, #21
     7ec:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7ee:	260f      	movs	r6, #15
     7f0:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
     7f2:	2607      	movs	r6, #7
     7f4:	4330      	orrs	r0, r6
     7f6:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7f8:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7fa:	2080      	movs	r0, #128	; 0x80
     7fc:	0100      	lsls	r0, r0, #4
     7fe:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     800:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     802:	482b      	ldr	r0, [pc, #172]	; (8b0 <system_init+0x118>)
     804:	6298      	str	r0, [r3, #40]	; 0x28
     806:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     808:	3516      	adds	r5, #22
     80a:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     80c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     80e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     810:	2080      	movs	r0, #128	; 0x80
     812:	01c0      	lsls	r0, r0, #7
     814:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     816:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     818:	4826      	ldr	r0, [pc, #152]	; (8b4 <system_init+0x11c>)
     81a:	6298      	str	r0, [r3, #40]	; 0x28
     81c:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     81e:	3503      	adds	r5, #3
     820:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     822:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     824:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     826:	2080      	movs	r0, #128	; 0x80
     828:	0200      	lsls	r0, r0, #8
     82a:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     82c:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     82e:	4822      	ldr	r0, [pc, #136]	; (8b8 <system_init+0x120>)
     830:	6298      	str	r0, [r3, #40]	; 0x28
     832:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     834:	244f      	movs	r4, #79	; 0x4f
     836:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     838:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83a:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     83c:	2080      	movs	r0, #128	; 0x80
     83e:	03c0      	lsls	r0, r0, #15
     840:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     842:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     844:	2080      	movs	r0, #128	; 0x80
     846:	05c0      	lsls	r0, r0, #23
     848:	6298      	str	r0, [r3, #40]	; 0x28
     84a:	4c1c      	ldr	r4, [pc, #112]	; (8bc <system_init+0x124>)
     84c:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     84e:	3508      	adds	r5, #8
     850:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     852:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     854:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     856:	2480      	movs	r4, #128	; 0x80
     858:	0424      	lsls	r4, r4, #16
     85a:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     85c:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     85e:	6298      	str	r0, [r3, #40]	; 0x28
     860:	4c17      	ldr	r4, [pc, #92]	; (8c0 <system_init+0x128>)
     862:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	3501      	adds	r5, #1
     866:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     868:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     86a:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     86c:	2480      	movs	r4, #128	; 0x80
     86e:	0464      	lsls	r4, r4, #17
     870:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     872:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     874:	6298      	str	r0, [r3, #40]	; 0x28
     876:	4c13      	ldr	r4, [pc, #76]	; (8c4 <system_init+0x12c>)
     878:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     87a:	3501      	adds	r5, #1
     87c:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     87e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     880:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     882:	2480      	movs	r4, #128	; 0x80
     884:	04a4      	lsls	r4, r4, #18
     886:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     888:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     88a:	6298      	str	r0, [r3, #40]	; 0x28
     88c:	4a0e      	ldr	r2, [pc, #56]	; (8c8 <system_init+0x130>)
     88e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     890:	2059      	movs	r0, #89	; 0x59
     892:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     894:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(SW_IMP, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SW_IMP, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     898:	4b0c      	ldr	r3, [pc, #48]	; (8cc <system_init+0x134>)
     89a:	4798      	blx	r3

	I2C_MST_init();
     89c:	4b0c      	ldr	r3, [pc, #48]	; (8d0 <system_init+0x138>)
     89e:	4798      	blx	r3
}
     8a0:	bd70      	pop	{r4, r5, r6, pc}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	00000e35 	.word	0x00000e35
     8a8:	40002800 	.word	0x40002800
     8ac:	40000400 	.word	0x40000400
     8b0:	40000800 	.word	0x40000800
     8b4:	40004000 	.word	0x40004000
     8b8:	40008000 	.word	0x40008000
     8bc:	c0000040 	.word	0xc0000040
     8c0:	c0000080 	.word	0xc0000080
     8c4:	c0000100 	.word	0xc0000100
     8c8:	c0000200 	.word	0xc0000200
     8cc:	000006cd 	.word	0x000006cd
     8d0:	00000771 	.word	0x00000771

000008d4 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     8d4:	b570      	push	{r4, r5, r6, lr}
     8d6:	0004      	movs	r4, r0
     8d8:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     8da:	2800      	cmp	r0, #0
     8dc:	d00d      	beq.n	8fa <adc_sync_init+0x26>
     8de:	2900      	cmp	r1, #0
     8e0:	d009      	beq.n	8f6 <adc_sync_init+0x22>
     8e2:	2001      	movs	r0, #1
     8e4:	2239      	movs	r2, #57	; 0x39
     8e6:	4906      	ldr	r1, [pc, #24]	; (900 <adc_sync_init+0x2c>)
     8e8:	4b06      	ldr	r3, [pc, #24]	; (904 <adc_sync_init+0x30>)
     8ea:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     8ec:	0029      	movs	r1, r5
     8ee:	0020      	movs	r0, r4
     8f0:	4b05      	ldr	r3, [pc, #20]	; (908 <adc_sync_init+0x34>)
     8f2:	4798      	blx	r3
}
     8f4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     8f6:	2000      	movs	r0, #0
     8f8:	e7f4      	b.n	8e4 <adc_sync_init+0x10>
     8fa:	2000      	movs	r0, #0
     8fc:	e7f2      	b.n	8e4 <adc_sync_init+0x10>
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	00003910 	.word	0x00003910
     904:	00000bf5 	.word	0x00000bf5
     908:	00000d89 	.word	0x00000d89

0000090c <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	0004      	movs	r4, r0
     910:	000d      	movs	r5, r1
	ASSERT(descr);
     912:	1e43      	subs	r3, r0, #1
     914:	4198      	sbcs	r0, r3
     916:	b2c0      	uxtb	r0, r0
     918:	224e      	movs	r2, #78	; 0x4e
     91a:	4904      	ldr	r1, [pc, #16]	; (92c <adc_sync_enable_channel+0x20>)
     91c:	4b04      	ldr	r3, [pc, #16]	; (930 <adc_sync_enable_channel+0x24>)
     91e:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     920:	0029      	movs	r1, r5
     922:	0020      	movs	r0, r4
     924:	4b03      	ldr	r3, [pc, #12]	; (934 <adc_sync_enable_channel+0x28>)
     926:	4798      	blx	r3

	return ERR_NONE;
}
     928:	2000      	movs	r0, #0
     92a:	bd70      	pop	{r4, r5, r6, pc}
     92c:	00003910 	.word	0x00003910
     930:	00000bf5 	.word	0x00000bf5
     934:	00000dc1 	.word	0x00000dc1

00000938 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     93a:	46ce      	mov	lr, r9
     93c:	4647      	mov	r7, r8
     93e:	b580      	push	{r7, lr}
     940:	0006      	movs	r6, r0
     942:	000d      	movs	r5, r1
     944:	4690      	mov	r8, r2
     946:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     948:	2800      	cmp	r0, #0
     94a:	d01a      	beq.n	982 <adc_sync_read_channel+0x4a>
     94c:	2a00      	cmp	r2, #0
     94e:	d01a      	beq.n	986 <adc_sync_read_channel+0x4e>
     950:	464b      	mov	r3, r9
     952:	2b00      	cmp	r3, #0
     954:	d119      	bne.n	98a <adc_sync_read_channel+0x52>
     956:	2000      	movs	r0, #0
     958:	2267      	movs	r2, #103	; 0x67
     95a:	491c      	ldr	r1, [pc, #112]	; (9cc <adc_sync_read_channel+0x94>)
     95c:	4f1c      	ldr	r7, [pc, #112]	; (9d0 <adc_sync_read_channel+0x98>)
     95e:	47b8      	blx	r7
	data_size = _adc_sync_get_data_size(&descr->device);
     960:	0034      	movs	r4, r6
     962:	0030      	movs	r0, r6
     964:	4b1b      	ldr	r3, [pc, #108]	; (9d4 <adc_sync_read_channel+0x9c>)
     966:	4798      	blx	r3
     968:	0001      	movs	r1, r0
     96a:	0006      	movs	r6, r0
	ASSERT(!(length % data_size));
     96c:	4648      	mov	r0, r9
     96e:	4b1a      	ldr	r3, [pc, #104]	; (9d8 <adc_sync_read_channel+0xa0>)
     970:	4798      	blx	r3
     972:	4248      	negs	r0, r1
     974:	4148      	adcs	r0, r1
     976:	b2c0      	uxtb	r0, r0
     978:	2269      	movs	r2, #105	; 0x69
     97a:	4914      	ldr	r1, [pc, #80]	; (9cc <adc_sync_read_channel+0x94>)
     97c:	47b8      	blx	r7
	uint16_t offset = 0;
     97e:	2700      	movs	r7, #0
     980:	e009      	b.n	996 <adc_sync_read_channel+0x5e>
	ASSERT(descr && buffer && length);
     982:	2000      	movs	r0, #0
     984:	e7e8      	b.n	958 <adc_sync_read_channel+0x20>
     986:	2000      	movs	r0, #0
     988:	e7e6      	b.n	958 <adc_sync_read_channel+0x20>
     98a:	2001      	movs	r0, #1
     98c:	e7e4      	b.n	958 <adc_sync_read_channel+0x20>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
     98e:	19bf      	adds	r7, r7, r6
     990:	b2bf      	uxth	r7, r7
	} while (offset < length);
     992:	45b9      	cmp	r9, r7
     994:	d915      	bls.n	9c2 <adc_sync_read_channel+0x8a>
		_adc_sync_convert(&descr->device);
     996:	0020      	movs	r0, r4
     998:	4b10      	ldr	r3, [pc, #64]	; (9dc <adc_sync_read_channel+0xa4>)
     99a:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     99c:	0029      	movs	r1, r5
     99e:	0020      	movs	r0, r4
     9a0:	4b0f      	ldr	r3, [pc, #60]	; (9e0 <adc_sync_read_channel+0xa8>)
     9a2:	4798      	blx	r3
     9a4:	2800      	cmp	r0, #0
     9a6:	d0f9      	beq.n	99c <adc_sync_read_channel+0x64>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     9a8:	0029      	movs	r1, r5
     9aa:	0020      	movs	r0, r4
     9ac:	4b0d      	ldr	r3, [pc, #52]	; (9e4 <adc_sync_read_channel+0xac>)
     9ae:	4798      	blx	r3
		buffer[offset] = result;
     9b0:	4643      	mov	r3, r8
     9b2:	55d8      	strb	r0, [r3, r7]
		if (1 < data_size) {
     9b4:	2e01      	cmp	r6, #1
     9b6:	d9ea      	bls.n	98e <adc_sync_read_channel+0x56>
			buffer[offset + 1] = result >> 8;
     9b8:	1c7b      	adds	r3, r7, #1
     9ba:	0a00      	lsrs	r0, r0, #8
     9bc:	4642      	mov	r2, r8
     9be:	54d0      	strb	r0, [r2, r3]
     9c0:	e7e5      	b.n	98e <adc_sync_read_channel+0x56>

	return offset;
}
     9c2:	0038      	movs	r0, r7
     9c4:	bc0c      	pop	{r2, r3}
     9c6:	4690      	mov	r8, r2
     9c8:	4699      	mov	r9, r3
     9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9cc:	00003910 	.word	0x00003910
     9d0:	00000bf5 	.word	0x00000bf5
     9d4:	00000dd5 	.word	0x00000dd5
     9d8:	000022b9 	.word	0x000022b9
     9dc:	00000df5 	.word	0x00000df5
     9e0:	00000deb 	.word	0x00000deb
     9e4:	00000e09 	.word	0x00000e09

000009e8 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9e8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     9ec:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     9ee:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     9f0:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     9f4:	4770      	bx	lr

000009f6 <atomic_leave_critical>:
     9f6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     9fa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     9fc:	f383 8810 	msr	PRIMASK, r3
}
     a00:	4770      	bx	lr
	...

00000a04 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     a04:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     a06:	4b04      	ldr	r3, [pc, #16]	; (a18 <delay_us+0x14>)
     a08:	681c      	ldr	r4, [r3, #0]
     a0a:	4b04      	ldr	r3, [pc, #16]	; (a1c <delay_us+0x18>)
     a0c:	4798      	blx	r3
     a0e:	0001      	movs	r1, r0
     a10:	0020      	movs	r0, r4
     a12:	4b03      	ldr	r3, [pc, #12]	; (a20 <delay_us+0x1c>)
     a14:	4798      	blx	r3
}
     a16:	bd10      	pop	{r4, pc}
     a18:	20000034 	.word	0x20000034
     a1c:	00000e11 	.word	0x00000e11
     a20:	00000e2d 	.word	0x00000e2d

00000a24 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     a24:	b510      	push	{r4, lr}
     a26:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     a28:	3814      	subs	r0, #20
     a2a:	8b84      	ldrh	r4, [r0, #28]
     a2c:	ab01      	add	r3, sp, #4
     a2e:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     a30:	0014      	movs	r4, r2
     a32:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     a34:	4a06      	ldr	r2, [pc, #24]	; (a50 <i2c_m_sync_write+0x2c>)
     a36:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     a38:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a3a:	0019      	movs	r1, r3
     a3c:	4b05      	ldr	r3, [pc, #20]	; (a54 <i2c_m_sync_write+0x30>)
     a3e:	4798      	blx	r3

	if (ret) {
     a40:	2800      	cmp	r0, #0
     a42:	d102      	bne.n	a4a <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     a44:	0020      	movs	r0, r4
     a46:	b004      	add	sp, #16
     a48:	bd10      	pop	{r4, pc}
		return ret;
     a4a:	0004      	movs	r4, r0
     a4c:	e7fa      	b.n	a44 <i2c_m_sync_write+0x20>
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	ffff8000 	.word	0xffff8000
     a54:	00001475 	.word	0x00001475

00000a58 <i2c_m_sync_read>:
{
     a58:	b510      	push	{r4, lr}
     a5a:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     a5c:	3814      	subs	r0, #20
     a5e:	8b84      	ldrh	r4, [r0, #28]
     a60:	ab01      	add	r3, sp, #4
     a62:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     a64:	0014      	movs	r4, r2
     a66:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     a68:	4a06      	ldr	r2, [pc, #24]	; (a84 <i2c_m_sync_read+0x2c>)
     a6a:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     a6c:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a6e:	0019      	movs	r1, r3
     a70:	4b05      	ldr	r3, [pc, #20]	; (a88 <i2c_m_sync_read+0x30>)
     a72:	4798      	blx	r3
	if (ret) {
     a74:	2800      	cmp	r0, #0
     a76:	d102      	bne.n	a7e <i2c_m_sync_read+0x26>
}
     a78:	0020      	movs	r0, r4
     a7a:	b004      	add	sp, #16
     a7c:	bd10      	pop	{r4, pc}
		return ret;
     a7e:	0004      	movs	r4, r0
     a80:	e7fa      	b.n	a78 <i2c_m_sync_read+0x20>
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	ffff8001 	.word	0xffff8001
     a88:	00001475 	.word	0x00001475

00000a8c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     a8c:	b570      	push	{r4, r5, r6, lr}
     a8e:	0004      	movs	r4, r0
     a90:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     a92:	1e43      	subs	r3, r0, #1
     a94:	4198      	sbcs	r0, r3
     a96:	b2c0      	uxtb	r0, r0
     a98:	225e      	movs	r2, #94	; 0x5e
     a9a:	4907      	ldr	r1, [pc, #28]	; (ab8 <i2c_m_sync_init+0x2c>)
     a9c:	4b07      	ldr	r3, [pc, #28]	; (abc <i2c_m_sync_init+0x30>)
     a9e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     aa0:	0029      	movs	r1, r5
     aa2:	0020      	movs	r0, r4
     aa4:	4b06      	ldr	r3, [pc, #24]	; (ac0 <i2c_m_sync_init+0x34>)
     aa6:	4798      	blx	r3
	if (init_status) {
     aa8:	2800      	cmp	r0, #0
     aaa:	d103      	bne.n	ab4 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     aac:	4b05      	ldr	r3, [pc, #20]	; (ac4 <i2c_m_sync_init+0x38>)
     aae:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     ab0:	4b05      	ldr	r3, [pc, #20]	; (ac8 <i2c_m_sync_init+0x3c>)
     ab2:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     ab4:	bd70      	pop	{r4, r5, r6, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	0000392c 	.word	0x0000392c
     abc:	00000bf5 	.word	0x00000bf5
     ac0:	000013c5 	.word	0x000013c5
     ac4:	00000a59 	.word	0x00000a59
     ac8:	00000a25 	.word	0x00000a25

00000acc <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     acc:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     ace:	4b01      	ldr	r3, [pc, #4]	; (ad4 <i2c_m_sync_enable+0x8>)
     ad0:	4798      	blx	r3
}
     ad2:	bd10      	pop	{r4, pc}
     ad4:	000013f5 	.word	0x000013f5

00000ad8 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     ad8:	0589      	lsls	r1, r1, #22
     ada:	0d89      	lsrs	r1, r1, #22
     adc:	2380      	movs	r3, #128	; 0x80
     ade:	00db      	lsls	r3, r3, #3
     ae0:	401a      	ands	r2, r3
     ae2:	430a      	orrs	r2, r1
     ae4:	8382      	strh	r2, [r0, #28]
}
     ae6:	0010      	movs	r0, r2
     ae8:	4770      	bx	lr
	...

00000aec <i2c_m_sync_cmd_write>:

/**
 * \brief Sync version of i2c write command
 */
int32_t i2c_m_sync_cmd_write(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     aec:	b570      	push	{r4, r5, r6, lr}
     aee:	b086      	sub	sp, #24
     af0:	0004      	movs	r4, r0
     af2:	0016      	movs	r6, r2
     af4:	001d      	movs	r5, r3
     af6:	466b      	mov	r3, sp
     af8:	71d9      	strb	r1, [r3, #7]
     afa:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     afc:	8b82      	ldrh	r2, [r0, #28]
     afe:	a903      	add	r1, sp, #12
     b00:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     b02:	2201      	movs	r2, #1
     b04:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     b06:	2200      	movs	r2, #0
     b08:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     b0a:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     b0c:	4b07      	ldr	r3, [pc, #28]	; (b2c <i2c_m_sync_cmd_write+0x40>)
     b0e:	4798      	blx	r3

	if (ret != 0) {
     b10:	2800      	cmp	r0, #0
     b12:	d001      	beq.n	b18 <i2c_m_sync_cmd_write+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     b14:	b006      	add	sp, #24
     b16:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP;
     b18:	a903      	add	r1, sp, #12
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <i2c_m_sync_cmd_write+0x44>)
     b1c:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     b1e:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     b20:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     b22:	0020      	movs	r0, r4
     b24:	4b01      	ldr	r3, [pc, #4]	; (b2c <i2c_m_sync_cmd_write+0x40>)
     b26:	4798      	blx	r3
     b28:	e7f4      	b.n	b14 <i2c_m_sync_cmd_write+0x28>
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	00001475 	.word	0x00001475
     b30:	ffff8000 	.word	0xffff8000

00000b34 <i2c_m_sync_cmd_read>:

/**
 * \brief Sync version of i2c read command
 */
int32_t i2c_m_sync_cmd_read(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     b34:	b570      	push	{r4, r5, r6, lr}
     b36:	b086      	sub	sp, #24
     b38:	0004      	movs	r4, r0
     b3a:	0016      	movs	r6, r2
     b3c:	001d      	movs	r5, r3
     b3e:	466b      	mov	r3, sp
     b40:	71d9      	strb	r1, [r3, #7]
     b42:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     b44:	8b82      	ldrh	r2, [r0, #28]
     b46:	a903      	add	r1, sp, #12
     b48:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     b4a:	2201      	movs	r2, #1
     b4c:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     b4e:	2200      	movs	r2, #0
     b50:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     b52:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     b54:	4b07      	ldr	r3, [pc, #28]	; (b74 <i2c_m_sync_cmd_read+0x40>)
     b56:	4798      	blx	r3

	if (ret != 0) {
     b58:	2800      	cmp	r0, #0
     b5a:	d001      	beq.n	b60 <i2c_m_sync_cmd_read+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     b5c:	b006      	add	sp, #24
     b5e:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     b60:	a903      	add	r1, sp, #12
     b62:	4b05      	ldr	r3, [pc, #20]	; (b78 <i2c_m_sync_cmd_read+0x44>)
     b64:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     b66:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     b68:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     b6a:	0020      	movs	r0, r4
     b6c:	4b01      	ldr	r3, [pc, #4]	; (b74 <i2c_m_sync_cmd_read+0x40>)
     b6e:	4798      	blx	r3
     b70:	e7f4      	b.n	b5c <i2c_m_sync_cmd_read+0x28>
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	00001475 	.word	0x00001475
     b78:	ffff8001 	.word	0xffff8001

00000b7c <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     b7c:	3014      	adds	r0, #20
     b7e:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     b80:	2000      	movs	r0, #0
     b82:	4770      	bx	lr

00000b84 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     b84:	b570      	push	{r4, r5, r6, lr}
     b86:	0004      	movs	r4, r0
     b88:	000d      	movs	r5, r1
     b8a:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     b8c:	2800      	cmp	r0, #0
     b8e:	d00e      	beq.n	bae <io_write+0x2a>
     b90:	2900      	cmp	r1, #0
     b92:	d00a      	beq.n	baa <io_write+0x26>
     b94:	2001      	movs	r0, #1
     b96:	2234      	movs	r2, #52	; 0x34
     b98:	4906      	ldr	r1, [pc, #24]	; (bb4 <io_write+0x30>)
     b9a:	4b07      	ldr	r3, [pc, #28]	; (bb8 <io_write+0x34>)
     b9c:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     b9e:	6823      	ldr	r3, [r4, #0]
     ba0:	0032      	movs	r2, r6
     ba2:	0029      	movs	r1, r5
     ba4:	0020      	movs	r0, r4
     ba6:	4798      	blx	r3
}
     ba8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     baa:	2000      	movs	r0, #0
     bac:	e7f3      	b.n	b96 <io_write+0x12>
     bae:	2000      	movs	r0, #0
     bb0:	e7f1      	b.n	b96 <io_write+0x12>
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	00003948 	.word	0x00003948
     bb8:	00000bf5 	.word	0x00000bf5

00000bbc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     bbc:	b570      	push	{r4, r5, r6, lr}
     bbe:	0004      	movs	r4, r0
     bc0:	000d      	movs	r5, r1
     bc2:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     bc4:	2800      	cmp	r0, #0
     bc6:	d00e      	beq.n	be6 <io_read+0x2a>
     bc8:	2900      	cmp	r1, #0
     bca:	d00a      	beq.n	be2 <io_read+0x26>
     bcc:	2001      	movs	r0, #1
     bce:	223d      	movs	r2, #61	; 0x3d
     bd0:	4906      	ldr	r1, [pc, #24]	; (bec <io_read+0x30>)
     bd2:	4b07      	ldr	r3, [pc, #28]	; (bf0 <io_read+0x34>)
     bd4:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     bd6:	6863      	ldr	r3, [r4, #4]
     bd8:	0032      	movs	r2, r6
     bda:	0029      	movs	r1, r5
     bdc:	0020      	movs	r0, r4
     bde:	4798      	blx	r3
}
     be0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     be2:	2000      	movs	r0, #0
     be4:	e7f3      	b.n	bce <io_read+0x12>
     be6:	2000      	movs	r0, #0
     be8:	e7f1      	b.n	bce <io_read+0x12>
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	00003948 	.word	0x00003948
     bf0:	00000bf5 	.word	0x00000bf5

00000bf4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     bf4:	2800      	cmp	r0, #0
     bf6:	d100      	bne.n	bfa <assert+0x6>
		__asm("BKPT #0");
     bf8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     bfa:	4770      	bx	lr

00000bfc <_adc_get_hardware_index>:
static uint8_t _adc_get_hardware_index(const void *const hw)
{

	(void)hw;
	return 0;
}
     bfc:	2000      	movs	r0, #0
     bfe:	4770      	bx	lr

00000c00 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
     c00:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     c02:	4b0b      	ldr	r3, [pc, #44]	; (c30 <_adc_get_regs+0x30>)
     c04:	4798      	blx	r3
     c06:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     c08:	2000      	movs	r0, #0
     c0a:	2800      	cmp	r0, #0
     c0c:	d006      	beq.n	c1c <_adc_get_regs+0x1c>
		if (_adcs[i].number == n) {
			return i;
		}
	}

	ASSERT(false);
     c0e:	228c      	movs	r2, #140	; 0x8c
     c10:	4908      	ldr	r1, [pc, #32]	; (c34 <_adc_get_regs+0x34>)
     c12:	2000      	movs	r0, #0
     c14:	4b08      	ldr	r3, [pc, #32]	; (c38 <_adc_get_regs+0x38>)
     c16:	4798      	blx	r3
	return 0;
     c18:	2000      	movs	r0, #0
}
     c1a:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     c1c:	00c3      	lsls	r3, r0, #3
     c1e:	1a1b      	subs	r3, r3, r0
     c20:	0099      	lsls	r1, r3, #2
     c22:	4b06      	ldr	r3, [pc, #24]	; (c3c <_adc_get_regs+0x3c>)
     c24:	5ccb      	ldrb	r3, [r1, r3]
     c26:	429a      	cmp	r2, r3
     c28:	d0f7      	beq.n	c1a <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     c2a:	3001      	adds	r0, #1
     c2c:	b2c0      	uxtb	r0, r0
     c2e:	e7ec      	b.n	c0a <_adc_get_regs+0xa>
     c30:	00000bfd 	.word	0x00000bfd
     c34:	00003978 	.word	0x00003978
     c38:	00000bf5 	.word	0x00000bf5
     c3c:	0000395c 	.word	0x0000395c

00000c40 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     c40:	b570      	push	{r4, r5, r6, lr}
     c42:	0004      	movs	r4, r0
     c44:	000d      	movs	r5, r1
	uint16_t calib_reg = 0;
	calib_reg          = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC_FUSES_BIASREFBUF_ADDR >> ADC_FUSES_BIASREFBUF_Pos))
     c46:	4b4b      	ldr	r3, [pc, #300]	; (d74 <_adc_init+0x134>)
     c48:	681b      	ldr	r3, [r3, #0]
     c4a:	021e      	lsls	r6, r3, #8
     c4c:	22e0      	movs	r2, #224	; 0xe0
     c4e:	00d2      	lsls	r2, r2, #3
     c50:	4032      	ands	r2, r6
	            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC_FUSES_BIASCOMP_ADDR >> ADC_FUSES_BIASCOMP_Pos));
     c52:	08db      	lsrs	r3, r3, #3
     c54:	2607      	movs	r6, #7
     c56:	401e      	ands	r6, r3
	calib_reg          = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC_FUSES_BIASREFBUF_ADDR >> ADC_FUSES_BIASREFBUF_Pos))
     c58:	4316      	orrs	r6, r2

	ASSERT(hw == ADC);
     c5a:	4b47      	ldr	r3, [pc, #284]	; (d78 <_adc_init+0x138>)
     c5c:	18c0      	adds	r0, r0, r3
     c5e:	4243      	negs	r3, r0
     c60:	4158      	adcs	r0, r3
     c62:	b2c0      	uxtb	r0, r0
     c64:	22ad      	movs	r2, #173	; 0xad
     c66:	4945      	ldr	r1, [pc, #276]	; (d7c <_adc_init+0x13c>)
     c68:	4b45      	ldr	r3, [pc, #276]	; (d80 <_adc_init+0x140>)
     c6a:	4798      	blx	r3
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     c6c:	8c23      	ldrh	r3, [r4, #32]

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     c6e:	07db      	lsls	r3, r3, #31
     c70:	d414      	bmi.n	c9c <_adc_init+0x5c>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c72:	8c23      	ldrh	r3, [r4, #32]
     c74:	079b      	lsls	r3, r3, #30
     c76:	d1fc      	bne.n	c72 <_adc_init+0x32>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     c78:	7823      	ldrb	r3, [r4, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     c7a:	079b      	lsls	r3, r3, #30
     c7c:	d509      	bpl.n	c92 <_adc_init+0x52>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     c7e:	7823      	ldrb	r3, [r4, #0]
     c80:	2202      	movs	r2, #2
     c82:	4393      	bics	r3, r2
     c84:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c86:	8c23      	ldrh	r3, [r4, #32]
     c88:	079b      	lsls	r3, r3, #30
     c8a:	d1fc      	bne.n	c86 <_adc_init+0x46>
     c8c:	8c23      	ldrh	r3, [r4, #32]
     c8e:	079b      	lsls	r3, r3, #30
     c90:	d4fc      	bmi.n	c8c <_adc_init+0x4c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     c92:	2301      	movs	r3, #1
     c94:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c96:	8c23      	ldrh	r3, [r4, #32]
     c98:	079b      	lsls	r3, r3, #30
     c9a:	d1fc      	bne.n	c96 <_adc_init+0x56>
     c9c:	8c23      	ldrh	r3, [r4, #32]
     c9e:	07db      	lsls	r3, r3, #31
     ca0:	d4fc      	bmi.n	c9c <_adc_init+0x5c>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     ca2:	85a6      	strh	r6, [r4, #44]	; 0x2c
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     ca4:	00ea      	lsls	r2, r5, #3
     ca6:	1b52      	subs	r2, r2, r5
     ca8:	0091      	lsls	r1, r2, #2
     caa:	4b36      	ldr	r3, [pc, #216]	; (d84 <_adc_init+0x144>)
     cac:	185b      	adds	r3, r3, r1
     cae:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->CTRLB.reg = data;
     cb0:	7062      	strb	r2, [r4, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     cb2:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->REFCTRL.reg = data;
     cb4:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     cb6:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->EVCTRL.reg = data;
     cb8:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     cba:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->INPUTCTRL.reg = data;
     cbc:	8123      	strh	r3, [r4, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cbe:	8c23      	ldrh	r3, [r4, #32]
     cc0:	055b      	lsls	r3, r3, #21
     cc2:	d1fc      	bne.n	cbe <_adc_init+0x7e>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     cc4:	00eb      	lsls	r3, r5, #3
     cc6:	1b5b      	subs	r3, r3, r5
     cc8:	009a      	lsls	r2, r3, #2
     cca:	4b2e      	ldr	r3, [pc, #184]	; (d84 <_adc_init+0x144>)
     ccc:	189b      	adds	r3, r3, r2
     cce:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->CTRLC.reg = data;
     cd0:	8163      	strh	r3, [r4, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cd2:	8c23      	ldrh	r3, [r4, #32]
     cd4:	055b      	lsls	r3, r3, #21
     cd6:	d1fc      	bne.n	cd2 <_adc_init+0x92>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     cd8:	00eb      	lsls	r3, r5, #3
     cda:	1b5b      	subs	r3, r3, r5
     cdc:	009a      	lsls	r2, r3, #2
     cde:	4b29      	ldr	r3, [pc, #164]	; (d84 <_adc_init+0x144>)
     ce0:	189b      	adds	r3, r3, r2
     ce2:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
     ce4:	7323      	strb	r3, [r4, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ce6:	8c23      	ldrh	r3, [r4, #32]
     ce8:	055b      	lsls	r3, r3, #21
     cea:	d1fc      	bne.n	ce6 <_adc_init+0xa6>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     cec:	00eb      	lsls	r3, r5, #3
     cee:	1b5b      	subs	r3, r3, r5
     cf0:	009a      	lsls	r2, r3, #2
     cf2:	4b24      	ldr	r3, [pc, #144]	; (d84 <_adc_init+0x144>)
     cf4:	189b      	adds	r3, r3, r2
     cf6:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
     cf8:	7363      	strb	r3, [r4, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cfa:	8c23      	ldrh	r3, [r4, #32]
     cfc:	055b      	lsls	r3, r3, #21
     cfe:	d1fc      	bne.n	cfa <_adc_init+0xba>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     d00:	00eb      	lsls	r3, r5, #3
     d02:	1b5b      	subs	r3, r3, r5
     d04:	009a      	lsls	r2, r3, #2
     d06:	4b1f      	ldr	r3, [pc, #124]	; (d84 <_adc_init+0x144>)
     d08:	189b      	adds	r3, r3, r2
     d0a:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
     d0c:	81e3      	strh	r3, [r4, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d0e:	8c23      	ldrh	r3, [r4, #32]
     d10:	065b      	lsls	r3, r3, #25
     d12:	d4fc      	bmi.n	d0e <_adc_init+0xce>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     d14:	00eb      	lsls	r3, r5, #3
     d16:	1b5b      	subs	r3, r3, r5
     d18:	009a      	lsls	r2, r3, #2
     d1a:	4b1a      	ldr	r3, [pc, #104]	; (d84 <_adc_init+0x144>)
     d1c:	189b      	adds	r3, r3, r2
     d1e:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
     d20:	8223      	strh	r3, [r4, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d22:	8c23      	ldrh	r3, [r4, #32]
     d24:	061b      	lsls	r3, r3, #24
     d26:	d4fc      	bmi.n	d22 <_adc_init+0xe2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     d28:	00eb      	lsls	r3, r5, #3
     d2a:	1b5b      	subs	r3, r3, r5
     d2c:	009a      	lsls	r2, r3, #2
     d2e:	4b15      	ldr	r3, [pc, #84]	; (d84 <_adc_init+0x144>)
     d30:	189b      	adds	r3, r3, r2
     d32:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
     d34:	8263      	strh	r3, [r4, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d36:	8c23      	ldrh	r3, [r4, #32]
     d38:	05db      	lsls	r3, r3, #23
     d3a:	d4fc      	bmi.n	d36 <_adc_init+0xf6>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     d3c:	00eb      	lsls	r3, r5, #3
     d3e:	1b5b      	subs	r3, r3, r5
     d40:	009a      	lsls	r2, r3, #2
     d42:	4b10      	ldr	r3, [pc, #64]	; (d84 <_adc_init+0x144>)
     d44:	189b      	adds	r3, r3, r2
     d46:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
     d48:	82a3      	strh	r3, [r4, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d4a:	8c23      	ldrh	r3, [r4, #32]
     d4c:	059b      	lsls	r3, r3, #22
     d4e:	d4fc      	bmi.n	d4a <_adc_init+0x10a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     d50:	4a0c      	ldr	r2, [pc, #48]	; (d84 <_adc_init+0x144>)
     d52:	00eb      	lsls	r3, r5, #3
     d54:	1b58      	subs	r0, r3, r5
     d56:	0081      	lsls	r1, r0, #2
     d58:	0008      	movs	r0, r1
     d5a:	1851      	adds	r1, r2, r1
     d5c:	7d09      	ldrb	r1, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
     d5e:	7721      	strb	r1, [r4, #28]
	((Adc *)hw)->SEQCTRL.reg = data;
     d60:	2100      	movs	r1, #0
     d62:	62a1      	str	r1, [r4, #40]	; 0x28
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     d64:	1812      	adds	r2, r2, r0
     d66:	7853      	ldrb	r3, [r2, #1]
	((Adc *)hw)->CTRLA.reg = data;
     d68:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d6a:	8c23      	ldrh	r3, [r4, #32]
     d6c:	079b      	lsls	r3, r3, #30
     d6e:	d1fc      	bne.n	d6a <_adc_init+0x12a>

	return ERR_NONE;
}
     d70:	2000      	movs	r0, #0
     d72:	bd70      	pop	{r4, r5, r6, pc}
     d74:	00806020 	.word	0x00806020
     d78:	bcfff400 	.word	0xbcfff400
     d7c:	00003978 	.word	0x00003978
     d80:	00000bf5 	.word	0x00000bf5
     d84:	0000395c 	.word	0x0000395c

00000d88 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     d88:	b570      	push	{r4, r5, r6, lr}
     d8a:	0005      	movs	r5, r0
     d8c:	000c      	movs	r4, r1
	ASSERT(device);
     d8e:	1e43      	subs	r3, r0, #1
     d90:	4198      	sbcs	r0, r3
     d92:	b2c0      	uxtb	r0, r0
     d94:	22db      	movs	r2, #219	; 0xdb
     d96:	4906      	ldr	r1, [pc, #24]	; (db0 <_adc_sync_init+0x28>)
     d98:	4b06      	ldr	r3, [pc, #24]	; (db4 <_adc_sync_init+0x2c>)
     d9a:	4798      	blx	r3

	device->hw = hw;
     d9c:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     d9e:	0020      	movs	r0, r4
     da0:	4b05      	ldr	r3, [pc, #20]	; (db8 <_adc_sync_init+0x30>)
     da2:	4798      	blx	r3
     da4:	0001      	movs	r1, r0
     da6:	0020      	movs	r0, r4
     da8:	4b04      	ldr	r3, [pc, #16]	; (dbc <_adc_sync_init+0x34>)
     daa:	4798      	blx	r3
}
     dac:	bd70      	pop	{r4, r5, r6, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	00003978 	.word	0x00003978
     db4:	00000bf5 	.word	0x00000bf5
     db8:	00000c01 	.word	0x00000c01
     dbc:	00000c41 	.word	0x00000c41

00000dc0 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     dc0:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     dc2:	7813      	ldrb	r3, [r2, #0]
     dc4:	2102      	movs	r1, #2
     dc6:	430b      	orrs	r3, r1
     dc8:	b2db      	uxtb	r3, r3
     dca:	7013      	strb	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     dcc:	8c13      	ldrh	r3, [r2, #32]
     dce:	079b      	lsls	r3, r3, #30
     dd0:	d1fc      	bne.n	dcc <_adc_sync_enable_channel+0xc>
}
     dd2:	4770      	bx	lr

00000dd4 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     dd4:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLC.reg;
     dd6:	895a      	ldrh	r2, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
     dd8:	0912      	lsrs	r2, r2, #4
     dda:	2303      	movs	r3, #3
     ddc:	4013      	ands	r3, r2
     dde:	2b03      	cmp	r3, #3
     de0:	d001      	beq.n	de6 <_adc_sync_get_data_size+0x12>
     de2:	2002      	movs	r0, #2
}
     de4:	4770      	bx	lr
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     de6:	2001      	movs	r0, #1
     de8:	e7fc      	b.n	de4 <_adc_sync_get_data_size+0x10>

00000dea <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
     dea:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
     dec:	7998      	ldrb	r0, [r3, #6]
     dee:	2301      	movs	r3, #1
     df0:	4018      	ands	r0, r3
}
     df2:	4770      	bx	lr

00000df4 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
     df4:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
     df6:	7e13      	ldrb	r3, [r2, #24]
     df8:	2102      	movs	r1, #2
     dfa:	430b      	orrs	r3, r1
     dfc:	b2db      	uxtb	r3, r3
     dfe:	7613      	strb	r3, [r2, #24]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     e00:	8c13      	ldrh	r3, [r2, #32]
     e02:	055b      	lsls	r3, r3, #21
     e04:	d1fc      	bne.n	e00 <_adc_sync_convert+0xc>
}
     e06:	4770      	bx	lr

00000e08 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
     e08:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
     e0a:	8c98      	ldrh	r0, [r3, #36]	; 0x24
     e0c:	b280      	uxth	r0, r0
}
     e0e:	4770      	bx	lr

00000e10 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     e10:	b510      	push	{r4, lr}
     e12:	0003      	movs	r3, r0
		return (us * (freq / 10000) + 299) / 300;
     e14:	20c8      	movs	r0, #200	; 0xc8
     e16:	0080      	lsls	r0, r0, #2
     e18:	4358      	muls	r0, r3
     e1a:	302c      	adds	r0, #44	; 0x2c
     e1c:	30ff      	adds	r0, #255	; 0xff
     e1e:	2196      	movs	r1, #150	; 0x96
     e20:	0049      	lsls	r1, r1, #1
     e22:	4b01      	ldr	r3, [pc, #4]	; (e28 <_get_cycles_for_us+0x18>)
     e24:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     e26:	bd10      	pop	{r4, pc}
     e28:	00001fd9 	.word	0x00001fd9

00000e2c <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     e2c:	3901      	subs	r1, #1
     e2e:	d8fd      	bhi.n	e2c <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     e30:	4770      	bx	lr
	...

00000e34 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e34:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     e36:	4b0a      	ldr	r3, [pc, #40]	; (e60 <_init_chip+0x2c>)
     e38:	685a      	ldr	r2, [r3, #4]
     e3a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     e3c:	2002      	movs	r0, #2
     e3e:	4b09      	ldr	r3, [pc, #36]	; (e64 <_init_chip+0x30>)
     e40:	4798      	blx	r3

	_osc32kctrl_init_sources();
     e42:	4b09      	ldr	r3, [pc, #36]	; (e68 <_init_chip+0x34>)
     e44:	4798      	blx	r3
	_oscctrl_init_sources();
     e46:	4b09      	ldr	r3, [pc, #36]	; (e6c <_init_chip+0x38>)
     e48:	4798      	blx	r3
	_mclk_init();
     e4a:	4b09      	ldr	r3, [pc, #36]	; (e70 <_init_chip+0x3c>)
     e4c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     e4e:	2002      	movs	r0, #2
     e50:	4c08      	ldr	r4, [pc, #32]	; (e74 <_init_chip+0x40>)
     e52:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     e54:	4b08      	ldr	r3, [pc, #32]	; (e78 <_init_chip+0x44>)
     e56:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e58:	20fd      	movs	r0, #253	; 0xfd
     e5a:	47a0      	blx	r4
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     e5c:	bd10      	pop	{r4, pc}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	41004000 	.word	0x41004000
     e64:	00000ff1 	.word	0x00000ff1
     e68:	00000efd 	.word	0x00000efd
     e6c:	00000f19 	.word	0x00000f19
     e70:	00000ee9 	.word	0x00000ee9
     e74:	00000e7d 	.word	0x00000e7d
     e78:	00000f51 	.word	0x00000f51

00000e7c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     e7c:	07c3      	lsls	r3, r0, #31
     e7e:	d507      	bpl.n	e90 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e80:	4a13      	ldr	r2, [pc, #76]	; (ed0 <_gclk_init_generators_by_fref+0x54>)
     e82:	4b14      	ldr	r3, [pc, #80]	; (ed4 <_gclk_init_generators_by_fref+0x58>)
     e84:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e86:	4b13      	ldr	r3, [pc, #76]	; (ed4 <_gclk_init_generators_by_fref+0x58>)
     e88:	685a      	ldr	r2, [r3, #4]
     e8a:	4b13      	ldr	r3, [pc, #76]	; (ed8 <_gclk_init_generators_by_fref+0x5c>)
     e8c:	421a      	tst	r2, r3
     e8e:	d1fa      	bne.n	e86 <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     e90:	0783      	lsls	r3, r0, #30
     e92:	d507      	bpl.n	ea4 <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e94:	4a11      	ldr	r2, [pc, #68]	; (edc <_gclk_init_generators_by_fref+0x60>)
     e96:	4b0f      	ldr	r3, [pc, #60]	; (ed4 <_gclk_init_generators_by_fref+0x58>)
     e98:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e9a:	4b0e      	ldr	r3, [pc, #56]	; (ed4 <_gclk_init_generators_by_fref+0x58>)
     e9c:	685a      	ldr	r2, [r3, #4]
     e9e:	4b0e      	ldr	r3, [pc, #56]	; (ed8 <_gclk_init_generators_by_fref+0x5c>)
     ea0:	421a      	tst	r2, r3
     ea2:	d1fa      	bne.n	e9a <_gclk_init_generators_by_fref+0x1e>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     ea4:	0743      	lsls	r3, r0, #29
     ea6:	d507      	bpl.n	eb8 <_gclk_init_generators_by_fref+0x3c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ea8:	4a0d      	ldr	r2, [pc, #52]	; (ee0 <_gclk_init_generators_by_fref+0x64>)
     eaa:	4b0a      	ldr	r3, [pc, #40]	; (ed4 <_gclk_init_generators_by_fref+0x58>)
     eac:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     eae:	4b09      	ldr	r3, [pc, #36]	; (ed4 <_gclk_init_generators_by_fref+0x58>)
     eb0:	685a      	ldr	r2, [r3, #4]
     eb2:	4b09      	ldr	r3, [pc, #36]	; (ed8 <_gclk_init_generators_by_fref+0x5c>)
     eb4:	421a      	tst	r2, r3
     eb6:	d1fa      	bne.n	eae <_gclk_init_generators_by_fref+0x32>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
     eb8:	06c3      	lsls	r3, r0, #27
     eba:	d507      	bpl.n	ecc <_gclk_init_generators_by_fref+0x50>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ebc:	4a09      	ldr	r2, [pc, #36]	; (ee4 <_gclk_init_generators_by_fref+0x68>)
     ebe:	4b05      	ldr	r3, [pc, #20]	; (ed4 <_gclk_init_generators_by_fref+0x58>)
     ec0:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ec2:	4b04      	ldr	r3, [pc, #16]	; (ed4 <_gclk_init_generators_by_fref+0x58>)
     ec4:	685a      	ldr	r2, [r3, #4]
     ec6:	4b04      	ldr	r3, [pc, #16]	; (ed8 <_gclk_init_generators_by_fref+0x5c>)
     ec8:	421a      	tst	r2, r3
     eca:	d1fa      	bne.n	ec2 <_gclk_init_generators_by_fref+0x46>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     ecc:	4770      	bx	lr
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	00010106 	.word	0x00010106
     ed4:	40001800 	.word	0x40001800
     ed8:	000007fd 	.word	0x000007fd
     edc:	00010103 	.word	0x00010103
     ee0:	00020106 	.word	0x00020106
     ee4:	00080906 	.word	0x00080906

00000ee8 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     ee8:	4b03      	ldr	r3, [pc, #12]	; (ef8 <_mclk_init+0x10>)
     eea:	2208      	movs	r2, #8
     eec:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     eee:	3a04      	subs	r2, #4
     ef0:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     ef2:	3a03      	subs	r2, #3
     ef4:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     ef6:	4770      	bx	lr
     ef8:	40000400 	.word	0x40000400

00000efc <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     efc:	4a05      	ldr	r2, [pc, #20]	; (f14 <_osc32kctrl_init_sources+0x18>)
     efe:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     f00:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     f02:	021b      	lsls	r3, r3, #8
     f04:	21f8      	movs	r1, #248	; 0xf8
     f06:	0149      	lsls	r1, r1, #5
     f08:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     f0a:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     f0c:	2301      	movs	r3, #1
     f0e:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     f10:	4770      	bx	lr
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	40001000 	.word	0x40001000

00000f18 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     f18:	2286      	movs	r2, #134	; 0x86
     f1a:	4b0c      	ldr	r3, [pc, #48]	; (f4c <_oscctrl_init_sources+0x34>)
     f1c:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f1e:	2338      	movs	r3, #56	; 0x38
     f20:	4a0a      	ldr	r2, [pc, #40]	; (f4c <_oscctrl_init_sources+0x34>)
     f22:	5cd3      	ldrb	r3, [r2, r3]
     f24:	079b      	lsls	r3, r3, #30
     f26:	d4fa      	bmi.n	f1e <_oscctrl_init_sources+0x6>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     f28:	4b08      	ldr	r3, [pc, #32]	; (f4c <_oscctrl_init_sources+0x34>)
     f2a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     f2c:	06db      	lsls	r3, r3, #27
     f2e:	d5fb      	bpl.n	f28 <_oscctrl_init_sources+0x10>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     f30:	4a06      	ldr	r2, [pc, #24]	; (f4c <_oscctrl_init_sources+0x34>)
     f32:	7d13      	ldrb	r3, [r2, #20]
     f34:	2180      	movs	r1, #128	; 0x80
     f36:	4249      	negs	r1, r1
     f38:	430b      	orrs	r3, r1
     f3a:	b2db      	uxtb	r3, r3
     f3c:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f3e:	2338      	movs	r3, #56	; 0x38
     f40:	4a02      	ldr	r2, [pc, #8]	; (f4c <_oscctrl_init_sources+0x34>)
     f42:	5cd2      	ldrb	r2, [r2, r3]
     f44:	3b2a      	subs	r3, #42	; 0x2a
     f46:	421a      	tst	r2, r3
     f48:	d1f9      	bne.n	f3e <_oscctrl_init_sources+0x26>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     f4a:	4770      	bx	lr
     f4c:	40000c00 	.word	0x40000c00

00000f50 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_OVERWRITE_CALIBRATION == 0
#define NVM_DFLL_COARSE_POS 26
#define NVM_DFLL_COARSE_SIZE 6
	uint32_t coarse;
	coarse = *((uint32_t *)(NVMCTRL_OTP5)) >> NVM_DFLL_COARSE_POS;
     f50:	4b23      	ldr	r3, [pc, #140]	; (fe0 <_oscctrl_init_referenced_generators+0x90>)
     f52:	6819      	ldr	r1, [r3, #0]
     f54:	0e89      	lsrs	r1, r1, #26
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     f56:	2041      	movs	r0, #65	; 0x41
     f58:	2380      	movs	r3, #128	; 0x80
     f5a:	4a22      	ldr	r2, [pc, #136]	; (fe4 <_oscctrl_init_referenced_generators+0x94>)
     f5c:	50d0      	str	r0, [r2, r3]
}

static inline void hri_oscctrl_write_DFLLCTRL_reg(const void *const hw, hri_oscctrl_dfllctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRL.reg = data;
     f5e:	2202      	movs	r2, #2
     f60:	4b21      	ldr	r3, [pc, #132]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     f62:	831a      	strh	r2, [r3, #24]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f64:	2338      	movs	r3, #56	; 0x38
     f66:	4a20      	ldr	r2, [pc, #128]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     f68:	5cd3      	ldrb	r3, [r2, r3]
     f6a:	079b      	lsls	r3, r3, #30
     f6c:	d4fa      	bmi.n	f64 <_oscctrl_init_referenced_generators+0x14>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     f6e:	4b1e      	ldr	r3, [pc, #120]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     f70:	68db      	ldr	r3, [r3, #12]
#endif
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(GCLK, 0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif
	hri_oscctrl_write_DFLLCTRL_reg(hw, OSCCTRL_DFLLCTRL_ENABLE);
	while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     f72:	05db      	lsls	r3, r3, #23
     f74:	d5fb      	bpl.n	f6e <_oscctrl_init_referenced_generators+0x1e>
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     f76:	4a1d      	ldr	r2, [pc, #116]	; (fec <_oscctrl_init_referenced_generators+0x9c>)
     f78:	4b1b      	ldr	r3, [pc, #108]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     f7a:	621a      	str	r2, [r3, #32]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     f7c:	4b1a      	ldr	r3, [pc, #104]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     f7e:	68db      	ldr	r3, [r3, #12]
		;
	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     f80:	05db      	lsls	r3, r3, #23
     f82:	d5fb      	bpl.n	f7c <_oscctrl_init_referenced_generators+0x2c>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 0
	/* FINE is set to fixed value, which defined by DFLL48M Characteristics */
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(coarse) | OSCCTRL_DFLLVAL_FINE(512));
     f84:	0289      	lsls	r1, r1, #10
     f86:	2380      	movs	r3, #128	; 0x80
     f88:	009b      	lsls	r3, r3, #2
     f8a:	430b      	orrs	r3, r1
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     f8c:	4a16      	ldr	r2, [pc, #88]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     f8e:	61d3      	str	r3, [r2, #28]
	((Oscctrl *)hw)->DFLLCTRL.reg = data;
     f90:	2306      	movs	r3, #6
     f92:	8313      	strh	r3, [r2, #24]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f94:	2338      	movs	r3, #56	; 0x38
     f96:	4a14      	ldr	r2, [pc, #80]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     f98:	5cd3      	ldrb	r3, [r2, r3]
     f9a:	079b      	lsls	r3, r3, #30
     f9c:	d4fa      	bmi.n	f94 <_oscctrl_init_referenced_generators+0x44>
	tmp = ((Oscctrl *)hw)->DFLLCTRL.reg;
     f9e:	8b13      	ldrh	r3, [r2, #24]
	                                    | (CONF_DPLL_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRL_MODE_bit(hw)) {
     fa0:	075b      	lsls	r3, r3, #29
     fa2:	d517      	bpl.n	fd4 <_oscctrl_init_referenced_generators+0x84>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     fa4:	4b10      	ldr	r3, [pc, #64]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     fa6:	68db      	ldr	r3, [r3, #12]
	tmp &= mask;
     fa8:	2290      	movs	r2, #144	; 0x90
     faa:	0112      	lsls	r2, r2, #4
     fac:	4013      	ands	r3, r2
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     fae:	4293      	cmp	r3, r2
     fb0:	d1f8      	bne.n	fa4 <_oscctrl_init_referenced_generators+0x54>
	((Oscctrl *)hw)->DFLLCTRL.reg |= OSCCTRL_DFLLCTRL_ONDEMAND;
     fb2:	4a0d      	ldr	r2, [pc, #52]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     fb4:	8b13      	ldrh	r3, [r2, #24]
     fb6:	2180      	movs	r1, #128	; 0x80
     fb8:	430b      	orrs	r3, r1
     fba:	b29b      	uxth	r3, r3
     fbc:	8313      	strh	r3, [r2, #24]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     fbe:	2338      	movs	r3, #56	; 0x38
     fc0:	4a09      	ldr	r2, [pc, #36]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     fc2:	5cd2      	ldrb	r2, [r2, r3]
     fc4:	3b2a      	subs	r3, #42	; 0x2a
     fc6:	421a      	tst	r2, r3
     fc8:	d1f9      	bne.n	fbe <_oscctrl_init_referenced_generators+0x6e>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     fca:	4b06      	ldr	r3, [pc, #24]	; (fe4 <_oscctrl_init_referenced_generators+0x94>)
     fcc:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     fce:	2b00      	cmp	r3, #0
     fd0:	d1fb      	bne.n	fca <_oscctrl_init_referenced_generators+0x7a>
		;
#endif
	(void)hw, (void)tmp;
}
     fd2:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     fd4:	4b04      	ldr	r3, [pc, #16]	; (fe8 <_oscctrl_init_referenced_generators+0x98>)
     fd6:	68db      	ldr	r3, [r3, #12]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     fd8:	05db      	lsls	r3, r3, #23
     fda:	d5fb      	bpl.n	fd4 <_oscctrl_init_referenced_generators+0x84>
     fdc:	e7e9      	b.n	fb2 <_oscctrl_init_referenced_generators+0x62>
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	00806020 	.word	0x00806020
     fe4:	40001800 	.word	0x40001800
     fe8:	40000c00 	.word	0x40000c00
     fec:	040105b9 	.word	0x040105b9

00000ff0 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     ff0:	2380      	movs	r3, #128	; 0x80
     ff2:	05db      	lsls	r3, r3, #23
     ff4:	789b      	ldrb	r3, [r3, #2]
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
     ff6:	2203      	movs	r2, #3
     ff8:	4013      	ands	r3, r2
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     ffa:	4298      	cmp	r0, r3
     ffc:	d00e      	beq.n	101c <_set_performance_level+0x2c>
	((Pm *)hw)->INTFLAG.reg = mask;
     ffe:	2280      	movs	r2, #128	; 0x80
    1000:	05d2      	lsls	r2, r2, #23
    1002:	23ff      	movs	r3, #255	; 0xff
    1004:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    1006:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    1008:	2103      	movs	r1, #3
    100a:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
    100c:	4008      	ands	r0, r1
    100e:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
    1010:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    1012:	2380      	movs	r3, #128	; 0x80
    1014:	05db      	lsls	r3, r3, #23
    1016:	799b      	ldrb	r3, [r3, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    1018:	2b00      	cmp	r3, #0
    101a:	d0fa      	beq.n	1012 <_set_performance_level+0x22>
			;
	}
}
    101c:	4770      	bx	lr
	...

00001020 <_sercom_get_hardware_index>:
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    1020:	4b05      	ldr	r3, [pc, #20]	; (1038 <_sercom_get_hardware_index+0x18>)
    1022:	4298      	cmp	r0, r3
    1024:	d006      	beq.n	1034 <_sercom_get_hardware_index+0x14>
		return 5;
	}

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1026:	23be      	movs	r3, #190	; 0xbe
    1028:	061b      	lsls	r3, r3, #24
    102a:	469c      	mov	ip, r3
    102c:	4460      	add	r0, ip
    102e:	0a80      	lsrs	r0, r0, #10
    1030:	b2c0      	uxtb	r0, r0
}
    1032:	4770      	bx	lr
		return 5;
    1034:	2005      	movs	r0, #5
    1036:	e7fc      	b.n	1032 <_sercom_get_hardware_index+0x12>
    1038:	43000400 	.word	0x43000400

0000103c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    103c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    103e:	4b0d      	ldr	r3, [pc, #52]	; (1074 <_get_i2cm_index+0x38>)
    1040:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1042:	2300      	movs	r3, #0
    1044:	2b00      	cmp	r3, #0
    1046:	d007      	beq.n	1058 <_get_i2cm_index+0x1c>
		if (_i2cms[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1048:	4a0b      	ldr	r2, [pc, #44]	; (1078 <_get_i2cm_index+0x3c>)
    104a:	490c      	ldr	r1, [pc, #48]	; (107c <_get_i2cm_index+0x40>)
    104c:	2000      	movs	r0, #0
    104e:	4b0c      	ldr	r3, [pc, #48]	; (1080 <_get_i2cm_index+0x44>)
    1050:	4798      	blx	r3
	return -1;
    1052:	2001      	movs	r0, #1
    1054:	4240      	negs	r0, r0
}
    1056:	bd10      	pop	{r4, pc}
		if (_i2cms[i].number == sercom_offset) {
    1058:	005a      	lsls	r2, r3, #1
    105a:	18d2      	adds	r2, r2, r3
    105c:	00d1      	lsls	r1, r2, #3
    105e:	4a09      	ldr	r2, [pc, #36]	; (1084 <_get_i2cm_index+0x48>)
    1060:	1852      	adds	r2, r2, r1
    1062:	7d12      	ldrb	r2, [r2, #20]
    1064:	4290      	cmp	r0, r2
    1066:	d002      	beq.n	106e <_get_i2cm_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1068:	3301      	adds	r3, #1
    106a:	b2db      	uxtb	r3, r3
    106c:	e7ea      	b.n	1044 <_get_i2cm_index+0x8>
			return i;
    106e:	b258      	sxtb	r0, r3
    1070:	e7f1      	b.n	1056 <_get_i2cm_index+0x1a>
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	00001021 	.word	0x00001021
    1078:	0000039b 	.word	0x0000039b
    107c:	000039e0 	.word	0x000039e0
    1080:	00000bf5 	.word	0x00000bf5
    1084:	00003990 	.word	0x00003990

00001088 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1088:	b570      	push	{r4, r5, r6, lr}
    108a:	0005      	movs	r5, r0
    108c:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    108e:	0008      	movs	r0, r1
    1090:	4b2d      	ldr	r3, [pc, #180]	; (1148 <_i2c_m_sync_init_impl+0xc0>)
    1092:	4798      	blx	r3
    1094:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1096:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1098:	07db      	lsls	r3, r3, #31
    109a:	d41d      	bmi.n	10d8 <_i2c_m_sync_init_impl+0x50>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    109c:	0043      	lsls	r3, r0, #1
    109e:	181b      	adds	r3, r3, r0
    10a0:	00da      	lsls	r2, r3, #3
    10a2:	4b2a      	ldr	r3, [pc, #168]	; (114c <_i2c_m_sync_init_impl+0xc4>)
    10a4:	189b      	adds	r3, r3, r2
    10a6:	699a      	ldr	r2, [r3, #24]
    10a8:	231c      	movs	r3, #28
    10aa:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10ac:	69e3      	ldr	r3, [r4, #28]
    10ae:	079b      	lsls	r3, r3, #30
    10b0:	d1fc      	bne.n	10ac <_i2c_m_sync_init_impl+0x24>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    10b2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    10b4:	079b      	lsls	r3, r3, #30
    10b6:	d509      	bpl.n	10cc <_i2c_m_sync_init_impl+0x44>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    10b8:	6823      	ldr	r3, [r4, #0]
    10ba:	2102      	movs	r1, #2
    10bc:	438b      	bics	r3, r1
    10be:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10c0:	69e3      	ldr	r3, [r4, #28]
    10c2:	079b      	lsls	r3, r3, #30
    10c4:	d1fc      	bne.n	10c0 <_i2c_m_sync_init_impl+0x38>
    10c6:	69e3      	ldr	r3, [r4, #28]
    10c8:	079b      	lsls	r3, r3, #30
    10ca:	d4fc      	bmi.n	10c6 <_i2c_m_sync_init_impl+0x3e>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    10cc:	2301      	movs	r3, #1
    10ce:	4313      	orrs	r3, r2
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    10d0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10d2:	69e3      	ldr	r3, [r4, #28]
    10d4:	079b      	lsls	r3, r3, #30
    10d6:	d1fc      	bne.n	10d2 <_i2c_m_sync_init_impl+0x4a>
    10d8:	69e3      	ldr	r3, [r4, #28]
    10da:	07db      	lsls	r3, r3, #31
    10dc:	d4fc      	bmi.n	10d8 <_i2c_m_sync_init_impl+0x50>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    10de:	0043      	lsls	r3, r0, #1
    10e0:	181b      	adds	r3, r3, r0
    10e2:	00da      	lsls	r2, r3, #3
    10e4:	4b19      	ldr	r3, [pc, #100]	; (114c <_i2c_m_sync_init_impl+0xc4>)
    10e6:	189b      	adds	r3, r3, r2
    10e8:	699b      	ldr	r3, [r3, #24]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    10ea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10ec:	69e3      	ldr	r3, [r4, #28]
    10ee:	079b      	lsls	r3, r3, #30
    10f0:	d1fc      	bne.n	10ec <_i2c_m_sync_init_impl+0x64>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    10f2:	0043      	lsls	r3, r0, #1
    10f4:	181b      	adds	r3, r3, r0
    10f6:	00da      	lsls	r2, r3, #3
    10f8:	4b14      	ldr	r3, [pc, #80]	; (114c <_i2c_m_sync_init_impl+0xc4>)
    10fa:	189b      	adds	r3, r3, r2
    10fc:	69db      	ldr	r3, [r3, #28]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    10fe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1100:	69e3      	ldr	r3, [r4, #28]
    1102:	075b      	lsls	r3, r3, #29
    1104:	d4fc      	bmi.n	1100 <_i2c_m_sync_init_impl+0x78>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1106:	0042      	lsls	r2, r0, #1
    1108:	1812      	adds	r2, r2, r0
    110a:	00d1      	lsls	r1, r2, #3
    110c:	4b0f      	ldr	r3, [pc, #60]	; (114c <_i2c_m_sync_init_impl+0xc4>)
    110e:	185b      	adds	r3, r3, r1
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1110:	6a1a      	ldr	r2, [r3, #32]
    1112:	60e2      	str	r2, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1114:	7eda      	ldrb	r2, [r3, #27]
    1116:	2303      	movs	r3, #3
    1118:	401a      	ands	r2, r3
    111a:	81aa      	strh	r2, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    111c:	3b02      	subs	r3, #2
    111e:	4293      	cmp	r3, r2
    1120:	419b      	sbcs	r3, r3
    1122:	425b      	negs	r3, r3

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1124:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1126:	490a      	ldr	r1, [pc, #40]	; (1150 <_i2c_m_sync_init_impl+0xc8>)
    1128:	400a      	ands	r2, r1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    112a:	039b      	lsls	r3, r3, #14
    112c:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    112e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1130:	69e3      	ldr	r3, [r4, #28]
    1132:	075b      	lsls	r3, r3, #29
    1134:	d4fc      	bmi.n	1130 <_i2c_m_sync_init_impl+0xa8>

	service->trise = _i2cms[i].trise;
    1136:	0043      	lsls	r3, r0, #1
    1138:	1818      	adds	r0, r3, r0
    113a:	00c2      	lsls	r2, r0, #3
    113c:	4b03      	ldr	r3, [pc, #12]	; (114c <_i2c_m_sync_init_impl+0xc4>)
    113e:	189b      	adds	r3, r3, r2
    1140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    1142:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1144:	2000      	movs	r0, #0
    1146:	bd70      	pop	{r4, r5, r6, pc}
    1148:	0000103d 	.word	0x0000103d
    114c:	00003990 	.word	0x00003990
    1150:	ffffbfff 	.word	0xffffbfff

00001154 <_sercom_i2c_sync_send_address>:
{
    1154:	b570      	push	{r4, r5, r6, lr}
    1156:	0005      	movs	r5, r0
	void *             hw    = i2c_dev->hw;
    1158:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    115a:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    115c:	0edb      	lsrs	r3, r3, #27
    115e:	2601      	movs	r6, #1
    1160:	401e      	ands	r6, r3
	ASSERT(i2c_dev);
    1162:	1e43      	subs	r3, r0, #1
    1164:	4198      	sbcs	r0, r3
    1166:	b2c0      	uxtb	r0, r0
    1168:	4a8e      	ldr	r2, [pc, #568]	; (13a4 <_sercom_i2c_sync_send_address+0x250>)
    116a:	498f      	ldr	r1, [pc, #572]	; (13a8 <_sercom_i2c_sync_send_address+0x254>)
    116c:	4b8f      	ldr	r3, [pc, #572]	; (13ac <_sercom_i2c_sync_send_address+0x258>)
    116e:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1170:	686b      	ldr	r3, [r5, #4]
    1172:	2b01      	cmp	r3, #1
    1174:	d04d      	beq.n	1212 <_sercom_i2c_sync_send_address+0xbe>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1176:	6863      	ldr	r3, [r4, #4]
    1178:	4a8d      	ldr	r2, [pc, #564]	; (13b0 <_sercom_i2c_sync_send_address+0x25c>)
    117a:	4013      	ands	r3, r2
    117c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    117e:	69e3      	ldr	r3, [r4, #28]
    1180:	075b      	lsls	r3, r3, #29
    1182:	d4fc      	bmi.n	117e <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    1184:	882b      	ldrh	r3, [r5, #0]
    1186:	055a      	lsls	r2, r3, #21
    1188:	d54e      	bpl.n	1228 <_sercom_i2c_sync_send_address+0xd4>
		if (msg->flags & I2C_M_RD) {
    118a:	886a      	ldrh	r2, [r5, #2]
    118c:	07d2      	lsls	r2, r2, #31
    118e:	d504      	bpl.n	119a <_sercom_i2c_sync_send_address+0x46>
			msg->flags |= I2C_M_TEN;
    1190:	886a      	ldrh	r2, [r5, #2]
    1192:	2180      	movs	r1, #128	; 0x80
    1194:	00c9      	lsls	r1, r1, #3
    1196:	430a      	orrs	r2, r1
    1198:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    119a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    119c:	4a85      	ldr	r2, [pc, #532]	; (13b4 <_sercom_i2c_sync_send_address+0x260>)
    119e:	401a      	ands	r2, r3
    11a0:	69e3      	ldr	r3, [r4, #28]
    11a2:	075b      	lsls	r3, r3, #29
    11a4:	d4fc      	bmi.n	11a0 <_sercom_i2c_sync_send_address+0x4c>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    11a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    11a8:	2180      	movs	r1, #128	; 0x80
    11aa:	01c9      	lsls	r1, r1, #7
    11ac:	400b      	ands	r3, r1
    11ae:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    11b0:	2280      	movs	r2, #128	; 0x80
    11b2:	0212      	lsls	r2, r2, #8
    11b4:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    11b6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11b8:	69e3      	ldr	r3, [r4, #28]
    11ba:	075b      	lsls	r3, r3, #29
    11bc:	d4fc      	bmi.n	11b8 <_sercom_i2c_sync_send_address+0x64>
	void *   hw      = i2c_dev->hw;
    11be:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    11c0:	4a7d      	ldr	r2, [pc, #500]	; (13b8 <_sercom_i2c_sync_send_address+0x264>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    11c2:	7e33      	ldrb	r3, [r6, #24]
    11c4:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    11c6:	0018      	movs	r0, r3
		if (timeout-- == 0) {
    11c8:	1e51      	subs	r1, r2, #1
    11ca:	2a00      	cmp	r2, #0
    11cc:	d002      	beq.n	11d4 <_sercom_i2c_sync_send_address+0x80>
    11ce:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    11d0:	079b      	lsls	r3, r3, #30
    11d2:	d0f6      	beq.n	11c2 <_sercom_i2c_sync_send_address+0x6e>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    11d4:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    11d6:	0edb      	lsrs	r3, r3, #27
    11d8:	2201      	movs	r2, #1
    11da:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11dc:	69e3      	ldr	r3, [r4, #28]
    11de:	075b      	lsls	r3, r3, #29
    11e0:	d4fc      	bmi.n	11dc <_sercom_i2c_sync_send_address+0x88>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    11e2:	8b63      	ldrh	r3, [r4, #26]
    11e4:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    11e6:	07c1      	lsls	r1, r0, #31
    11e8:	d400      	bmi.n	11ec <_sercom_i2c_sync_send_address+0x98>
    11ea:	e08f      	b.n	130c <_sercom_i2c_sync_send_address+0x1b8>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    11ec:	079a      	lsls	r2, r3, #30
    11ee:	d52f      	bpl.n	1250 <_sercom_i2c_sync_send_address+0xfc>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    11f0:	2201      	movs	r2, #1
    11f2:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    11f4:	886a      	ldrh	r2, [r5, #2]
    11f6:	2180      	movs	r1, #128	; 0x80
    11f8:	0149      	lsls	r1, r1, #5
    11fa:	430a      	orrs	r2, r1
    11fc:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    11fe:	886a      	ldrh	r2, [r5, #2]
    1200:	496e      	ldr	r1, [pc, #440]	; (13bc <_sercom_i2c_sync_send_address+0x268>)
    1202:	400a      	ands	r2, r1
    1204:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1206:	07db      	lsls	r3, r3, #31
    1208:	d400      	bmi.n	120c <_sercom_i2c_sync_send_address+0xb8>
    120a:	e0c6      	b.n	139a <_sercom_i2c_sync_send_address+0x246>
				return I2C_ERR_BUS;
    120c:	2005      	movs	r0, #5
    120e:	4240      	negs	r0, r0
    1210:	e0a2      	b.n	1358 <_sercom_i2c_sync_send_address+0x204>
	if (msg->len == 1 && sclsm) {
    1212:	2e00      	cmp	r6, #0
    1214:	d0af      	beq.n	1176 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1216:	6862      	ldr	r2, [r4, #4]
    1218:	2380      	movs	r3, #128	; 0x80
    121a:	02db      	lsls	r3, r3, #11
    121c:	4313      	orrs	r3, r2
    121e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1220:	69e3      	ldr	r3, [r4, #28]
    1222:	075b      	lsls	r3, r3, #29
    1224:	d4fc      	bmi.n	1220 <_sercom_i2c_sync_send_address+0xcc>
    1226:	e7ad      	b.n	1184 <_sercom_i2c_sync_send_address+0x30>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1228:	005b      	lsls	r3, r3, #1
    122a:	22ff      	movs	r2, #255	; 0xff
    122c:	4013      	ands	r3, r2
    122e:	886a      	ldrh	r2, [r5, #2]
    1230:	2101      	movs	r1, #1
    1232:	400a      	ands	r2, r1
    1234:	431a      	orrs	r2, r3
    1236:	69e3      	ldr	r3, [r4, #28]
    1238:	075b      	lsls	r3, r3, #29
    123a:	d4fc      	bmi.n	1236 <_sercom_i2c_sync_send_address+0xe2>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    123c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    123e:	2180      	movs	r1, #128	; 0x80
    1240:	01c9      	lsls	r1, r1, #7
    1242:	400b      	ands	r3, r1
		hri_sercomi2cm_write_ADDR_reg(hw,
    1244:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1246:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1248:	69e3      	ldr	r3, [r4, #28]
    124a:	075b      	lsls	r3, r3, #29
    124c:	d4fc      	bmi.n	1248 <_sercom_i2c_sync_send_address+0xf4>
    124e:	e7b6      	b.n	11be <_sercom_i2c_sync_send_address+0x6a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1250:	075b      	lsls	r3, r3, #29
    1252:	d41b      	bmi.n	128c <_sercom_i2c_sync_send_address+0x138>
			if (msg->flags & I2C_M_TEN) {
    1254:	886b      	ldrh	r3, [r5, #2]
    1256:	055b      	lsls	r3, r3, #21
    1258:	d534      	bpl.n	12c4 <_sercom_i2c_sync_send_address+0x170>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    125a:	882a      	ldrh	r2, [r5, #0]
    125c:	1212      	asrs	r2, r2, #8
    125e:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1260:	2306      	movs	r3, #6
    1262:	401a      	ands	r2, r3
    1264:	69e3      	ldr	r3, [r4, #28]
    1266:	075b      	lsls	r3, r3, #29
    1268:	d4fc      	bmi.n	1264 <_sercom_i2c_sync_send_address+0x110>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    126a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    126c:	2180      	movs	r1, #128	; 0x80
    126e:	01c9      	lsls	r1, r1, #7
    1270:	400b      	ands	r3, r1
    1272:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1274:	22f1      	movs	r2, #241	; 0xf1
    1276:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1278:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    127a:	69e3      	ldr	r3, [r4, #28]
    127c:	075b      	lsls	r3, r3, #29
    127e:	d4fc      	bmi.n	127a <_sercom_i2c_sync_send_address+0x126>
				msg->flags &= ~I2C_M_TEN;
    1280:	886b      	ldrh	r3, [r5, #2]
    1282:	4a4f      	ldr	r2, [pc, #316]	; (13c0 <_sercom_i2c_sync_send_address+0x26c>)
    1284:	4013      	ands	r3, r2
    1286:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1288:	2000      	movs	r0, #0
    128a:	e065      	b.n	1358 <_sercom_i2c_sync_send_address+0x204>
				if (msg->len > 0) {
    128c:	686b      	ldr	r3, [r5, #4]
    128e:	2b00      	cmp	r3, #0
    1290:	dd04      	ble.n	129c <_sercom_i2c_sync_send_address+0x148>
					msg->flags |= I2C_M_FAIL;
    1292:	886b      	ldrh	r3, [r5, #2]
    1294:	2280      	movs	r2, #128	; 0x80
    1296:	0152      	lsls	r2, r2, #5
    1298:	4313      	orrs	r3, r2
    129a:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    129c:	886b      	ldrh	r3, [r5, #2]
    129e:	b21b      	sxth	r3, r3
    12a0:	2b00      	cmp	r3, #0
    12a2:	db06      	blt.n	12b2 <_sercom_i2c_sync_send_address+0x15e>
				msg->flags &= ~I2C_M_BUSY;
    12a4:	886b      	ldrh	r3, [r5, #2]
    12a6:	4a45      	ldr	r2, [pc, #276]	; (13bc <_sercom_i2c_sync_send_address+0x268>)
    12a8:	4013      	ands	r3, r2
    12aa:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    12ac:	2002      	movs	r0, #2
    12ae:	4240      	negs	r0, r0
    12b0:	e052      	b.n	1358 <_sercom_i2c_sync_send_address+0x204>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    12b2:	6862      	ldr	r2, [r4, #4]
    12b4:	23c0      	movs	r3, #192	; 0xc0
    12b6:	029b      	lsls	r3, r3, #10
    12b8:	4313      	orrs	r3, r2
    12ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12bc:	69e3      	ldr	r3, [r4, #28]
    12be:	075b      	lsls	r3, r3, #29
    12c0:	d4fc      	bmi.n	12bc <_sercom_i2c_sync_send_address+0x168>
    12c2:	e7ef      	b.n	12a4 <_sercom_i2c_sync_send_address+0x150>
			if (msg->len == 0) {
    12c4:	6868      	ldr	r0, [r5, #4]
    12c6:	2800      	cmp	r0, #0
    12c8:	d111      	bne.n	12ee <_sercom_i2c_sync_send_address+0x19a>
				if (msg->flags & I2C_M_STOP) {
    12ca:	886b      	ldrh	r3, [r5, #2]
    12cc:	b21b      	sxth	r3, r3
    12ce:	2b00      	cmp	r3, #0
    12d0:	db04      	blt.n	12dc <_sercom_i2c_sync_send_address+0x188>
				msg->flags &= ~I2C_M_BUSY;
    12d2:	886b      	ldrh	r3, [r5, #2]
    12d4:	4a39      	ldr	r2, [pc, #228]	; (13bc <_sercom_i2c_sync_send_address+0x268>)
    12d6:	4013      	ands	r3, r2
    12d8:	806b      	strh	r3, [r5, #2]
    12da:	e03d      	b.n	1358 <_sercom_i2c_sync_send_address+0x204>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    12dc:	6862      	ldr	r2, [r4, #4]
    12de:	23c0      	movs	r3, #192	; 0xc0
    12e0:	029b      	lsls	r3, r3, #10
    12e2:	4313      	orrs	r3, r2
    12e4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12e6:	69e3      	ldr	r3, [r4, #28]
    12e8:	075b      	lsls	r3, r3, #29
    12ea:	d4fc      	bmi.n	12e6 <_sercom_i2c_sync_send_address+0x192>
    12ec:	e7f1      	b.n	12d2 <_sercom_i2c_sync_send_address+0x17e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    12ee:	68ab      	ldr	r3, [r5, #8]
    12f0:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    12f2:	2328      	movs	r3, #40	; 0x28
    12f4:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12f6:	69e3      	ldr	r3, [r4, #28]
    12f8:	075b      	lsls	r3, r3, #29
    12fa:	d4fc      	bmi.n	12f6 <_sercom_i2c_sync_send_address+0x1a2>
				msg->buffer++;
    12fc:	68ab      	ldr	r3, [r5, #8]
    12fe:	3301      	adds	r3, #1
    1300:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1302:	686b      	ldr	r3, [r5, #4]
    1304:	3b01      	subs	r3, #1
    1306:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1308:	2000      	movs	r0, #0
    130a:	e025      	b.n	1358 <_sercom_i2c_sync_send_address+0x204>
	} else if (flags & SB_FLAG) {
    130c:	0781      	lsls	r1, r0, #30
    130e:	d547      	bpl.n	13a0 <_sercom_i2c_sync_send_address+0x24c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1310:	6869      	ldr	r1, [r5, #4]
    1312:	2900      	cmp	r1, #0
    1314:	d03c      	beq.n	1390 <_sercom_i2c_sync_send_address+0x23c>
    1316:	075b      	lsls	r3, r3, #29
    1318:	d43a      	bmi.n	1390 <_sercom_i2c_sync_send_address+0x23c>
			msg->len--;
    131a:	3901      	subs	r1, #1
    131c:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    131e:	2900      	cmp	r1, #0
    1320:	d101      	bne.n	1326 <_sercom_i2c_sync_send_address+0x1d2>
    1322:	2a00      	cmp	r2, #0
    1324:	d01b      	beq.n	135e <_sercom_i2c_sync_send_address+0x20a>
    1326:	2901      	cmp	r1, #1
    1328:	d017      	beq.n	135a <_sercom_i2c_sync_send_address+0x206>
			if (msg->len == 0) {
    132a:	686b      	ldr	r3, [r5, #4]
    132c:	2b00      	cmp	r3, #0
    132e:	d107      	bne.n	1340 <_sercom_i2c_sync_send_address+0x1ec>
				if (msg->flags & I2C_M_STOP) {
    1330:	886b      	ldrh	r3, [r5, #2]
    1332:	b21b      	sxth	r3, r3
    1334:	2b00      	cmp	r3, #0
    1336:	db1b      	blt.n	1370 <_sercom_i2c_sync_send_address+0x21c>
				msg->flags &= ~I2C_M_BUSY;
    1338:	886b      	ldrh	r3, [r5, #2]
    133a:	4a20      	ldr	r2, [pc, #128]	; (13bc <_sercom_i2c_sync_send_address+0x268>)
    133c:	4013      	ands	r3, r2
    133e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1340:	68aa      	ldr	r2, [r5, #8]
    1342:	1c53      	adds	r3, r2, #1
    1344:	60ab      	str	r3, [r5, #8]
    1346:	69e3      	ldr	r3, [r4, #28]
    1348:	075b      	lsls	r3, r3, #29
    134a:	d4fc      	bmi.n	1346 <_sercom_i2c_sync_send_address+0x1f2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    134c:	2328      	movs	r3, #40	; 0x28
    134e:	5ce3      	ldrb	r3, [r4, r3]
    1350:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1352:	2302      	movs	r3, #2
    1354:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1356:	2000      	movs	r0, #0
}
    1358:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    135a:	2a00      	cmp	r2, #0
    135c:	d0e5      	beq.n	132a <_sercom_i2c_sync_send_address+0x1d6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    135e:	6862      	ldr	r2, [r4, #4]
    1360:	2380      	movs	r3, #128	; 0x80
    1362:	02db      	lsls	r3, r3, #11
    1364:	4313      	orrs	r3, r2
    1366:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1368:	69e3      	ldr	r3, [r4, #28]
    136a:	075b      	lsls	r3, r3, #29
    136c:	d4fc      	bmi.n	1368 <_sercom_i2c_sync_send_address+0x214>
    136e:	e7dc      	b.n	132a <_sercom_i2c_sync_send_address+0x1d6>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1370:	6863      	ldr	r3, [r4, #4]
    1372:	4a12      	ldr	r2, [pc, #72]	; (13bc <_sercom_i2c_sync_send_address+0x268>)
    1374:	4013      	ands	r3, r2
    1376:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1378:	69e3      	ldr	r3, [r4, #28]
    137a:	075b      	lsls	r3, r3, #29
    137c:	d4fc      	bmi.n	1378 <_sercom_i2c_sync_send_address+0x224>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    137e:	6862      	ldr	r2, [r4, #4]
    1380:	23c0      	movs	r3, #192	; 0xc0
    1382:	029b      	lsls	r3, r3, #10
    1384:	4313      	orrs	r3, r2
    1386:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1388:	69e3      	ldr	r3, [r4, #28]
    138a:	075b      	lsls	r3, r3, #29
    138c:	d4fc      	bmi.n	1388 <_sercom_i2c_sync_send_address+0x234>
    138e:	e7d3      	b.n	1338 <_sercom_i2c_sync_send_address+0x1e4>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1390:	2302      	movs	r3, #2
    1392:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1394:	2002      	movs	r0, #2
    1396:	4240      	negs	r0, r0
    1398:	e7de      	b.n	1358 <_sercom_i2c_sync_send_address+0x204>
			return I2C_ERR_BAD_ADDRESS;
    139a:	2004      	movs	r0, #4
    139c:	4240      	negs	r0, r0
    139e:	e7db      	b.n	1358 <_sercom_i2c_sync_send_address+0x204>
	return I2C_OK;
    13a0:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    13a2:	e7d9      	b.n	1358 <_sercom_i2c_sync_send_address+0x204>
    13a4:	00000597 	.word	0x00000597
    13a8:	000039e0 	.word	0x000039e0
    13ac:	00000bf5 	.word	0x00000bf5
    13b0:	fffbffff 	.word	0xfffbffff
    13b4:	000007fe 	.word	0x000007fe
    13b8:	0000ffff 	.word	0x0000ffff
    13bc:	fffffeff 	.word	0xfffffeff
    13c0:	fffffbff 	.word	0xfffffbff

000013c4 <_i2c_m_sync_init>:
{
    13c4:	b570      	push	{r4, r5, r6, lr}
    13c6:	0004      	movs	r4, r0
    13c8:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    13ca:	1e43      	subs	r3, r0, #1
    13cc:	4198      	sbcs	r0, r3
    13ce:	b2c0      	uxtb	r0, r0
    13d0:	4a04      	ldr	r2, [pc, #16]	; (13e4 <_i2c_m_sync_init+0x20>)
    13d2:	4905      	ldr	r1, [pc, #20]	; (13e8 <_i2c_m_sync_init+0x24>)
    13d4:	4b05      	ldr	r3, [pc, #20]	; (13ec <_i2c_m_sync_init+0x28>)
    13d6:	4798      	blx	r3
	i2c_dev->hw = hw;
    13d8:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    13da:	0029      	movs	r1, r5
    13dc:	0020      	movs	r0, r4
    13de:	4b04      	ldr	r3, [pc, #16]	; (13f0 <_i2c_m_sync_init+0x2c>)
    13e0:	4798      	blx	r3
}
    13e2:	bd70      	pop	{r4, r5, r6, pc}
    13e4:	0000050a 	.word	0x0000050a
    13e8:	000039e0 	.word	0x000039e0
    13ec:	00000bf5 	.word	0x00000bf5
    13f0:	00001089 	.word	0x00001089

000013f4 <_i2c_m_sync_enable>:
{
    13f4:	b570      	push	{r4, r5, r6, lr}
    13f6:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
    13f8:	4d19      	ldr	r5, [pc, #100]	; (1460 <_i2c_m_sync_enable+0x6c>)
    13fa:	1e43      	subs	r3, r0, #1
    13fc:	4198      	sbcs	r0, r3
    13fe:	b2c0      	uxtb	r0, r0
    1400:	4a18      	ldr	r2, [pc, #96]	; (1464 <_i2c_m_sync_enable+0x70>)
    1402:	0029      	movs	r1, r5
    1404:	4e18      	ldr	r6, [pc, #96]	; (1468 <_i2c_m_sync_enable+0x74>)
    1406:	47b0      	blx	r6
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1408:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    140a:	0020      	movs	r0, r4
    140c:	1e43      	subs	r3, r0, #1
    140e:	4198      	sbcs	r0, r3
    1410:	b2c0      	uxtb	r0, r0
    1412:	4a16      	ldr	r2, [pc, #88]	; (146c <_i2c_m_sync_enable+0x78>)
    1414:	0029      	movs	r1, r5
    1416:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1418:	6823      	ldr	r3, [r4, #0]
    141a:	2202      	movs	r2, #2
    141c:	4313      	orrs	r3, r2
    141e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1420:	69e3      	ldr	r3, [r4, #28]
    1422:	079b      	lsls	r3, r3, #30
    1424:	d1fc      	bne.n	1420 <_i2c_m_sync_enable+0x2c>
    1426:	2004      	movs	r0, #4
    1428:	4911      	ldr	r1, [pc, #68]	; (1470 <_i2c_m_sync_enable+0x7c>)
    142a:	69e3      	ldr	r3, [r4, #28]
    142c:	075b      	lsls	r3, r3, #29
    142e:	d4fc      	bmi.n	142a <_i2c_m_sync_enable+0x36>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1430:	8b62      	ldrh	r2, [r4, #26]
    1432:	0912      	lsrs	r2, r2, #4
    1434:	2303      	movs	r3, #3
    1436:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1438:	2b01      	cmp	r3, #1
    143a:	d00b      	beq.n	1454 <_i2c_m_sync_enable+0x60>
		timeout--;
    143c:	3901      	subs	r1, #1
		if (timeout <= 0) {
    143e:	2900      	cmp	r1, #0
    1440:	dcf3      	bgt.n	142a <_i2c_m_sync_enable+0x36>
			if (--timeout_attempt)
    1442:	3801      	subs	r0, #1
    1444:	2800      	cmp	r0, #0
    1446:	d007      	beq.n	1458 <_i2c_m_sync_enable+0x64>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1448:	2310      	movs	r3, #16
    144a:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    144c:	69e3      	ldr	r3, [r4, #28]
    144e:	075b      	lsls	r3, r3, #29
    1450:	d4fc      	bmi.n	144c <_i2c_m_sync_enable+0x58>
    1452:	e7e9      	b.n	1428 <_i2c_m_sync_enable+0x34>
	return ERR_NONE;
    1454:	2000      	movs	r0, #0
}
    1456:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    1458:	2006      	movs	r0, #6
    145a:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
    145c:	e7fb      	b.n	1456 <_i2c_m_sync_enable+0x62>
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	000039e0 	.word	0x000039e0
    1464:	00000527 	.word	0x00000527
    1468:	00000bf5 	.word	0x00000bf5
    146c:	000005f7 	.word	0x000005f7
    1470:	0000ffff 	.word	0x0000ffff

00001474 <_i2c_m_sync_transfer>:
{
    1474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1476:	0005      	movs	r5, r0
    1478:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
    147a:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    147c:	1e43      	subs	r3, r0, #1
    147e:	4198      	sbcs	r0, r3
    1480:	b2c0      	uxtb	r0, r0
    1482:	4a92      	ldr	r2, [pc, #584]	; (16cc <_i2c_m_sync_transfer+0x258>)
    1484:	4992      	ldr	r1, [pc, #584]	; (16d0 <_i2c_m_sync_transfer+0x25c>)
    1486:	4f93      	ldr	r7, [pc, #588]	; (16d4 <_i2c_m_sync_transfer+0x260>)
    1488:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    148a:	6928      	ldr	r0, [r5, #16]
    148c:	1e43      	subs	r3, r0, #1
    148e:	4198      	sbcs	r0, r3
    1490:	b2c0      	uxtb	r0, r0
    1492:	4a91      	ldr	r2, [pc, #580]	; (16d8 <_i2c_m_sync_transfer+0x264>)
    1494:	498e      	ldr	r1, [pc, #568]	; (16d0 <_i2c_m_sync_transfer+0x25c>)
    1496:	47b8      	blx	r7
	ASSERT(msg);
    1498:	0030      	movs	r0, r6
    149a:	1e43      	subs	r3, r0, #1
    149c:	4198      	sbcs	r0, r3
    149e:	b2c0      	uxtb	r0, r0
    14a0:	4a8e      	ldr	r2, [pc, #568]	; (16dc <_i2c_m_sync_transfer+0x268>)
    14a2:	498b      	ldr	r1, [pc, #556]	; (16d0 <_i2c_m_sync_transfer+0x25c>)
    14a4:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    14a6:	886b      	ldrh	r3, [r5, #2]
    14a8:	05db      	lsls	r3, r3, #23
    14aa:	d500      	bpl.n	14ae <_i2c_m_sync_transfer+0x3a>
    14ac:	e10b      	b.n	16c6 <_i2c_m_sync_transfer+0x252>
	msg->flags |= I2C_M_BUSY;
    14ae:	8872      	ldrh	r2, [r6, #2]
    14b0:	2380      	movs	r3, #128	; 0x80
    14b2:	005b      	lsls	r3, r3, #1
    14b4:	469c      	mov	ip, r3
    14b6:	431a      	orrs	r2, r3
    14b8:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    14ba:	002a      	movs	r2, r5
    14bc:	0031      	movs	r1, r6
    14be:	c989      	ldmia	r1!, {r0, r3, r7}
    14c0:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    14c2:	6862      	ldr	r2, [r4, #4]
    14c4:	4663      	mov	r3, ip
    14c6:	4313      	orrs	r3, r2
    14c8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14ca:	69e3      	ldr	r3, [r4, #28]
    14cc:	075b      	lsls	r3, r3, #29
    14ce:	d4fc      	bmi.n	14ca <_i2c_m_sync_transfer+0x56>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    14d0:	0028      	movs	r0, r5
    14d2:	4b83      	ldr	r3, [pc, #524]	; (16e0 <_i2c_m_sync_transfer+0x26c>)
    14d4:	4798      	blx	r3
	if (ret) {
    14d6:	2800      	cmp	r0, #0
    14d8:	d100      	bne.n	14dc <_i2c_m_sync_transfer+0x68>
    14da:	e09d      	b.n	1618 <_i2c_m_sync_transfer+0x1a4>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    14dc:	886b      	ldrh	r3, [r5, #2]
    14de:	4a81      	ldr	r2, [pc, #516]	; (16e4 <_i2c_m_sync_transfer+0x270>)
    14e0:	4013      	ands	r3, r2
    14e2:	806b      	strh	r3, [r5, #2]
}
    14e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    14e6:	2005      	movs	r0, #5
    14e8:	4240      	negs	r0, r0
    14ea:	e0a6      	b.n	163a <_i2c_m_sync_transfer+0x1c6>
			if (msg->flags & I2C_M_STOP) {
    14ec:	8873      	ldrh	r3, [r6, #2]
    14ee:	b21b      	sxth	r3, r3
    14f0:	2b00      	cmp	r3, #0
    14f2:	db04      	blt.n	14fe <_i2c_m_sync_transfer+0x8a>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    14f4:	886b      	ldrh	r3, [r5, #2]
    14f6:	4a7b      	ldr	r2, [pc, #492]	; (16e4 <_i2c_m_sync_transfer+0x270>)
    14f8:	4013      	ands	r3, r2
    14fa:	806b      	strh	r3, [r5, #2]
			return ret;
    14fc:	e7f2      	b.n	14e4 <_i2c_m_sync_transfer+0x70>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    14fe:	6862      	ldr	r2, [r4, #4]
    1500:	23c0      	movs	r3, #192	; 0xc0
    1502:	029b      	lsls	r3, r3, #10
    1504:	4313      	orrs	r3, r2
    1506:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1508:	69e3      	ldr	r3, [r4, #28]
    150a:	075b      	lsls	r3, r3, #29
    150c:	d4fc      	bmi.n	1508 <_i2c_m_sync_transfer+0x94>
    150e:	e7f1      	b.n	14f4 <_i2c_m_sync_transfer+0x80>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1510:	0753      	lsls	r3, r2, #29
    1512:	d41b      	bmi.n	154c <_i2c_m_sync_transfer+0xd8>
			if (msg->flags & I2C_M_TEN) {
    1514:	886b      	ldrh	r3, [r5, #2]
    1516:	055b      	lsls	r3, r3, #21
    1518:	d534      	bpl.n	1584 <_i2c_m_sync_transfer+0x110>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    151a:	882a      	ldrh	r2, [r5, #0]
    151c:	1212      	asrs	r2, r2, #8
    151e:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1520:	2306      	movs	r3, #6
    1522:	401a      	ands	r2, r3
    1524:	69e3      	ldr	r3, [r4, #28]
    1526:	075b      	lsls	r3, r3, #29
    1528:	d4fc      	bmi.n	1524 <_i2c_m_sync_transfer+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    152a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    152c:	2180      	movs	r1, #128	; 0x80
    152e:	01c9      	lsls	r1, r1, #7
    1530:	400b      	ands	r3, r1
    1532:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1534:	22f1      	movs	r2, #241	; 0xf1
    1536:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1538:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    153a:	69e3      	ldr	r3, [r4, #28]
    153c:	075b      	lsls	r3, r3, #29
    153e:	d4fc      	bmi.n	153a <_i2c_m_sync_transfer+0xc6>
				msg->flags &= ~I2C_M_TEN;
    1540:	886b      	ldrh	r3, [r5, #2]
    1542:	4a69      	ldr	r2, [pc, #420]	; (16e8 <_i2c_m_sync_transfer+0x274>)
    1544:	4013      	ands	r3, r2
    1546:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1548:	2000      	movs	r0, #0
    154a:	e065      	b.n	1618 <_i2c_m_sync_transfer+0x1a4>
				if (msg->len > 0) {
    154c:	686b      	ldr	r3, [r5, #4]
    154e:	2b00      	cmp	r3, #0
    1550:	dd04      	ble.n	155c <_i2c_m_sync_transfer+0xe8>
					msg->flags |= I2C_M_FAIL;
    1552:	886b      	ldrh	r3, [r5, #2]
    1554:	2280      	movs	r2, #128	; 0x80
    1556:	0152      	lsls	r2, r2, #5
    1558:	4313      	orrs	r3, r2
    155a:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    155c:	886b      	ldrh	r3, [r5, #2]
    155e:	b21b      	sxth	r3, r3
    1560:	2b00      	cmp	r3, #0
    1562:	db06      	blt.n	1572 <_i2c_m_sync_transfer+0xfe>
				msg->flags &= ~I2C_M_BUSY;
    1564:	886b      	ldrh	r3, [r5, #2]
    1566:	4a5f      	ldr	r2, [pc, #380]	; (16e4 <_i2c_m_sync_transfer+0x270>)
    1568:	4013      	ands	r3, r2
    156a:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    156c:	2002      	movs	r0, #2
    156e:	4240      	negs	r0, r0
    1570:	e052      	b.n	1618 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1572:	6862      	ldr	r2, [r4, #4]
    1574:	23c0      	movs	r3, #192	; 0xc0
    1576:	029b      	lsls	r3, r3, #10
    1578:	4313      	orrs	r3, r2
    157a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    157c:	69e3      	ldr	r3, [r4, #28]
    157e:	075b      	lsls	r3, r3, #29
    1580:	d4fc      	bmi.n	157c <_i2c_m_sync_transfer+0x108>
    1582:	e7ef      	b.n	1564 <_i2c_m_sync_transfer+0xf0>
			if (msg->len == 0) {
    1584:	6868      	ldr	r0, [r5, #4]
    1586:	2800      	cmp	r0, #0
    1588:	d111      	bne.n	15ae <_i2c_m_sync_transfer+0x13a>
				if (msg->flags & I2C_M_STOP) {
    158a:	886b      	ldrh	r3, [r5, #2]
    158c:	b21b      	sxth	r3, r3
    158e:	2b00      	cmp	r3, #0
    1590:	db04      	blt.n	159c <_i2c_m_sync_transfer+0x128>
				msg->flags &= ~I2C_M_BUSY;
    1592:	886b      	ldrh	r3, [r5, #2]
    1594:	4a53      	ldr	r2, [pc, #332]	; (16e4 <_i2c_m_sync_transfer+0x270>)
    1596:	4013      	ands	r3, r2
    1598:	806b      	strh	r3, [r5, #2]
    159a:	e03d      	b.n	1618 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    159c:	6862      	ldr	r2, [r4, #4]
    159e:	23c0      	movs	r3, #192	; 0xc0
    15a0:	029b      	lsls	r3, r3, #10
    15a2:	4313      	orrs	r3, r2
    15a4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15a6:	69e3      	ldr	r3, [r4, #28]
    15a8:	075b      	lsls	r3, r3, #29
    15aa:	d4fc      	bmi.n	15a6 <_i2c_m_sync_transfer+0x132>
    15ac:	e7f1      	b.n	1592 <_i2c_m_sync_transfer+0x11e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    15ae:	68ab      	ldr	r3, [r5, #8]
    15b0:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    15b2:	2328      	movs	r3, #40	; 0x28
    15b4:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15b6:	69e3      	ldr	r3, [r4, #28]
    15b8:	075b      	lsls	r3, r3, #29
    15ba:	d4fc      	bmi.n	15b6 <_i2c_m_sync_transfer+0x142>
				msg->buffer++;
    15bc:	68ab      	ldr	r3, [r5, #8]
    15be:	3301      	adds	r3, #1
    15c0:	60ab      	str	r3, [r5, #8]
				msg->len--;
    15c2:	686b      	ldr	r3, [r5, #4]
    15c4:	3b01      	subs	r3, #1
    15c6:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    15c8:	2000      	movs	r0, #0
    15ca:	e025      	b.n	1618 <_i2c_m_sync_transfer+0x1a4>
	} else if (flags & SB_FLAG) {
    15cc:	07bb      	lsls	r3, r7, #30
    15ce:	d578      	bpl.n	16c2 <_i2c_m_sync_transfer+0x24e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    15d0:	686b      	ldr	r3, [r5, #4]
    15d2:	2b00      	cmp	r3, #0
    15d4:	d06d      	beq.n	16b2 <_i2c_m_sync_transfer+0x23e>
    15d6:	0752      	lsls	r2, r2, #29
    15d8:	d46b      	bmi.n	16b2 <_i2c_m_sync_transfer+0x23e>
			msg->len--;
    15da:	3b01      	subs	r3, #1
    15dc:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    15de:	2b00      	cmp	r3, #0
    15e0:	d101      	bne.n	15e6 <_i2c_m_sync_transfer+0x172>
    15e2:	2900      	cmp	r1, #0
    15e4:	d04c      	beq.n	1680 <_i2c_m_sync_transfer+0x20c>
    15e6:	2b01      	cmp	r3, #1
    15e8:	d048      	beq.n	167c <_i2c_m_sync_transfer+0x208>
			if (msg->len == 0) {
    15ea:	686b      	ldr	r3, [r5, #4]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d107      	bne.n	1600 <_i2c_m_sync_transfer+0x18c>
				if (msg->flags & I2C_M_STOP) {
    15f0:	886b      	ldrh	r3, [r5, #2]
    15f2:	b21b      	sxth	r3, r3
    15f4:	2b00      	cmp	r3, #0
    15f6:	db4c      	blt.n	1692 <_i2c_m_sync_transfer+0x21e>
				msg->flags &= ~I2C_M_BUSY;
    15f8:	886b      	ldrh	r3, [r5, #2]
    15fa:	4a3a      	ldr	r2, [pc, #232]	; (16e4 <_i2c_m_sync_transfer+0x270>)
    15fc:	4013      	ands	r3, r2
    15fe:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1600:	68aa      	ldr	r2, [r5, #8]
    1602:	1c53      	adds	r3, r2, #1
    1604:	60ab      	str	r3, [r5, #8]
    1606:	69e3      	ldr	r3, [r4, #28]
    1608:	075b      	lsls	r3, r3, #29
    160a:	d4fc      	bmi.n	1606 <_i2c_m_sync_transfer+0x192>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    160c:	2328      	movs	r3, #40	; 0x28
    160e:	5ce3      	ldrb	r3, [r4, r3]
    1610:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1612:	2302      	movs	r3, #2
    1614:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1616:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1618:	886b      	ldrh	r3, [r5, #2]
    161a:	05db      	lsls	r3, r3, #23
    161c:	d400      	bmi.n	1620 <_i2c_m_sync_transfer+0x1ac>
    161e:	e761      	b.n	14e4 <_i2c_m_sync_transfer+0x70>
	void *   hw      = i2c_dev->hw;
    1620:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    1622:	4a32      	ldr	r2, [pc, #200]	; (16ec <_i2c_m_sync_transfer+0x278>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1624:	7e03      	ldrb	r3, [r0, #24]
    1626:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1628:	001f      	movs	r7, r3
		if (timeout-- == 0) {
    162a:	1e51      	subs	r1, r2, #1
    162c:	2a00      	cmp	r2, #0
    162e:	d100      	bne.n	1632 <_i2c_m_sync_transfer+0x1be>
    1630:	e759      	b.n	14e6 <_i2c_m_sync_transfer+0x72>
    1632:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1634:	079b      	lsls	r3, r3, #30
    1636:	d0f5      	beq.n	1624 <_i2c_m_sync_transfer+0x1b0>
	return I2C_OK;
    1638:	2000      	movs	r0, #0
		if (ret) {
    163a:	2800      	cmp	r0, #0
    163c:	d000      	beq.n	1640 <_i2c_m_sync_transfer+0x1cc>
    163e:	e755      	b.n	14ec <_i2c_m_sync_transfer+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1640:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1642:	0edb      	lsrs	r3, r3, #27
    1644:	2101      	movs	r1, #1
    1646:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1648:	69e3      	ldr	r3, [r4, #28]
    164a:	075b      	lsls	r3, r3, #29
    164c:	d4fc      	bmi.n	1648 <_i2c_m_sync_transfer+0x1d4>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    164e:	8b62      	ldrh	r2, [r4, #26]
    1650:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    1652:	07fb      	lsls	r3, r7, #31
    1654:	d5ba      	bpl.n	15cc <_i2c_m_sync_transfer+0x158>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1656:	0793      	lsls	r3, r2, #30
    1658:	d400      	bmi.n	165c <_i2c_m_sync_transfer+0x1e8>
    165a:	e759      	b.n	1510 <_i2c_m_sync_transfer+0x9c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    165c:	2301      	movs	r3, #1
    165e:	7623      	strb	r3, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1660:	886b      	ldrh	r3, [r5, #2]
    1662:	2180      	movs	r1, #128	; 0x80
    1664:	0149      	lsls	r1, r1, #5
    1666:	430b      	orrs	r3, r1
    1668:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    166a:	886b      	ldrh	r3, [r5, #2]
    166c:	491d      	ldr	r1, [pc, #116]	; (16e4 <_i2c_m_sync_transfer+0x270>)
    166e:	400b      	ands	r3, r1
    1670:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1672:	07d3      	lsls	r3, r2, #31
    1674:	d522      	bpl.n	16bc <_i2c_m_sync_transfer+0x248>
				return I2C_ERR_BUS;
    1676:	2005      	movs	r0, #5
    1678:	4240      	negs	r0, r0
    167a:	e7cd      	b.n	1618 <_i2c_m_sync_transfer+0x1a4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    167c:	2900      	cmp	r1, #0
    167e:	d0b4      	beq.n	15ea <_i2c_m_sync_transfer+0x176>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1680:	6862      	ldr	r2, [r4, #4]
    1682:	2380      	movs	r3, #128	; 0x80
    1684:	02db      	lsls	r3, r3, #11
    1686:	4313      	orrs	r3, r2
    1688:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    168a:	69e3      	ldr	r3, [r4, #28]
    168c:	075b      	lsls	r3, r3, #29
    168e:	d4fc      	bmi.n	168a <_i2c_m_sync_transfer+0x216>
    1690:	e7ab      	b.n	15ea <_i2c_m_sync_transfer+0x176>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1692:	6863      	ldr	r3, [r4, #4]
    1694:	4a13      	ldr	r2, [pc, #76]	; (16e4 <_i2c_m_sync_transfer+0x270>)
    1696:	4013      	ands	r3, r2
    1698:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    169a:	69e3      	ldr	r3, [r4, #28]
    169c:	075b      	lsls	r3, r3, #29
    169e:	d4fc      	bmi.n	169a <_i2c_m_sync_transfer+0x226>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    16a0:	6862      	ldr	r2, [r4, #4]
    16a2:	23c0      	movs	r3, #192	; 0xc0
    16a4:	029b      	lsls	r3, r3, #10
    16a6:	4313      	orrs	r3, r2
    16a8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16aa:	69e3      	ldr	r3, [r4, #28]
    16ac:	075b      	lsls	r3, r3, #29
    16ae:	d4fc      	bmi.n	16aa <_i2c_m_sync_transfer+0x236>
    16b0:	e7a2      	b.n	15f8 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    16b2:	2302      	movs	r3, #2
    16b4:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    16b6:	2002      	movs	r0, #2
    16b8:	4240      	negs	r0, r0
    16ba:	e7ad      	b.n	1618 <_i2c_m_sync_transfer+0x1a4>
			return I2C_ERR_BAD_ADDRESS;
    16bc:	2004      	movs	r0, #4
    16be:	4240      	negs	r0, r0
    16c0:	e7aa      	b.n	1618 <_i2c_m_sync_transfer+0x1a4>
	return I2C_OK;
    16c2:	2000      	movs	r0, #0
    16c4:	e7a8      	b.n	1618 <_i2c_m_sync_transfer+0x1a4>
		return I2C_ERR_BUSY;
    16c6:	2006      	movs	r0, #6
    16c8:	4240      	negs	r0, r0
    16ca:	e70b      	b.n	14e4 <_i2c_m_sync_transfer+0x70>
    16cc:	000005c2 	.word	0x000005c2
    16d0:	000039e0 	.word	0x000039e0
    16d4:	00000bf5 	.word	0x00000bf5
    16d8:	000005c3 	.word	0x000005c3
    16dc:	000005c4 	.word	0x000005c4
    16e0:	00001155 	.word	0x00001155
    16e4:	fffffeff 	.word	0xfffffeff
    16e8:	fffffbff 	.word	0xfffffbff
    16ec:	0000ffff 	.word	0x0000ffff

000016f0 <i2c_init>:
			read_rdy[0] = 1;
		}
	}
}

static void i2c_init(void) {
    16f0:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    16f2:	4b20      	ldr	r3, [pc, #128]	; (1774 <i2c_init+0x84>)
    16f4:	2248      	movs	r2, #72	; 0x48
    16f6:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    16f8:	2401      	movs	r4, #1
    16fa:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    16fc:	2501      	movs	r5, #1
    16fe:	4329      	orrs	r1, r5
    1700:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1702:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1704:	2034      	movs	r0, #52	; 0x34
    1706:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1708:	3a39      	subs	r2, #57	; 0x39
    170a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    170c:	2202      	movs	r2, #2
    170e:	4311      	orrs	r1, r2
    1710:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1712:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1714:	2149      	movs	r1, #73	; 0x49
    1716:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1718:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    171a:	432a      	orrs	r2, r5
    171c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    171e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1720:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1722:	393a      	subs	r1, #58	; 0x3a
    1724:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1726:	2120      	movs	r1, #32
    1728:	430a      	orrs	r2, r1
    172a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    172c:	541a      	strb	r2, [r3, r0]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    172e:	4b12      	ldr	r3, [pc, #72]	; (1778 <i2c_init+0x88>)
    1730:	2142      	movs	r1, #66	; 0x42
    1732:	22c8      	movs	r2, #200	; 0xc8
    1734:	5099      	str	r1, [r3, r2]
    1736:	3101      	adds	r1, #1
    1738:	3a04      	subs	r2, #4
    173a:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
    173c:	4a0f      	ldr	r2, [pc, #60]	; (177c <i2c_init+0x8c>)
    173e:	69d3      	ldr	r3, [r2, #28]
    1740:	431c      	orrs	r4, r3
    1742:	61d4      	str	r4, [r2, #28]
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, GCLK_PCHCTRL_GEN_GCLK2_Val | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, GCLK_PCHCTRL_GEN_GCLK3_Val | (1 << GCLK_PCHCTRL_CHEN_Pos));
	
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);

	I2C_SERCOM->I2CS.ADDR.reg = I2C_BASE_ADDRESS;
    1744:	2384      	movs	r3, #132	; 0x84
    1746:	05db      	lsls	r3, r3, #23
    1748:	2212      	movs	r2, #18
    174a:	625a      	str	r2, [r3, #36]	; 0x24
	I2C_SERCOM->I2CS.CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN;
    174c:	32ee      	adds	r2, #238	; 0xee
    174e:	605a      	str	r2, [r3, #4]

	I2C_SERCOM->I2CS.INTENSET.reg = SERCOM_I2CS_INTENSET_PREC | SERCOM_I2CS_INTENSET_AMATCH |
    1750:	3af9      	subs	r2, #249	; 0xf9
    1752:	759a      	strb	r2, [r3, #22]
	SERCOM_I2CS_INTENSET_DRDY;
	
	I2C_SERCOM->I2CS.CTRLA.reg = SERCOM_I2CS_CTRLA_SDAHOLD(0x02) |  SERCOM_I2CS_CTRLA_MODE(0x04); // set SDAHOLD to 300-600ns and set to slave mode
    1754:	4a0a      	ldr	r2, [pc, #40]	; (1780 <i2c_init+0x90>)
    1756:	601a      	str	r2, [r3, #0]
	
	I2C_SERCOM->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1758:	681a      	ldr	r2, [r3, #0]
    175a:	3941      	subs	r1, #65	; 0x41
    175c:	430a      	orrs	r2, r1
    175e:	601a      	str	r2, [r3, #0]
	
	while((I2C_SERCOM->I2CS.SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_ENABLE));
    1760:	2384      	movs	r3, #132	; 0x84
    1762:	05db      	lsls	r3, r3, #23
    1764:	69db      	ldr	r3, [r3, #28]
    1766:	079b      	lsls	r3, r3, #30
    1768:	d4fa      	bmi.n	1760 <i2c_init+0x70>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    176a:	2280      	movs	r2, #128	; 0x80
    176c:	0052      	lsls	r2, r2, #1
    176e:	4b05      	ldr	r3, [pc, #20]	; (1784 <i2c_init+0x94>)
    1770:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(I2C_SERCOM_IRQ);
}
    1772:	bd30      	pop	{r4, r5, pc}
    1774:	40002800 	.word	0x40002800
    1778:	40001800 	.word	0x40001800
    177c:	40000400 	.word	0x40000400
    1780:	00200010 	.word	0x00200010
    1784:	e000e100 	.word	0xe000e100

00001788 <SysTick_Handler>:
void SysTick_Handler() {
    1788:	b510      	push	{r4, lr}
    178a:	b084      	sub	sp, #16
	led_0_counter++;
    178c:	4b60      	ldr	r3, [pc, #384]	; (1910 <SysTick_Handler+0x188>)
    178e:	8818      	ldrh	r0, [r3, #0]
    1790:	3001      	adds	r0, #1
    1792:	b280      	uxth	r0, r0
    1794:	8018      	strh	r0, [r3, #0]
	emg_counter++;
    1796:	885a      	ldrh	r2, [r3, #2]
    1798:	3201      	adds	r2, #1
    179a:	805a      	strh	r2, [r3, #2]
	if (ad5933_enabled) {
    179c:	4b5d      	ldr	r3, [pc, #372]	; (1914 <SysTick_Handler+0x18c>)
    179e:	781b      	ldrb	r3, [r3, #0]
    17a0:	2b00      	cmp	r3, #0
    17a2:	d04b      	beq.n	183c <SysTick_Handler+0xb4>
		imp_counter++;
    17a4:	4a5a      	ldr	r2, [pc, #360]	; (1910 <SysTick_Handler+0x188>)
    17a6:	8893      	ldrh	r3, [r2, #4]
    17a8:	3301      	adds	r3, #1
    17aa:	8093      	strh	r3, [r2, #4]
	if (max30205_enabled) {
    17ac:	4b59      	ldr	r3, [pc, #356]	; (1914 <SysTick_Handler+0x18c>)
    17ae:	785b      	ldrb	r3, [r3, #1]
    17b0:	2b00      	cmp	r3, #0
    17b2:	d048      	beq.n	1846 <SysTick_Handler+0xbe>
		temp_counter++;
    17b4:	4a56      	ldr	r2, [pc, #344]	; (1910 <SysTick_Handler+0x188>)
    17b6:	8913      	ldrh	r3, [r2, #8]
    17b8:	3301      	adds	r3, #1
    17ba:	8113      	strh	r3, [r2, #8]
	if (led_0_counter % 1001 == 0){
    17bc:	4956      	ldr	r1, [pc, #344]	; (1918 <SysTick_Handler+0x190>)
    17be:	4b57      	ldr	r3, [pc, #348]	; (191c <SysTick_Handler+0x194>)
    17c0:	4798      	blx	r3
    17c2:	b289      	uxth	r1, r1
    17c4:	2900      	cmp	r1, #0
    17c6:	d043      	beq.n	1850 <SysTick_Handler+0xc8>
	if (led_1_counter % 1001 == 0) {
    17c8:	4b51      	ldr	r3, [pc, #324]	; (1910 <SysTick_Handler+0x188>)
    17ca:	88d8      	ldrh	r0, [r3, #6]
    17cc:	4952      	ldr	r1, [pc, #328]	; (1918 <SysTick_Handler+0x190>)
    17ce:	4b53      	ldr	r3, [pc, #332]	; (191c <SysTick_Handler+0x194>)
    17d0:	4798      	blx	r3
    17d2:	b289      	uxth	r1, r1
    17d4:	2900      	cmp	r1, #0
    17d6:	d05b      	beq.n	1890 <SysTick_Handler+0x108>
	if (led_2_counter % 1001 == 0) {
    17d8:	4b4d      	ldr	r3, [pc, #308]	; (1910 <SysTick_Handler+0x188>)
    17da:	8958      	ldrh	r0, [r3, #10]
    17dc:	494e      	ldr	r1, [pc, #312]	; (1918 <SysTick_Handler+0x190>)
    17de:	4b4f      	ldr	r3, [pc, #316]	; (191c <SysTick_Handler+0x194>)
    17e0:	4798      	blx	r3
    17e2:	b289      	uxth	r1, r1
    17e4:	2900      	cmp	r1, #0
    17e6:	d100      	bne.n	17ea <SysTick_Handler+0x62>
    17e8:	e072      	b.n	18d0 <SysTick_Handler+0x148>
	if (emg_counter % emg_period_ms == 0) {
    17ea:	4b49      	ldr	r3, [pc, #292]	; (1910 <SysTick_Handler+0x188>)
    17ec:	8858      	ldrh	r0, [r3, #2]
    17ee:	8999      	ldrh	r1, [r3, #12]
    17f0:	4b4a      	ldr	r3, [pc, #296]	; (191c <SysTick_Handler+0x194>)
    17f2:	4798      	blx	r3
    17f4:	b289      	uxth	r1, r1
    17f6:	2900      	cmp	r1, #0
    17f8:	d104      	bne.n	1804 <SysTick_Handler+0x7c>
		emg_counter = 1;
    17fa:	2201      	movs	r2, #1
    17fc:	4b44      	ldr	r3, [pc, #272]	; (1910 <SysTick_Handler+0x188>)
    17fe:	805a      	strh	r2, [r3, #2]
		do_emg = true;
    1800:	4b44      	ldr	r3, [pc, #272]	; (1914 <SysTick_Handler+0x18c>)
    1802:	709a      	strb	r2, [r3, #2]
	if (imp_counter % imp_period_ms == 0) {
    1804:	4b42      	ldr	r3, [pc, #264]	; (1910 <SysTick_Handler+0x188>)
    1806:	8898      	ldrh	r0, [r3, #4]
    1808:	89d9      	ldrh	r1, [r3, #14]
    180a:	4b44      	ldr	r3, [pc, #272]	; (191c <SysTick_Handler+0x194>)
    180c:	4798      	blx	r3
    180e:	b289      	uxth	r1, r1
    1810:	2900      	cmp	r1, #0
    1812:	d104      	bne.n	181e <SysTick_Handler+0x96>
		imp_counter = 1;
    1814:	2201      	movs	r2, #1
    1816:	4b3e      	ldr	r3, [pc, #248]	; (1910 <SysTick_Handler+0x188>)
    1818:	809a      	strh	r2, [r3, #4]
		do_imp = true;
    181a:	4b3e      	ldr	r3, [pc, #248]	; (1914 <SysTick_Handler+0x18c>)
    181c:	70da      	strb	r2, [r3, #3]
	if (temp_counter % temp_period_ms == 0) {
    181e:	4b3c      	ldr	r3, [pc, #240]	; (1910 <SysTick_Handler+0x188>)
    1820:	8918      	ldrh	r0, [r3, #8]
    1822:	8a19      	ldrh	r1, [r3, #16]
    1824:	4b3d      	ldr	r3, [pc, #244]	; (191c <SysTick_Handler+0x194>)
    1826:	4798      	blx	r3
    1828:	b289      	uxth	r1, r1
    182a:	2900      	cmp	r1, #0
    182c:	d104      	bne.n	1838 <SysTick_Handler+0xb0>
		temp_counter = 1;
    182e:	2201      	movs	r2, #1
    1830:	4b37      	ldr	r3, [pc, #220]	; (1910 <SysTick_Handler+0x188>)
    1832:	811a      	strh	r2, [r3, #8]
		do_temp = true;
    1834:	4b37      	ldr	r3, [pc, #220]	; (1914 <SysTick_Handler+0x18c>)
    1836:	711a      	strb	r2, [r3, #4]
}
    1838:	b004      	add	sp, #16
    183a:	bd10      	pop	{r4, pc}
		led_1_counter++;
    183c:	4a34      	ldr	r2, [pc, #208]	; (1910 <SysTick_Handler+0x188>)
    183e:	88d3      	ldrh	r3, [r2, #6]
    1840:	3301      	adds	r3, #1
    1842:	80d3      	strh	r3, [r2, #6]
    1844:	e7b2      	b.n	17ac <SysTick_Handler+0x24>
		led_2_counter++;
    1846:	4a32      	ldr	r2, [pc, #200]	; (1910 <SysTick_Handler+0x188>)
    1848:	8953      	ldrh	r3, [r2, #10]
    184a:	3301      	adds	r3, #1
    184c:	8153      	strh	r3, [r2, #10]
    184e:	e7b5      	b.n	17bc <SysTick_Handler+0x34>
		led_0_counter = 1;
    1850:	2201      	movs	r2, #1
    1852:	4b2f      	ldr	r3, [pc, #188]	; (1910 <SysTick_Handler+0x188>)
    1854:	801a      	strh	r2, [r3, #0]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1856:	a801      	add	r0, sp, #4
    1858:	4b31      	ldr	r3, [pc, #196]	; (1920 <SysTick_Handler+0x198>)
    185a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    185c:	23c0      	movs	r3, #192	; 0xc0
    185e:	05db      	lsls	r3, r3, #23
    1860:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1862:	4a30      	ldr	r2, [pc, #192]	; (1924 <SysTick_Handler+0x19c>)
    1864:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1866:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1868:	4053      	eors	r3, r2
    186a:	401c      	ands	r4, r3
    186c:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    186e:	a801      	add	r0, sp, #4
    1870:	4b2d      	ldr	r3, [pc, #180]	; (1928 <SysTick_Handler+0x1a0>)
    1872:	4798      	blx	r3
	if (level) {
    1874:	0523      	lsls	r3, r4, #20
    1876:	d405      	bmi.n	1884 <SysTick_Handler+0xfc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1878:	2280      	movs	r2, #128	; 0x80
    187a:	0112      	lsls	r2, r2, #4
    187c:	23c0      	movs	r3, #192	; 0xc0
    187e:	05db      	lsls	r3, r3, #23
    1880:	619a      	str	r2, [r3, #24]
    1882:	e7a1      	b.n	17c8 <SysTick_Handler+0x40>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1884:	2280      	movs	r2, #128	; 0x80
    1886:	0112      	lsls	r2, r2, #4
    1888:	23c0      	movs	r3, #192	; 0xc0
    188a:	05db      	lsls	r3, r3, #23
    188c:	615a      	str	r2, [r3, #20]
    188e:	e79b      	b.n	17c8 <SysTick_Handler+0x40>
		led_1_counter = 1;
    1890:	2201      	movs	r2, #1
    1892:	4b1f      	ldr	r3, [pc, #124]	; (1910 <SysTick_Handler+0x188>)
    1894:	80da      	strh	r2, [r3, #6]
	CRITICAL_SECTION_ENTER();
    1896:	a802      	add	r0, sp, #8
    1898:	4b21      	ldr	r3, [pc, #132]	; (1920 <SysTick_Handler+0x198>)
    189a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    189c:	23c0      	movs	r3, #192	; 0xc0
    189e:	05db      	lsls	r3, r3, #23
    18a0:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    18a2:	4a20      	ldr	r2, [pc, #128]	; (1924 <SysTick_Handler+0x19c>)
    18a4:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    18a6:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    18a8:	4053      	eors	r3, r2
    18aa:	401c      	ands	r4, r3
    18ac:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    18ae:	a802      	add	r0, sp, #8
    18b0:	4b1d      	ldr	r3, [pc, #116]	; (1928 <SysTick_Handler+0x1a0>)
    18b2:	4798      	blx	r3
	if (level) {
    18b4:	0423      	lsls	r3, r4, #16
    18b6:	d405      	bmi.n	18c4 <SysTick_Handler+0x13c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    18b8:	2280      	movs	r2, #128	; 0x80
    18ba:	0212      	lsls	r2, r2, #8
    18bc:	23c0      	movs	r3, #192	; 0xc0
    18be:	05db      	lsls	r3, r3, #23
    18c0:	619a      	str	r2, [r3, #24]
    18c2:	e789      	b.n	17d8 <SysTick_Handler+0x50>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    18c4:	2280      	movs	r2, #128	; 0x80
    18c6:	0212      	lsls	r2, r2, #8
    18c8:	23c0      	movs	r3, #192	; 0xc0
    18ca:	05db      	lsls	r3, r3, #23
    18cc:	615a      	str	r2, [r3, #20]
    18ce:	e783      	b.n	17d8 <SysTick_Handler+0x50>
		led_2_counter = 1;
    18d0:	2201      	movs	r2, #1
    18d2:	4b0f      	ldr	r3, [pc, #60]	; (1910 <SysTick_Handler+0x188>)
    18d4:	815a      	strh	r2, [r3, #10]
	CRITICAL_SECTION_ENTER();
    18d6:	a803      	add	r0, sp, #12
    18d8:	4b11      	ldr	r3, [pc, #68]	; (1920 <SysTick_Handler+0x198>)
    18da:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    18dc:	23c0      	movs	r3, #192	; 0xc0
    18de:	05db      	lsls	r3, r3, #23
    18e0:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    18e2:	4a10      	ldr	r2, [pc, #64]	; (1924 <SysTick_Handler+0x19c>)
    18e4:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    18e6:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    18e8:	4053      	eors	r3, r2
    18ea:	401c      	ands	r4, r3
    18ec:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    18ee:	a803      	add	r0, sp, #12
    18f0:	4b0d      	ldr	r3, [pc, #52]	; (1928 <SysTick_Handler+0x1a0>)
    18f2:	4798      	blx	r3
	if (level) {
    18f4:	0463      	lsls	r3, r4, #17
    18f6:	d405      	bmi.n	1904 <SysTick_Handler+0x17c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    18f8:	2280      	movs	r2, #128	; 0x80
    18fa:	01d2      	lsls	r2, r2, #7
    18fc:	23c0      	movs	r3, #192	; 0xc0
    18fe:	05db      	lsls	r3, r3, #23
    1900:	619a      	str	r2, [r3, #24]
    1902:	e772      	b.n	17ea <SysTick_Handler+0x62>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1904:	2280      	movs	r2, #128	; 0x80
    1906:	01d2      	lsls	r2, r2, #7
    1908:	23c0      	movs	r3, #192	; 0xc0
    190a:	05db      	lsls	r3, r3, #23
    190c:	615a      	str	r2, [r3, #20]
    190e:	e76c      	b.n	17ea <SysTick_Handler+0x62>
    1910:	20000000 	.word	0x20000000
    1914:	20000038 	.word	0x20000038
    1918:	000003e9 	.word	0x000003e9
    191c:	000020e5 	.word	0x000020e5
    1920:	000009e9 	.word	0x000009e9
    1924:	40002800 	.word	0x40002800
    1928:	000009f7 	.word	0x000009f7

0000192c <main>:
int main(void) {
    192c:	b570      	push	{r4, r5, r6, lr}
	atmel_start_init();
    192e:	4b9f      	ldr	r3, [pc, #636]	; (1bac <main+0x280>)
    1930:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1932:	499f      	ldr	r1, [pc, #636]	; (1bb0 <main+0x284>)
    1934:	4b9f      	ldr	r3, [pc, #636]	; (1bb4 <main+0x288>)
    1936:	604b      	str	r3, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1938:	489f      	ldr	r0, [pc, #636]	; (1bb8 <main+0x28c>)
    193a:	6a03      	ldr	r3, [r0, #32]
    193c:	021b      	lsls	r3, r3, #8
    193e:	0a1b      	lsrs	r3, r3, #8
    1940:	22c0      	movs	r2, #192	; 0xc0
    1942:	0612      	lsls	r2, r2, #24
    1944:	4313      	orrs	r3, r2
    1946:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1948:	2200      	movs	r2, #0
    194a:	608a      	str	r2, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    194c:	2307      	movs	r3, #7
    194e:	600b      	str	r3, [r1, #0]
	imp.imp_1_real[0] = 100;
    1950:	4b9a      	ldr	r3, [pc, #616]	; (1bbc <main+0x290>)
    1952:	2164      	movs	r1, #100	; 0x64
    1954:	7019      	strb	r1, [r3, #0]
	imp.imp_1_real[1] = 0; // 100
    1956:	705a      	strb	r2, [r3, #1]
	imp.imp_1_img[0] = 150;
    1958:	3132      	adds	r1, #50	; 0x32
    195a:	7099      	strb	r1, [r3, #2]
	imp.imp_1_img[1] = 0;  // 150
    195c:	70da      	strb	r2, [r3, #3]
	imp.imp_2_real[0] = 200;
    195e:	3132      	adds	r1, #50	; 0x32
    1960:	7119      	strb	r1, [r3, #4]
	imp.imp_2_real[1] = 0; // 200
    1962:	715a      	strb	r2, [r3, #5]
	imp.imp_2_img[0] = 250;
    1964:	3132      	adds	r1, #50	; 0x32
    1966:	7199      	strb	r1, [r3, #6]
	imp.imp_2_img[1] = 0; // 250
    1968:	71da      	strb	r2, [r3, #7]
	i2c_init();
    196a:	4b95      	ldr	r3, [pc, #596]	; (1bc0 <main+0x294>)
    196c:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_MST);
    196e:	4895      	ldr	r0, [pc, #596]	; (1bc4 <main+0x298>)
    1970:	4b95      	ldr	r3, [pc, #596]	; (1bc8 <main+0x29c>)
    1972:	4798      	blx	r3
		if (AD_scan() == I2C_OK) {
    1974:	4b95      	ldr	r3, [pc, #596]	; (1bcc <main+0x2a0>)
    1976:	4798      	blx	r3
    1978:	2800      	cmp	r0, #0
    197a:	d14f      	bne.n	1a1c <main+0xf0>
			if ((	AD_reset() ||
    197c:	4b94      	ldr	r3, [pc, #592]	; (1bd0 <main+0x2a4>)
    197e:	4798      	blx	r3
			AD_set_range(CTRL_OUTPUT_RANGE_1) ||
    1980:	2800      	cmp	r0, #0
    1982:	d134      	bne.n	19ee <main+0xc2>
			AD_set_clock_internal() ||
    1984:	4b93      	ldr	r3, [pc, #588]	; (1bd4 <main+0x2a8>)
    1986:	4798      	blx	r3
			if ((	AD_reset() ||
    1988:	2800      	cmp	r0, #0
    198a:	d132      	bne.n	19f2 <main+0xc6>
			AD_set_start_freq(AD5933_FREQUENCY_MAIN) ||
    198c:	20fa      	movs	r0, #250	; 0xfa
    198e:	0080      	lsls	r0, r0, #2
    1990:	4b91      	ldr	r3, [pc, #580]	; (1bd8 <main+0x2ac>)
    1992:	4798      	blx	r3
			AD_set_clock_internal() ||
    1994:	2800      	cmp	r0, #0
    1996:	d12e      	bne.n	19f6 <main+0xca>
			AD_set_increment_freq(0) ||
    1998:	4b90      	ldr	r3, [pc, #576]	; (1bdc <main+0x2b0>)
    199a:	4798      	blx	r3
			AD_set_start_freq(AD5933_FREQUENCY_MAIN) ||
    199c:	2800      	cmp	r0, #0
    199e:	d12c      	bne.n	19fa <main+0xce>
			AD_set_n_increments(0) ||
    19a0:	4b8f      	ldr	r3, [pc, #572]	; (1be0 <main+0x2b4>)
    19a2:	4798      	blx	r3
			AD_set_increment_freq(0) ||
    19a4:	2800      	cmp	r0, #0
    19a6:	d12a      	bne.n	19fe <main+0xd2>
			AD_set_settling_cycles(500) ||
    19a8:	30f5      	adds	r0, #245	; 0xf5
    19aa:	30ff      	adds	r0, #255	; 0xff
    19ac:	4b8d      	ldr	r3, [pc, #564]	; (1be4 <main+0x2b8>)
    19ae:	4798      	blx	r3
			AD_set_n_increments(0) ||
    19b0:	2800      	cmp	r0, #0
    19b2:	d126      	bne.n	1a02 <main+0xd6>
			AD_set_range(CTRL_OUTPUT_RANGE_1) ||
    19b4:	4b8c      	ldr	r3, [pc, #560]	; (1be8 <main+0x2bc>)
    19b6:	4798      	blx	r3
			AD_set_settling_cycles(500) ||
    19b8:	2800      	cmp	r0, #0
    19ba:	d124      	bne.n	1a06 <main+0xda>
			AD_set_PGA_gain(CTRL_PGA_GAIN_X1))
    19bc:	3001      	adds	r0, #1
    19be:	4b8b      	ldr	r3, [pc, #556]	; (1bec <main+0x2c0>)
    19c0:	4798      	blx	r3
			AD_set_range(CTRL_OUTPUT_RANGE_1) ||
    19c2:	2800      	cmp	r0, #0
    19c4:	d121      	bne.n	1a0a <main+0xde>
    19c6:	2300      	movs	r3, #0
			if ((	AD_reset() ||
    19c8:	2b00      	cmp	r3, #0
    19ca:	d020      	beq.n	1a0e <main+0xe2>
				ad5933_enabled = false;
    19cc:	2200      	movs	r2, #0
    19ce:	4b88      	ldr	r3, [pc, #544]	; (1bf0 <main+0x2c4>)
    19d0:	701a      	strb	r2, [r3, #0]
		if (MAX_scan() == I2C_OK) {
    19d2:	4b88      	ldr	r3, [pc, #544]	; (1bf4 <main+0x2c8>)
    19d4:	4798      	blx	r3
    19d6:	2800      	cmp	r0, #0
    19d8:	d124      	bne.n	1a24 <main+0xf8>
			MAX_begin();
    19da:	4b87      	ldr	r3, [pc, #540]	; (1bf8 <main+0x2cc>)
    19dc:	4798      	blx	r3
			max30205_enabled = true;
    19de:	2201      	movs	r2, #1
    19e0:	4b83      	ldr	r3, [pc, #524]	; (1bf0 <main+0x2c4>)
    19e2:	705a      	strb	r2, [r3, #1]
	adc_sync_enable_channel(&ADC_0, 0);
    19e4:	2100      	movs	r1, #0
    19e6:	4885      	ldr	r0, [pc, #532]	; (1bfc <main+0x2d0>)
    19e8:	4b85      	ldr	r3, [pc, #532]	; (1c00 <main+0x2d4>)
    19ea:	4798      	blx	r3
    19ec:	e026      	b.n	1a3c <main+0x110>
			AD_set_range(CTRL_OUTPUT_RANGE_1) ||
    19ee:	2301      	movs	r3, #1
    19f0:	e7ea      	b.n	19c8 <main+0x9c>
    19f2:	2301      	movs	r3, #1
    19f4:	e7e8      	b.n	19c8 <main+0x9c>
    19f6:	2301      	movs	r3, #1
    19f8:	e7e6      	b.n	19c8 <main+0x9c>
    19fa:	2301      	movs	r3, #1
    19fc:	e7e4      	b.n	19c8 <main+0x9c>
    19fe:	2301      	movs	r3, #1
    1a00:	e7e2      	b.n	19c8 <main+0x9c>
    1a02:	2301      	movs	r3, #1
    1a04:	e7e0      	b.n	19c8 <main+0x9c>
    1a06:	2301      	movs	r3, #1
    1a08:	e7de      	b.n	19c8 <main+0x9c>
    1a0a:	2301      	movs	r3, #1
    1a0c:	e7dc      	b.n	19c8 <main+0x9c>
				AD_set_power_mode(POWER_STANDBY);
    1a0e:	20b0      	movs	r0, #176	; 0xb0
    1a10:	4b7c      	ldr	r3, [pc, #496]	; (1c04 <main+0x2d8>)
    1a12:	4798      	blx	r3
				ad5933_enabled = true;
    1a14:	2201      	movs	r2, #1
    1a16:	4b76      	ldr	r3, [pc, #472]	; (1bf0 <main+0x2c4>)
    1a18:	701a      	strb	r2, [r3, #0]
    1a1a:	e7da      	b.n	19d2 <main+0xa6>
			ad5933_enabled = false;
    1a1c:	2200      	movs	r2, #0
    1a1e:	4b74      	ldr	r3, [pc, #464]	; (1bf0 <main+0x2c4>)
    1a20:	701a      	strb	r2, [r3, #0]
    1a22:	e7d6      	b.n	19d2 <main+0xa6>
			max30205_enabled = false;
    1a24:	2200      	movs	r2, #0
    1a26:	4b72      	ldr	r3, [pc, #456]	; (1bf0 <main+0x2c4>)
    1a28:	705a      	strb	r2, [r3, #1]
    1a2a:	e7db      	b.n	19e4 <main+0xb8>
		if (do_imp) {
    1a2c:	4b70      	ldr	r3, [pc, #448]	; (1bf0 <main+0x2c4>)
    1a2e:	78dd      	ldrb	r5, [r3, #3]
    1a30:	2d00      	cmp	r5, #0
    1a32:	d111      	bne.n	1a58 <main+0x12c>
		if (req_read) {
    1a34:	4b6e      	ldr	r3, [pc, #440]	; (1bf0 <main+0x2c4>)
    1a36:	795c      	ldrb	r4, [r3, #5]
    1a38:	2c00      	cmp	r4, #0
    1a3a:	d15f      	bne.n	1afc <main+0x1d0>
		if (do_emg) {
    1a3c:	4b6c      	ldr	r3, [pc, #432]	; (1bf0 <main+0x2c4>)
    1a3e:	789b      	ldrb	r3, [r3, #2]
    1a40:	2b00      	cmp	r3, #0
    1a42:	d0f3      	beq.n	1a2c <main+0x100>
			adc_sync_read_channel(&ADC_0, 0, emg, 2);
    1a44:	2302      	movs	r3, #2
    1a46:	4a70      	ldr	r2, [pc, #448]	; (1c08 <main+0x2dc>)
    1a48:	2100      	movs	r1, #0
    1a4a:	486c      	ldr	r0, [pc, #432]	; (1bfc <main+0x2d0>)
    1a4c:	4c6f      	ldr	r4, [pc, #444]	; (1c0c <main+0x2e0>)
    1a4e:	47a0      	blx	r4
			do_emg = false;
    1a50:	2200      	movs	r2, #0
    1a52:	4b67      	ldr	r3, [pc, #412]	; (1bf0 <main+0x2c4>)
    1a54:	709a      	strb	r2, [r3, #2]
    1a56:	e7e9      	b.n	1a2c <main+0x100>
			i2c_m_sync_set_slaveaddr(&I2C_MST, AD5933_ADDR, I2C_M_SEVEN);
    1a58:	2280      	movs	r2, #128	; 0x80
    1a5a:	0112      	lsls	r2, r2, #4
    1a5c:	210d      	movs	r1, #13
    1a5e:	4859      	ldr	r0, [pc, #356]	; (1bc4 <main+0x298>)
    1a60:	4b6b      	ldr	r3, [pc, #428]	; (1c10 <main+0x2e4>)
    1a62:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1a64:	23c0      	movs	r3, #192	; 0xc0
    1a66:	05db      	lsls	r3, r3, #23
    1a68:	2280      	movs	r2, #128	; 0x80
    1a6a:	03d2      	lsls	r2, r2, #15
    1a6c:	619a      	str	r2, [r3, #24]
    1a6e:	2280      	movs	r2, #128	; 0x80
    1a70:	0412      	lsls	r2, r2, #16
    1a72:	619a      	str	r2, [r3, #24]
    1a74:	2280      	movs	r2, #128	; 0x80
    1a76:	0452      	lsls	r2, r2, #17
    1a78:	619a      	str	r2, [r3, #24]
    1a7a:	2280      	movs	r2, #128	; 0x80
    1a7c:	0492      	lsls	r2, r2, #18
    1a7e:	619a      	str	r2, [r3, #24]
			delay_us(500);
    1a80:	20fa      	movs	r0, #250	; 0xfa
    1a82:	0040      	lsls	r0, r0, #1
    1a84:	4b63      	ldr	r3, [pc, #396]	; (1c14 <main+0x2e8>)
    1a86:	4798      	blx	r3
			bool ad_res = false;
    1a88:	2400      	movs	r4, #0
			while (!ad_res) {
    1a8a:	2c00      	cmp	r4, #0
    1a8c:	d107      	bne.n	1a9e <main+0x172>
				if (AD_get_complex_data(imp.imp_1_real, imp.imp_1_img) == I2C_OK) ad_res = true;
    1a8e:	4962      	ldr	r1, [pc, #392]	; (1c18 <main+0x2ec>)
    1a90:	1e88      	subs	r0, r1, #2
    1a92:	4b62      	ldr	r3, [pc, #392]	; (1c1c <main+0x2f0>)
    1a94:	4798      	blx	r3
    1a96:	2800      	cmp	r0, #0
    1a98:	d1f7      	bne.n	1a8a <main+0x15e>
    1a9a:	002c      	movs	r4, r5
    1a9c:	e7f5      	b.n	1a8a <main+0x15e>
    1a9e:	23c0      	movs	r3, #192	; 0xc0
    1aa0:	05db      	lsls	r3, r3, #23
    1aa2:	2280      	movs	r2, #128	; 0x80
    1aa4:	03d2      	lsls	r2, r2, #15
    1aa6:	619a      	str	r2, [r3, #24]
    1aa8:	2280      	movs	r2, #128	; 0x80
    1aaa:	0412      	lsls	r2, r2, #16
    1aac:	619a      	str	r2, [r3, #24]
    1aae:	2280      	movs	r2, #128	; 0x80
    1ab0:	0452      	lsls	r2, r2, #17
    1ab2:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ab4:	2280      	movs	r2, #128	; 0x80
    1ab6:	0492      	lsls	r2, r2, #18
    1ab8:	615a      	str	r2, [r3, #20]
			delay_us(500);
    1aba:	20fa      	movs	r0, #250	; 0xfa
    1abc:	0040      	lsls	r0, r0, #1
    1abe:	4b55      	ldr	r3, [pc, #340]	; (1c14 <main+0x2e8>)
    1ac0:	4798      	blx	r3
			ad_res = false;
    1ac2:	2500      	movs	r5, #0
			while (!ad_res) {
    1ac4:	2d00      	cmp	r5, #0
    1ac6:	d107      	bne.n	1ad8 <main+0x1ac>
				if (AD_get_complex_data(imp.imp_2_real, imp.imp_2_img) == I2C_OK) ad_res = true;
    1ac8:	4955      	ldr	r1, [pc, #340]	; (1c20 <main+0x2f4>)
    1aca:	1e88      	subs	r0, r1, #2
    1acc:	4b53      	ldr	r3, [pc, #332]	; (1c1c <main+0x2f0>)
    1ace:	4798      	blx	r3
    1ad0:	2800      	cmp	r0, #0
    1ad2:	d1f7      	bne.n	1ac4 <main+0x198>
    1ad4:	0025      	movs	r5, r4
    1ad6:	e7f5      	b.n	1ac4 <main+0x198>
    1ad8:	23c0      	movs	r3, #192	; 0xc0
    1ada:	05db      	lsls	r3, r3, #23
    1adc:	2280      	movs	r2, #128	; 0x80
    1ade:	0452      	lsls	r2, r2, #17
    1ae0:	615a      	str	r2, [r3, #20]
    1ae2:	2280      	movs	r2, #128	; 0x80
    1ae4:	03d2      	lsls	r2, r2, #15
    1ae6:	615a      	str	r2, [r3, #20]
    1ae8:	2280      	movs	r2, #128	; 0x80
    1aea:	0412      	lsls	r2, r2, #16
    1aec:	615a      	str	r2, [r3, #20]
    1aee:	2280      	movs	r2, #128	; 0x80
    1af0:	0492      	lsls	r2, r2, #18
    1af2:	615a      	str	r2, [r3, #20]
			do_imp = false;
    1af4:	2200      	movs	r2, #0
    1af6:	4b3e      	ldr	r3, [pc, #248]	; (1bf0 <main+0x2c4>)
    1af8:	70da      	strb	r2, [r3, #3]
    1afa:	e79b      	b.n	1a34 <main+0x108>
			req_read = false;
    1afc:	2200      	movs	r2, #0
    1afe:	715a      	strb	r2, [r3, #5]
			i2c_m_sync_set_slaveaddr(&I2C_MST, AD5933_ADDR, I2C_M_SEVEN);
    1b00:	2280      	movs	r2, #128	; 0x80
    1b02:	0112      	lsls	r2, r2, #4
    1b04:	210d      	movs	r1, #13
    1b06:	482f      	ldr	r0, [pc, #188]	; (1bc4 <main+0x298>)
    1b08:	4b41      	ldr	r3, [pc, #260]	; (1c10 <main+0x2e4>)
    1b0a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1b0c:	23c0      	movs	r3, #192	; 0xc0
    1b0e:	05db      	lsls	r3, r3, #23
    1b10:	2280      	movs	r2, #128	; 0x80
    1b12:	03d2      	lsls	r2, r2, #15
    1b14:	619a      	str	r2, [r3, #24]
    1b16:	2280      	movs	r2, #128	; 0x80
    1b18:	0412      	lsls	r2, r2, #16
    1b1a:	619a      	str	r2, [r3, #24]
    1b1c:	2280      	movs	r2, #128	; 0x80
    1b1e:	0452      	lsls	r2, r2, #17
    1b20:	619a      	str	r2, [r3, #24]
    1b22:	2280      	movs	r2, #128	; 0x80
    1b24:	0492      	lsls	r2, r2, #18
    1b26:	619a      	str	r2, [r3, #24]
			delay_us(50000);
    1b28:	483e      	ldr	r0, [pc, #248]	; (1c24 <main+0x2f8>)
    1b2a:	4b3a      	ldr	r3, [pc, #232]	; (1c14 <main+0x2e8>)
    1b2c:	4798      	blx	r3
			bool ad_res = false;
    1b2e:	2500      	movs	r5, #0
			while (!ad_res) {
    1b30:	2d00      	cmp	r5, #0
    1b32:	d107      	bne.n	1b44 <main+0x218>
				if (AD_get_complex_data(imp.imp_1_real, imp.imp_1_img) == I2C_OK) ad_res = true;
    1b34:	4938      	ldr	r1, [pc, #224]	; (1c18 <main+0x2ec>)
    1b36:	1e88      	subs	r0, r1, #2
    1b38:	4b38      	ldr	r3, [pc, #224]	; (1c1c <main+0x2f0>)
    1b3a:	4798      	blx	r3
    1b3c:	2800      	cmp	r0, #0
    1b3e:	d1f7      	bne.n	1b30 <main+0x204>
    1b40:	0025      	movs	r5, r4
    1b42:	e7f5      	b.n	1b30 <main+0x204>
    1b44:	23c0      	movs	r3, #192	; 0xc0
    1b46:	05db      	lsls	r3, r3, #23
    1b48:	2280      	movs	r2, #128	; 0x80
    1b4a:	03d2      	lsls	r2, r2, #15
    1b4c:	619a      	str	r2, [r3, #24]
    1b4e:	2280      	movs	r2, #128	; 0x80
    1b50:	0412      	lsls	r2, r2, #16
    1b52:	619a      	str	r2, [r3, #24]
    1b54:	2280      	movs	r2, #128	; 0x80
    1b56:	0452      	lsls	r2, r2, #17
    1b58:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b5a:	2280      	movs	r2, #128	; 0x80
    1b5c:	0492      	lsls	r2, r2, #18
    1b5e:	615a      	str	r2, [r3, #20]
			delay_us(50000);
    1b60:	4830      	ldr	r0, [pc, #192]	; (1c24 <main+0x2f8>)
    1b62:	4b2c      	ldr	r3, [pc, #176]	; (1c14 <main+0x2e8>)
    1b64:	4798      	blx	r3
			ad_res = false;
    1b66:	2400      	movs	r4, #0
			while (!ad_res) {
    1b68:	2c00      	cmp	r4, #0
    1b6a:	d107      	bne.n	1b7c <main+0x250>
				if (AD_get_complex_data(imp.imp_2_real, imp.imp_2_img) == I2C_OK) ad_res = true;
    1b6c:	492c      	ldr	r1, [pc, #176]	; (1c20 <main+0x2f4>)
    1b6e:	1e88      	subs	r0, r1, #2
    1b70:	4b2a      	ldr	r3, [pc, #168]	; (1c1c <main+0x2f0>)
    1b72:	4798      	blx	r3
    1b74:	2800      	cmp	r0, #0
    1b76:	d1f7      	bne.n	1b68 <main+0x23c>
    1b78:	002c      	movs	r4, r5
    1b7a:	e7f5      	b.n	1b68 <main+0x23c>
    1b7c:	23c0      	movs	r3, #192	; 0xc0
    1b7e:	05db      	lsls	r3, r3, #23
    1b80:	2280      	movs	r2, #128	; 0x80
    1b82:	0452      	lsls	r2, r2, #17
    1b84:	615a      	str	r2, [r3, #20]
    1b86:	2280      	movs	r2, #128	; 0x80
    1b88:	03d2      	lsls	r2, r2, #15
    1b8a:	615a      	str	r2, [r3, #20]
    1b8c:	2280      	movs	r2, #128	; 0x80
    1b8e:	0412      	lsls	r2, r2, #16
    1b90:	615a      	str	r2, [r3, #20]
    1b92:	2280      	movs	r2, #128	; 0x80
    1b94:	0492      	lsls	r2, r2, #18
    1b96:	615a      	str	r2, [r3, #20]
			do_imp = false;
    1b98:	4c15      	ldr	r4, [pc, #84]	; (1bf0 <main+0x2c4>)
    1b9a:	2500      	movs	r5, #0
    1b9c:	70e5      	strb	r5, [r4, #3]
			delay_us(5000);
    1b9e:	4822      	ldr	r0, [pc, #136]	; (1c28 <main+0x2fc>)
    1ba0:	4b1c      	ldr	r3, [pc, #112]	; (1c14 <main+0x2e8>)
    1ba2:	4798      	blx	r3
			do_temp = false;
    1ba4:	7125      	strb	r5, [r4, #4]
			read_rdy[0] = 1;
    1ba6:	2301      	movs	r3, #1
    1ba8:	7223      	strb	r3, [r4, #8]
    1baa:	e747      	b.n	1a3c <main+0x110>
    1bac:	000005f1 	.word	0x000005f1
    1bb0:	e000e010 	.word	0xe000e010
    1bb4:	00001f3f 	.word	0x00001f3f
    1bb8:	e000ed00 	.word	0xe000ed00
    1bbc:	2000008c 	.word	0x2000008c
    1bc0:	000016f1 	.word	0x000016f1
    1bc4:	20000064 	.word	0x20000064
    1bc8:	00000acd 	.word	0x00000acd
    1bcc:	0000016d 	.word	0x0000016d
    1bd0:	00000229 	.word	0x00000229
    1bd4:	000002ad 	.word	0x000002ad
    1bd8:	00000321 	.word	0x00000321
    1bdc:	00000395 	.word	0x00000395
    1be0:	000003f9 	.word	0x000003f9
    1be4:	000002e9 	.word	0x000002e9
    1be8:	0000047d 	.word	0x0000047d
    1bec:	00000429 	.word	0x00000429
    1bf0:	20000038 	.word	0x20000038
    1bf4:	00001f55 	.word	0x00001f55
    1bf8:	00001fa1 	.word	0x00001fa1
    1bfc:	20000060 	.word	0x20000060
    1c00:	0000090d 	.word	0x0000090d
    1c04:	000004e5 	.word	0x000004e5
    1c08:	20000084 	.word	0x20000084
    1c0c:	00000939 	.word	0x00000939
    1c10:	00000ad9 	.word	0x00000ad9
    1c14:	00000a05 	.word	0x00000a05
    1c18:	2000008e 	.word	0x2000008e
    1c1c:	00000511 	.word	0x00000511
    1c20:	20000092 	.word	0x20000092
    1c24:	0000c350 	.word	0x0000c350
    1c28:	00001388 	.word	0x00001388

00001c2c <i2c_process_cmd_chr>:
	}
	
}

// assume we are using a repeated start method for i2c, the master will send us a char with a register address (the enum of our registers), we store this, then on request kick out the expected result
void i2c_process_cmd_chr() {
    1c2c:	b570      	push	{r4, r5, r6, lr}
	switch (cmd_chr) {
    1c2e:	4b41      	ldr	r3, [pc, #260]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1c30:	7c9a      	ldrb	r2, [r3, #18]
    1c32:	2a0d      	cmp	r2, #13
    1c34:	d809      	bhi.n	1c4a <i2c_process_cmd_chr+0x1e>
    1c36:	0093      	lsls	r3, r2, #2
    1c38:	4a3f      	ldr	r2, [pc, #252]	; (1d38 <i2c_process_cmd_chr+0x10c>)
    1c3a:	58d3      	ldr	r3, [r2, r3]
    1c3c:	469f      	mov	pc, r3
		case EMG:
			tx_buffer = (uint8_t *)emg;	//TODO: check if this is at all the right way to assign a buffer
    1c3e:	4a3f      	ldr	r2, [pc, #252]	; (1d3c <i2c_process_cmd_chr+0x110>)
    1c40:	4b3f      	ldr	r3, [pc, #252]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1c42:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 2;
    1c44:	2202      	movs	r2, #2
    1c46:	4b3b      	ldr	r3, [pc, #236]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1c48:	74da      	strb	r2, [r3, #19]
			break;
		default:
			// nothing here
			break;
	}
    1c4a:	bd70      	pop	{r4, r5, r6, pc}
			tx_buffer = (uint8_t *)imp.imp_1_real;
    1c4c:	4a3d      	ldr	r2, [pc, #244]	; (1d44 <i2c_process_cmd_chr+0x118>)
    1c4e:	4b3c      	ldr	r3, [pc, #240]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1c50:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 2;
    1c52:	2202      	movs	r2, #2
    1c54:	4b37      	ldr	r3, [pc, #220]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1c56:	74da      	strb	r2, [r3, #19]
			break;
    1c58:	e7f7      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			tx_buffer = (uint8_t *)imp.imp_1_img;
    1c5a:	4a3b      	ldr	r2, [pc, #236]	; (1d48 <i2c_process_cmd_chr+0x11c>)
    1c5c:	4b38      	ldr	r3, [pc, #224]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1c5e:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 2;
    1c60:	2202      	movs	r2, #2
    1c62:	4b34      	ldr	r3, [pc, #208]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1c64:	74da      	strb	r2, [r3, #19]
			break;
    1c66:	e7f0      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			tx_buffer = (uint8_t *)imp.imp_2_real;
    1c68:	4a38      	ldr	r2, [pc, #224]	; (1d4c <i2c_process_cmd_chr+0x120>)
    1c6a:	4b35      	ldr	r3, [pc, #212]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1c6c:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 2;
    1c6e:	2202      	movs	r2, #2
    1c70:	4b30      	ldr	r3, [pc, #192]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1c72:	74da      	strb	r2, [r3, #19]
			break;
    1c74:	e7e9      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			tx_buffer = (uint8_t *)imp.imp_2_img;
    1c76:	4a36      	ldr	r2, [pc, #216]	; (1d50 <i2c_process_cmd_chr+0x124>)
    1c78:	4b31      	ldr	r3, [pc, #196]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1c7a:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 2;
    1c7c:	2202      	movs	r2, #2
    1c7e:	4b2d      	ldr	r3, [pc, #180]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1c80:	74da      	strb	r2, [r3, #19]
			break;
    1c82:	e7e2      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			tx_buffer = (uint8_t *)imp.imp_all;
    1c84:	4a2f      	ldr	r2, [pc, #188]	; (1d44 <i2c_process_cmd_chr+0x118>)
    1c86:	4b2e      	ldr	r3, [pc, #184]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1c88:	601a      	str	r2, [r3, #0]
			tx_buffer_len = 8;
    1c8a:	2208      	movs	r2, #8
    1c8c:	4b29      	ldr	r3, [pc, #164]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1c8e:	74da      	strb	r2, [r3, #19]
			read_rdy[0] = 0;
    1c90:	2200      	movs	r2, #0
    1c92:	4b30      	ldr	r3, [pc, #192]	; (1d54 <i2c_process_cmd_chr+0x128>)
    1c94:	721a      	strb	r2, [r3, #8]
			break;
    1c96:	e7d8      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			tx_buffer = (uint8_t *)temp;
    1c98:	4b2e      	ldr	r3, [pc, #184]	; (1d54 <i2c_process_cmd_chr+0x128>)
    1c9a:	330c      	adds	r3, #12
    1c9c:	4a28      	ldr	r2, [pc, #160]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1c9e:	6013      	str	r3, [r2, #0]
			tx_buffer_len = 2;
    1ca0:	2202      	movs	r2, #2
    1ca2:	4b24      	ldr	r3, [pc, #144]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1ca4:	74da      	strb	r2, [r3, #19]
			break;
    1ca6:	e7d0      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			utoa(emg_period_ms, (char*)temporary_buffer, 10);
    1ca8:	4c2a      	ldr	r4, [pc, #168]	; (1d54 <i2c_process_cmd_chr+0x128>)
    1caa:	3410      	adds	r4, #16
    1cac:	4d21      	ldr	r5, [pc, #132]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1cae:	89a8      	ldrh	r0, [r5, #12]
    1cb0:	220a      	movs	r2, #10
    1cb2:	0021      	movs	r1, r4
    1cb4:	4b28      	ldr	r3, [pc, #160]	; (1d58 <i2c_process_cmd_chr+0x12c>)
    1cb6:	4798      	blx	r3
			tx_buffer = (uint8_t *)temporary_buffer;
    1cb8:	4b21      	ldr	r3, [pc, #132]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1cba:	601c      	str	r4, [r3, #0]
			tx_buffer_len = 4;
    1cbc:	2304      	movs	r3, #4
    1cbe:	74eb      	strb	r3, [r5, #19]
			break;
    1cc0:	e7c3      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			utoa(imp_period_ms, (char*)temporary_buffer, 10);
    1cc2:	4c24      	ldr	r4, [pc, #144]	; (1d54 <i2c_process_cmd_chr+0x128>)
    1cc4:	3410      	adds	r4, #16
    1cc6:	4d1b      	ldr	r5, [pc, #108]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1cc8:	89e8      	ldrh	r0, [r5, #14]
    1cca:	220a      	movs	r2, #10
    1ccc:	0021      	movs	r1, r4
    1cce:	4b22      	ldr	r3, [pc, #136]	; (1d58 <i2c_process_cmd_chr+0x12c>)
    1cd0:	4798      	blx	r3
			tx_buffer = (uint8_t *)temporary_buffer;
    1cd2:	4b1b      	ldr	r3, [pc, #108]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1cd4:	601c      	str	r4, [r3, #0]
			tx_buffer_len = 4;
    1cd6:	2304      	movs	r3, #4
    1cd8:	74eb      	strb	r3, [r5, #19]
			break;
    1cda:	e7b6      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			utoa(temp_period_ms, (char*)temporary_buffer, 10);
    1cdc:	4c1d      	ldr	r4, [pc, #116]	; (1d54 <i2c_process_cmd_chr+0x128>)
    1cde:	3410      	adds	r4, #16
    1ce0:	4d14      	ldr	r5, [pc, #80]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1ce2:	8a28      	ldrh	r0, [r5, #16]
    1ce4:	220a      	movs	r2, #10
    1ce6:	0021      	movs	r1, r4
    1ce8:	4b1b      	ldr	r3, [pc, #108]	; (1d58 <i2c_process_cmd_chr+0x12c>)
    1cea:	4798      	blx	r3
			tx_buffer = (uint8_t *)temporary_buffer;
    1cec:	4b14      	ldr	r3, [pc, #80]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1cee:	601c      	str	r4, [r3, #0]
			tx_buffer_len = 4;
    1cf0:	2304      	movs	r3, #4
    1cf2:	74eb      	strb	r3, [r5, #19]
			break;
    1cf4:	e7a9      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			read_rdy[0] = 0;
    1cf6:	4b17      	ldr	r3, [pc, #92]	; (1d54 <i2c_process_cmd_chr+0x128>)
    1cf8:	2200      	movs	r2, #0
    1cfa:	721a      	strb	r2, [r3, #8]
			req_read = true;
    1cfc:	3201      	adds	r2, #1
    1cfe:	715a      	strb	r2, [r3, #5]
			break;
    1d00:	e7a3      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			tx_buffer = (uint8_t *)read_rdy;
    1d02:	4b14      	ldr	r3, [pc, #80]	; (1d54 <i2c_process_cmd_chr+0x128>)
    1d04:	3308      	adds	r3, #8
    1d06:	4a0e      	ldr	r2, [pc, #56]	; (1d40 <i2c_process_cmd_chr+0x114>)
    1d08:	6013      	str	r3, [r2, #0]
			tx_buffer_len = 1;
    1d0a:	2201      	movs	r2, #1
    1d0c:	4b09      	ldr	r3, [pc, #36]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1d0e:	74da      	strb	r2, [r3, #19]
			break;
    1d10:	e79b      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			max30205_enabled = false;
    1d12:	4b10      	ldr	r3, [pc, #64]	; (1d54 <i2c_process_cmd_chr+0x128>)
    1d14:	2200      	movs	r2, #0
    1d16:	705a      	strb	r2, [r3, #1]
			ad5933_enabled = false;
    1d18:	701a      	strb	r2, [r3, #0]
			imp_counter = 1;
    1d1a:	4b06      	ldr	r3, [pc, #24]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1d1c:	3201      	adds	r2, #1
    1d1e:	809a      	strh	r2, [r3, #4]
			temp_counter = 1;		
    1d20:	811a      	strh	r2, [r3, #8]
			break;
    1d22:	e792      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
			max30205_enabled = true;
    1d24:	4a0b      	ldr	r2, [pc, #44]	; (1d54 <i2c_process_cmd_chr+0x128>)
    1d26:	2301      	movs	r3, #1
    1d28:	7053      	strb	r3, [r2, #1]
			ad5933_enabled = true;
    1d2a:	7013      	strb	r3, [r2, #0]
			imp_counter = 1;
    1d2c:	4a01      	ldr	r2, [pc, #4]	; (1d34 <i2c_process_cmd_chr+0x108>)
    1d2e:	8093      	strh	r3, [r2, #4]
			temp_counter = 1;	
    1d30:	8113      	strh	r3, [r2, #8]
    1d32:	e78a      	b.n	1c4a <i2c_process_cmd_chr+0x1e>
    1d34:	20000000 	.word	0x20000000
    1d38:	000039fc 	.word	0x000039fc
    1d3c:	20000084 	.word	0x20000084
    1d40:	20000088 	.word	0x20000088
    1d44:	2000008c 	.word	0x2000008c
    1d48:	2000008e 	.word	0x2000008e
    1d4c:	20000090 	.word	0x20000090
    1d50:	20000092 	.word	0x20000092
    1d54:	20000038 	.word	0x20000038
    1d58:	000038e1 	.word	0x000038e1

00001d5c <SERCOM0_Handler>:
void I2C_SERCOM_IRQ_HANDLER(void) {
    1d5c:	b510      	push	{r4, lr}
	int flags = I2C_SERCOM->I2CS.INTFLAG.reg;
    1d5e:	2384      	movs	r3, #132	; 0x84
    1d60:	05db      	lsls	r3, r3, #23
    1d62:	7e1b      	ldrb	r3, [r3, #24]
    1d64:	b2db      	uxtb	r3, r3
	if (flags & SERCOM_I2CS_INTFLAG_AMATCH)
    1d66:	079a      	lsls	r2, r3, #30
    1d68:	d50e      	bpl.n	1d88 <SERCOM0_Handler+0x2c>
		I2C_SERCOM->I2CS.CTRLB.bit.ACKACT = 0;
    1d6a:	2284      	movs	r2, #132	; 0x84
    1d6c:	05d2      	lsls	r2, r2, #23
    1d6e:	6850      	ldr	r0, [r2, #4]
    1d70:	496e      	ldr	r1, [pc, #440]	; (1f2c <SERCOM0_Handler+0x1d0>)
    1d72:	4001      	ands	r1, r0
    1d74:	6051      	str	r1, [r2, #4]
		I2C_SERCOM->I2CS.CTRLB.bit.CMD = 0x3;
    1d76:	6850      	ldr	r0, [r2, #4]
    1d78:	21c0      	movs	r1, #192	; 0xc0
    1d7a:	0289      	lsls	r1, r1, #10
    1d7c:	4301      	orrs	r1, r0
    1d7e:	6051      	str	r1, [r2, #4]
		I2C_SERCOM->I2CS.INTFLAG.bit.AMATCH = 1; // clear amatch
    1d80:	7e11      	ldrb	r1, [r2, #24]
    1d82:	2002      	movs	r0, #2
    1d84:	4301      	orrs	r1, r0
    1d86:	7611      	strb	r1, [r2, #24]
	if (flags & SERCOM_I2CS_INTFLAG_DRDY)
    1d88:	075a      	lsls	r2, r3, #29
    1d8a:	d520      	bpl.n	1dce <SERCOM0_Handler+0x72>
		if (I2C_SERCOM->I2CS.STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
    1d8c:	2284      	movs	r2, #132	; 0x84
    1d8e:	05d2      	lsls	r2, r2, #23
    1d90:	8b52      	ldrh	r2, [r2, #26]
    1d92:	0712      	lsls	r2, r2, #28
    1d94:	d559      	bpl.n	1e4a <SERCOM0_Handler+0xee>
			if (i2c_idx == tx_buffer_len-1)	{
    1d96:	4a66      	ldr	r2, [pc, #408]	; (1f30 <SERCOM0_Handler+0x1d4>)
    1d98:	7e12      	ldrb	r2, [r2, #24]
    1d9a:	4966      	ldr	r1, [pc, #408]	; (1f34 <SERCOM0_Handler+0x1d8>)
    1d9c:	7cc9      	ldrb	r1, [r1, #19]
    1d9e:	3901      	subs	r1, #1
    1da0:	428a      	cmp	r2, r1
    1da2:	d040      	beq.n	1e26 <SERCOM0_Handler+0xca>
				I2C_SERCOM->I2CS.DATA.reg = tx_buffer[i2c_idx++];
    1da4:	4964      	ldr	r1, [pc, #400]	; (1f38 <SERCOM0_Handler+0x1dc>)
    1da6:	6809      	ldr	r1, [r1, #0]
    1da8:	1c54      	adds	r4, r2, #1
    1daa:	4861      	ldr	r0, [pc, #388]	; (1f30 <SERCOM0_Handler+0x1d4>)
    1dac:	7604      	strb	r4, [r0, #24]
    1dae:	5c88      	ldrb	r0, [r1, r2]
    1db0:	2184      	movs	r1, #132	; 0x84
    1db2:	05c9      	lsls	r1, r1, #23
    1db4:	2228      	movs	r2, #40	; 0x28
    1db6:	5488      	strb	r0, [r1, r2]
				I2C_SERCOM->I2CS.CTRLB.bit.CMD = 0x3;
    1db8:	6848      	ldr	r0, [r1, #4]
    1dba:	22c0      	movs	r2, #192	; 0xc0
    1dbc:	0292      	lsls	r2, r2, #10
    1dbe:	4302      	orrs	r2, r0
    1dc0:	604a      	str	r2, [r1, #4]
		I2C_SERCOM->I2CS.INTFLAG.bit.DRDY = 1;
    1dc2:	2184      	movs	r1, #132	; 0x84
    1dc4:	05c9      	lsls	r1, r1, #23
    1dc6:	7e0a      	ldrb	r2, [r1, #24]
    1dc8:	2004      	movs	r0, #4
    1dca:	4302      	orrs	r2, r0
    1dcc:	760a      	strb	r2, [r1, #24]
	if (flags & SERCOM_I2CS_INTFLAG_PREC)
    1dce:	07db      	lsls	r3, r3, #31
    1dd0:	d400      	bmi.n	1dd4 <SERCOM0_Handler+0x78>
    1dd2:	e0aa      	b.n	1f2a <SERCOM0_Handler+0x1ce>
		I2C_SERCOM->I2CS.INTFLAG.bit.PREC = 1;
    1dd4:	2384      	movs	r3, #132	; 0x84
    1dd6:	05db      	lsls	r3, r3, #23
    1dd8:	7e1a      	ldrb	r2, [r3, #24]
    1dda:	2101      	movs	r1, #1
    1ddc:	430a      	orrs	r2, r1
    1dde:	761a      	strb	r2, [r3, #24]
		if (!I2C_SERCOM->I2CS.STATUS.bit.DIR) {
    1de0:	8b5b      	ldrh	r3, [r3, #26]
    1de2:	071b      	lsls	r3, r3, #28
    1de4:	d500      	bpl.n	1de8 <SERCOM0_Handler+0x8c>
    1de6:	e09a      	b.n	1f1e <SERCOM0_Handler+0x1c2>
			rx_buffer[i2c_idx++] = I2C_SERCOM->I2CS.DATA.reg;
    1de8:	4b51      	ldr	r3, [pc, #324]	; (1f30 <SERCOM0_Handler+0x1d4>)
    1dea:	7e1a      	ldrb	r2, [r3, #24]
    1dec:	1c51      	adds	r1, r2, #1
    1dee:	7619      	strb	r1, [r3, #24]
    1df0:	2128      	movs	r1, #40	; 0x28
    1df2:	2084      	movs	r0, #132	; 0x84
    1df4:	05c0      	lsls	r0, r0, #23
    1df6:	5c41      	ldrb	r1, [r0, r1]
    1df8:	189b      	adds	r3, r3, r2
    1dfa:	7719      	strb	r1, [r3, #28]
			if (cmd_chr == 255) {
    1dfc:	4b4d      	ldr	r3, [pc, #308]	; (1f34 <SERCOM0_Handler+0x1d8>)
    1dfe:	7c9b      	ldrb	r3, [r3, #18]
    1e00:	2bff      	cmp	r3, #255	; 0xff
    1e02:	d047      	beq.n	1e94 <SERCOM0_Handler+0x138>
			uint16_t v = rx_buffer[1] << 8 | rx_buffer[0];
    1e04:	484a      	ldr	r0, [pc, #296]	; (1f30 <SERCOM0_Handler+0x1d4>)
    1e06:	7f41      	ldrb	r1, [r0, #29]
    1e08:	0209      	lsls	r1, r1, #8
    1e0a:	7f02      	ldrb	r2, [r0, #28]
    1e0c:	430a      	orrs	r2, r1
			if (v > 9999) v = 9999;
    1e0e:	494b      	ldr	r1, [pc, #300]	; (1f3c <SERCOM0_Handler+0x1e0>)
    1e10:	428a      	cmp	r2, r1
    1e12:	d900      	bls.n	1e16 <SERCOM0_Handler+0xba>
    1e14:	000a      	movs	r2, r1
				switch (cmd_chr) {
    1e16:	3b07      	subs	r3, #7
    1e18:	b2d9      	uxtb	r1, r3
    1e1a:	2909      	cmp	r1, #9
    1e1c:	d843      	bhi.n	1ea6 <SERCOM0_Handler+0x14a>
    1e1e:	008b      	lsls	r3, r1, #2
    1e20:	4947      	ldr	r1, [pc, #284]	; (1f40 <SERCOM0_Handler+0x1e4>)
    1e22:	58cb      	ldr	r3, [r1, r3]
    1e24:	469f      	mov	pc, r3
				I2C_SERCOM->I2CS.DATA.reg = tx_buffer[i2c_idx++];
    1e26:	4944      	ldr	r1, [pc, #272]	; (1f38 <SERCOM0_Handler+0x1dc>)
    1e28:	6809      	ldr	r1, [r1, #0]
    1e2a:	1c54      	adds	r4, r2, #1
    1e2c:	4840      	ldr	r0, [pc, #256]	; (1f30 <SERCOM0_Handler+0x1d4>)
    1e2e:	7604      	strb	r4, [r0, #24]
    1e30:	5c89      	ldrb	r1, [r1, r2]
    1e32:	2084      	movs	r0, #132	; 0x84
    1e34:	05c0      	lsls	r0, r0, #23
    1e36:	2228      	movs	r2, #40	; 0x28
    1e38:	5481      	strb	r1, [r0, r2]
				I2C_SERCOM->I2CS.CTRLB.bit.CMD = 0x2;
    1e3a:	6841      	ldr	r1, [r0, #4]
    1e3c:	4a41      	ldr	r2, [pc, #260]	; (1f44 <SERCOM0_Handler+0x1e8>)
    1e3e:	4011      	ands	r1, r2
    1e40:	2280      	movs	r2, #128	; 0x80
    1e42:	0292      	lsls	r2, r2, #10
    1e44:	430a      	orrs	r2, r1
    1e46:	6042      	str	r2, [r0, #4]
    1e48:	e7bb      	b.n	1dc2 <SERCOM0_Handler+0x66>
			if (i2c_idx == RX_BUFFER_LEN-1) {
    1e4a:	4a39      	ldr	r2, [pc, #228]	; (1f30 <SERCOM0_Handler+0x1d4>)
    1e4c:	7e10      	ldrb	r0, [r2, #24]
    1e4e:	2801      	cmp	r0, #1
    1e50:	d012      	beq.n	1e78 <SERCOM0_Handler+0x11c>
				rx_buffer[i2c_idx++] = I2C_SERCOM->I2CS.DATA.reg;
    1e52:	4937      	ldr	r1, [pc, #220]	; (1f30 <SERCOM0_Handler+0x1d4>)
    1e54:	1c42      	adds	r2, r0, #1
    1e56:	760a      	strb	r2, [r1, #24]
    1e58:	2284      	movs	r2, #132	; 0x84
    1e5a:	05d2      	lsls	r2, r2, #23
    1e5c:	2428      	movs	r4, #40	; 0x28
    1e5e:	5d14      	ldrb	r4, [r2, r4]
    1e60:	1809      	adds	r1, r1, r0
    1e62:	770c      	strb	r4, [r1, #28]
				I2C_SERCOM->I2CS.CTRLB.bit.ACKACT = 0;
    1e64:	6850      	ldr	r0, [r2, #4]
    1e66:	4931      	ldr	r1, [pc, #196]	; (1f2c <SERCOM0_Handler+0x1d0>)
    1e68:	4001      	ands	r1, r0
    1e6a:	6051      	str	r1, [r2, #4]
				I2C_SERCOM->I2CS.CTRLB.bit.CMD = 0x3;
    1e6c:	6850      	ldr	r0, [r2, #4]
    1e6e:	21c0      	movs	r1, #192	; 0xc0
    1e70:	0289      	lsls	r1, r1, #10
    1e72:	4301      	orrs	r1, r0
    1e74:	6051      	str	r1, [r2, #4]
    1e76:	e7a4      	b.n	1dc2 <SERCOM0_Handler+0x66>
				I2C_SERCOM->I2CS.CTRLB.bit.ACKACT = 0;
    1e78:	2284      	movs	r2, #132	; 0x84
    1e7a:	05d2      	lsls	r2, r2, #23
    1e7c:	6850      	ldr	r0, [r2, #4]
    1e7e:	492b      	ldr	r1, [pc, #172]	; (1f2c <SERCOM0_Handler+0x1d0>)
    1e80:	4001      	ands	r1, r0
    1e82:	6051      	str	r1, [r2, #4]
				I2C_SERCOM->I2CS.CTRLB.bit.CMD = 0x2;
    1e84:	6850      	ldr	r0, [r2, #4]
    1e86:	492f      	ldr	r1, [pc, #188]	; (1f44 <SERCOM0_Handler+0x1e8>)
    1e88:	4008      	ands	r0, r1
    1e8a:	2180      	movs	r1, #128	; 0x80
    1e8c:	0289      	lsls	r1, r1, #10
    1e8e:	4301      	orrs	r1, r0
    1e90:	6051      	str	r1, [r2, #4]
    1e92:	e796      	b.n	1dc2 <SERCOM0_Handler+0x66>
				cmd_chr = rx_buffer[0];
    1e94:	4b26      	ldr	r3, [pc, #152]	; (1f30 <SERCOM0_Handler+0x1d4>)
    1e96:	7f1a      	ldrb	r2, [r3, #28]
    1e98:	4b26      	ldr	r3, [pc, #152]	; (1f34 <SERCOM0_Handler+0x1d8>)
    1e9a:	749a      	strb	r2, [r3, #18]
				i2c_process_cmd_chr();
    1e9c:	4b2a      	ldr	r3, [pc, #168]	; (1f48 <SERCOM0_Handler+0x1ec>)
    1e9e:	4798      	blx	r3
    1ea0:	e040      	b.n	1f24 <SERCOM0_Handler+0x1c8>
						emg_period_ms = v;
    1ea2:	4b24      	ldr	r3, [pc, #144]	; (1f34 <SERCOM0_Handler+0x1d8>)
    1ea4:	819a      	strh	r2, [r3, #12]
				cmd_chr = 255; //reset command so we expect the new one
    1ea6:	22ff      	movs	r2, #255	; 0xff
    1ea8:	4b22      	ldr	r3, [pc, #136]	; (1f34 <SERCOM0_Handler+0x1d8>)
    1eaa:	749a      	strb	r2, [r3, #18]
    1eac:	e03a      	b.n	1f24 <SERCOM0_Handler+0x1c8>
						imp_period_ms = v;
    1eae:	4b21      	ldr	r3, [pc, #132]	; (1f34 <SERCOM0_Handler+0x1d8>)
    1eb0:	81da      	strh	r2, [r3, #14]
						break;
    1eb2:	e7f8      	b.n	1ea6 <SERCOM0_Handler+0x14a>
						temp_period_ms = v;
    1eb4:	4b1f      	ldr	r3, [pc, #124]	; (1f34 <SERCOM0_Handler+0x1d8>)
    1eb6:	821a      	strh	r2, [r3, #16]
						break;
    1eb8:	e7f5      	b.n	1ea6 <SERCOM0_Handler+0x14a>
						if (v==1) {
    1eba:	2a01      	cmp	r2, #1
    1ebc:	d009      	beq.n	1ed2 <SERCOM0_Handler+0x176>
						} else if (v==2) {
    1ebe:	2a02      	cmp	r2, #2
    1ec0:	d00b      	beq.n	1eda <SERCOM0_Handler+0x17e>
						} else if (v==3) {
    1ec2:	2a03      	cmp	r2, #3
    1ec4:	d00d      	beq.n	1ee2 <SERCOM0_Handler+0x186>
						} else if (v==4) {
    1ec6:	2a04      	cmp	r2, #4
    1ec8:	d1ed      	bne.n	1ea6 <SERCOM0_Handler+0x14a>
							AD_set_range(CTRL_OUTPUT_RANGE_4);
    1eca:	2002      	movs	r0, #2
    1ecc:	4b1f      	ldr	r3, [pc, #124]	; (1f4c <SERCOM0_Handler+0x1f0>)
    1ece:	4798      	blx	r3
    1ed0:	e7e9      	b.n	1ea6 <SERCOM0_Handler+0x14a>
							AD_set_range(CTRL_OUTPUT_RANGE_1);
    1ed2:	2000      	movs	r0, #0
    1ed4:	4b1d      	ldr	r3, [pc, #116]	; (1f4c <SERCOM0_Handler+0x1f0>)
    1ed6:	4798      	blx	r3
    1ed8:	e7e5      	b.n	1ea6 <SERCOM0_Handler+0x14a>
							AD_set_range(CTRL_OUTPUT_RANGE_2);
    1eda:	2006      	movs	r0, #6
    1edc:	4b1b      	ldr	r3, [pc, #108]	; (1f4c <SERCOM0_Handler+0x1f0>)
    1ede:	4798      	blx	r3
    1ee0:	e7e1      	b.n	1ea6 <SERCOM0_Handler+0x14a>
							AD_set_range(CTRL_OUTPUT_RANGE_3);
    1ee2:	2004      	movs	r0, #4
    1ee4:	4b19      	ldr	r3, [pc, #100]	; (1f4c <SERCOM0_Handler+0x1f0>)
    1ee6:	4798      	blx	r3
    1ee8:	e7dd      	b.n	1ea6 <SERCOM0_Handler+0x14a>
						if (v==1) {
    1eea:	2a01      	cmp	r2, #1
    1eec:	d005      	beq.n	1efa <SERCOM0_Handler+0x19e>
						} else if (v==5) {
    1eee:	2a05      	cmp	r2, #5
    1ef0:	d1d9      	bne.n	1ea6 <SERCOM0_Handler+0x14a>
							AD_set_PGA_gain(CTRL_PGA_GAIN_X5);
    1ef2:	2000      	movs	r0, #0
    1ef4:	4b16      	ldr	r3, [pc, #88]	; (1f50 <SERCOM0_Handler+0x1f4>)
    1ef6:	4798      	blx	r3
    1ef8:	e7d5      	b.n	1ea6 <SERCOM0_Handler+0x14a>
							AD_set_PGA_gain(CTRL_PGA_GAIN_X1);
    1efa:	2001      	movs	r0, #1
    1efc:	4b14      	ldr	r3, [pc, #80]	; (1f50 <SERCOM0_Handler+0x1f4>)
    1efe:	4798      	blx	r3
    1f00:	e7d1      	b.n	1ea6 <SERCOM0_Handler+0x14a>
						if (v==0) {
    1f02:	2a00      	cmp	r2, #0
    1f04:	d105      	bne.n	1f12 <SERCOM0_Handler+0x1b6>
    1f06:	2280      	movs	r2, #128	; 0x80
    1f08:	0452      	lsls	r2, r2, #17
    1f0a:	23c0      	movs	r3, #192	; 0xc0
    1f0c:	05db      	lsls	r3, r3, #23
    1f0e:	615a      	str	r2, [r3, #20]
    1f10:	e7c9      	b.n	1ea6 <SERCOM0_Handler+0x14a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f12:	2280      	movs	r2, #128	; 0x80
    1f14:	0452      	lsls	r2, r2, #17
    1f16:	23c0      	movs	r3, #192	; 0xc0
    1f18:	05db      	lsls	r3, r3, #23
    1f1a:	619a      	str	r2, [r3, #24]
    1f1c:	e7c3      	b.n	1ea6 <SERCOM0_Handler+0x14a>
			cmd_chr = 255;
    1f1e:	22ff      	movs	r2, #255	; 0xff
    1f20:	4b04      	ldr	r3, [pc, #16]	; (1f34 <SERCOM0_Handler+0x1d8>)
    1f22:	749a      	strb	r2, [r3, #18]
		i2c_idx = 0;
    1f24:	2200      	movs	r2, #0
    1f26:	4b02      	ldr	r3, [pc, #8]	; (1f30 <SERCOM0_Handler+0x1d4>)
    1f28:	761a      	strb	r2, [r3, #24]
}
    1f2a:	bd10      	pop	{r4, pc}
    1f2c:	fffbffff 	.word	0xfffbffff
    1f30:	20000038 	.word	0x20000038
    1f34:	20000000 	.word	0x20000000
    1f38:	20000088 	.word	0x20000088
    1f3c:	0000270f 	.word	0x0000270f
    1f40:	00003a34 	.word	0x00003a34
    1f44:	fffcffff 	.word	0xfffcffff
    1f48:	00001c2d 	.word	0x00001c2d
    1f4c:	0000047d 	.word	0x0000047d
    1f50:	00000429 	.word	0x00000429

00001f54 <MAX_scan>:
#include "MAX30205.h"

uint8_t MAX_scan(void) {
    1f54:	b510      	push	{r4, lr}
    1f56:	b082      	sub	sp, #8
	i2c_m_sync_set_slaveaddr(&I2C_MST, MAX30205_ADDR, I2C_M_SEVEN);
    1f58:	4c0e      	ldr	r4, [pc, #56]	; (1f94 <MAX_scan+0x40>)
    1f5a:	2280      	movs	r2, #128	; 0x80
    1f5c:	0112      	lsls	r2, r2, #4
    1f5e:	2148      	movs	r1, #72	; 0x48
    1f60:	0020      	movs	r0, r4
    1f62:	4b0d      	ldr	r3, [pc, #52]	; (1f98 <MAX_scan+0x44>)
    1f64:	4798      	blx	r3
	uint8_t reg_buf[2];
	uint8_t ret = i2c_m_sync_cmd_read(&I2C_MST, MAX30205_HYST, reg_buf, MAX30205_REG_LEN);
    1f66:	2302      	movs	r3, #2
    1f68:	aa01      	add	r2, sp, #4
    1f6a:	2102      	movs	r1, #2
    1f6c:	0020      	movs	r0, r4
    1f6e:	4c0b      	ldr	r4, [pc, #44]	; (1f9c <MAX_scan+0x48>)
    1f70:	47a0      	blx	r4
    1f72:	b2c0      	uxtb	r0, r0
	if (ret==0) {
    1f74:	2800      	cmp	r0, #0
    1f76:	d10a      	bne.n	1f8e <MAX_scan+0x3a>
		if((reg_buf[0] << 8 | reg_buf[1])==0x4B00) {
    1f78:	aa01      	add	r2, sp, #4
    1f7a:	7813      	ldrb	r3, [r2, #0]
    1f7c:	021b      	lsls	r3, r3, #8
    1f7e:	7852      	ldrb	r2, [r2, #1]
    1f80:	4313      	orrs	r3, r2
    1f82:	2296      	movs	r2, #150	; 0x96
    1f84:	01d2      	lsls	r2, r2, #7
    1f86:	4293      	cmp	r3, r2
    1f88:	d002      	beq.n	1f90 <MAX_scan+0x3c>
			return 0;
		}
	}
	return 1;
    1f8a:	3001      	adds	r0, #1
    1f8c:	e000      	b.n	1f90 <MAX_scan+0x3c>
    1f8e:	2001      	movs	r0, #1
}
    1f90:	b002      	add	sp, #8
    1f92:	bd10      	pop	{r4, pc}
    1f94:	20000064 	.word	0x20000064
    1f98:	00000ad9 	.word	0x00000ad9
    1f9c:	00000b35 	.word	0x00000b35

00001fa0 <MAX_begin>:

uint8_t MAX_begin(void) {
    1fa0:	b530      	push	{r4, r5, lr}
    1fa2:	b083      	sub	sp, #12
	uint8_t reg_buf[2] = {0x0, 0x0};
    1fa4:	ac01      	add	r4, sp, #4
    1fa6:	2300      	movs	r3, #0
    1fa8:	7023      	strb	r3, [r4, #0]
    1faa:	7063      	strb	r3, [r4, #1]
	i2c_m_sync_set_slaveaddr(&I2C_MST, MAX30205_ADDR, I2C_M_SEVEN);
    1fac:	4d07      	ldr	r5, [pc, #28]	; (1fcc <MAX_begin+0x2c>)
    1fae:	2280      	movs	r2, #128	; 0x80
    1fb0:	0112      	lsls	r2, r2, #4
    1fb2:	2148      	movs	r1, #72	; 0x48
    1fb4:	0028      	movs	r0, r5
    1fb6:	4b06      	ldr	r3, [pc, #24]	; (1fd0 <MAX_begin+0x30>)
    1fb8:	4798      	blx	r3
	return i2c_m_sync_cmd_write(&I2C_MST, MAX30205_CONF, reg_buf, MAX30205_REG_LEN);
    1fba:	2302      	movs	r3, #2
    1fbc:	0022      	movs	r2, r4
    1fbe:	2101      	movs	r1, #1
    1fc0:	0028      	movs	r0, r5
    1fc2:	4c04      	ldr	r4, [pc, #16]	; (1fd4 <MAX_begin+0x34>)
    1fc4:	47a0      	blx	r4
    1fc6:	b2c0      	uxtb	r0, r0
}
    1fc8:	b003      	add	sp, #12
    1fca:	bd30      	pop	{r4, r5, pc}
    1fcc:	20000064 	.word	0x20000064
    1fd0:	00000ad9 	.word	0x00000ad9
    1fd4:	00000aed 	.word	0x00000aed

00001fd8 <__udivsi3>:
    1fd8:	2200      	movs	r2, #0
    1fda:	0843      	lsrs	r3, r0, #1
    1fdc:	428b      	cmp	r3, r1
    1fde:	d374      	bcc.n	20ca <STACK_SIZE+0xca>
    1fe0:	0903      	lsrs	r3, r0, #4
    1fe2:	428b      	cmp	r3, r1
    1fe4:	d35f      	bcc.n	20a6 <STACK_SIZE+0xa6>
    1fe6:	0a03      	lsrs	r3, r0, #8
    1fe8:	428b      	cmp	r3, r1
    1fea:	d344      	bcc.n	2076 <STACK_SIZE+0x76>
    1fec:	0b03      	lsrs	r3, r0, #12
    1fee:	428b      	cmp	r3, r1
    1ff0:	d328      	bcc.n	2044 <STACK_SIZE+0x44>
    1ff2:	0c03      	lsrs	r3, r0, #16
    1ff4:	428b      	cmp	r3, r1
    1ff6:	d30d      	bcc.n	2014 <STACK_SIZE+0x14>
    1ff8:	22ff      	movs	r2, #255	; 0xff
    1ffa:	0209      	lsls	r1, r1, #8
    1ffc:	ba12      	rev	r2, r2
    1ffe:	0c03      	lsrs	r3, r0, #16
    2000:	428b      	cmp	r3, r1
    2002:	d302      	bcc.n	200a <STACK_SIZE+0xa>
    2004:	1212      	asrs	r2, r2, #8
    2006:	0209      	lsls	r1, r1, #8
    2008:	d065      	beq.n	20d6 <STACK_SIZE+0xd6>
    200a:	0b03      	lsrs	r3, r0, #12
    200c:	428b      	cmp	r3, r1
    200e:	d319      	bcc.n	2044 <STACK_SIZE+0x44>
    2010:	e000      	b.n	2014 <STACK_SIZE+0x14>
    2012:	0a09      	lsrs	r1, r1, #8
    2014:	0bc3      	lsrs	r3, r0, #15
    2016:	428b      	cmp	r3, r1
    2018:	d301      	bcc.n	201e <STACK_SIZE+0x1e>
    201a:	03cb      	lsls	r3, r1, #15
    201c:	1ac0      	subs	r0, r0, r3
    201e:	4152      	adcs	r2, r2
    2020:	0b83      	lsrs	r3, r0, #14
    2022:	428b      	cmp	r3, r1
    2024:	d301      	bcc.n	202a <STACK_SIZE+0x2a>
    2026:	038b      	lsls	r3, r1, #14
    2028:	1ac0      	subs	r0, r0, r3
    202a:	4152      	adcs	r2, r2
    202c:	0b43      	lsrs	r3, r0, #13
    202e:	428b      	cmp	r3, r1
    2030:	d301      	bcc.n	2036 <STACK_SIZE+0x36>
    2032:	034b      	lsls	r3, r1, #13
    2034:	1ac0      	subs	r0, r0, r3
    2036:	4152      	adcs	r2, r2
    2038:	0b03      	lsrs	r3, r0, #12
    203a:	428b      	cmp	r3, r1
    203c:	d301      	bcc.n	2042 <STACK_SIZE+0x42>
    203e:	030b      	lsls	r3, r1, #12
    2040:	1ac0      	subs	r0, r0, r3
    2042:	4152      	adcs	r2, r2
    2044:	0ac3      	lsrs	r3, r0, #11
    2046:	428b      	cmp	r3, r1
    2048:	d301      	bcc.n	204e <STACK_SIZE+0x4e>
    204a:	02cb      	lsls	r3, r1, #11
    204c:	1ac0      	subs	r0, r0, r3
    204e:	4152      	adcs	r2, r2
    2050:	0a83      	lsrs	r3, r0, #10
    2052:	428b      	cmp	r3, r1
    2054:	d301      	bcc.n	205a <STACK_SIZE+0x5a>
    2056:	028b      	lsls	r3, r1, #10
    2058:	1ac0      	subs	r0, r0, r3
    205a:	4152      	adcs	r2, r2
    205c:	0a43      	lsrs	r3, r0, #9
    205e:	428b      	cmp	r3, r1
    2060:	d301      	bcc.n	2066 <STACK_SIZE+0x66>
    2062:	024b      	lsls	r3, r1, #9
    2064:	1ac0      	subs	r0, r0, r3
    2066:	4152      	adcs	r2, r2
    2068:	0a03      	lsrs	r3, r0, #8
    206a:	428b      	cmp	r3, r1
    206c:	d301      	bcc.n	2072 <STACK_SIZE+0x72>
    206e:	020b      	lsls	r3, r1, #8
    2070:	1ac0      	subs	r0, r0, r3
    2072:	4152      	adcs	r2, r2
    2074:	d2cd      	bcs.n	2012 <STACK_SIZE+0x12>
    2076:	09c3      	lsrs	r3, r0, #7
    2078:	428b      	cmp	r3, r1
    207a:	d301      	bcc.n	2080 <STACK_SIZE+0x80>
    207c:	01cb      	lsls	r3, r1, #7
    207e:	1ac0      	subs	r0, r0, r3
    2080:	4152      	adcs	r2, r2
    2082:	0983      	lsrs	r3, r0, #6
    2084:	428b      	cmp	r3, r1
    2086:	d301      	bcc.n	208c <STACK_SIZE+0x8c>
    2088:	018b      	lsls	r3, r1, #6
    208a:	1ac0      	subs	r0, r0, r3
    208c:	4152      	adcs	r2, r2
    208e:	0943      	lsrs	r3, r0, #5
    2090:	428b      	cmp	r3, r1
    2092:	d301      	bcc.n	2098 <STACK_SIZE+0x98>
    2094:	014b      	lsls	r3, r1, #5
    2096:	1ac0      	subs	r0, r0, r3
    2098:	4152      	adcs	r2, r2
    209a:	0903      	lsrs	r3, r0, #4
    209c:	428b      	cmp	r3, r1
    209e:	d301      	bcc.n	20a4 <STACK_SIZE+0xa4>
    20a0:	010b      	lsls	r3, r1, #4
    20a2:	1ac0      	subs	r0, r0, r3
    20a4:	4152      	adcs	r2, r2
    20a6:	08c3      	lsrs	r3, r0, #3
    20a8:	428b      	cmp	r3, r1
    20aa:	d301      	bcc.n	20b0 <STACK_SIZE+0xb0>
    20ac:	00cb      	lsls	r3, r1, #3
    20ae:	1ac0      	subs	r0, r0, r3
    20b0:	4152      	adcs	r2, r2
    20b2:	0883      	lsrs	r3, r0, #2
    20b4:	428b      	cmp	r3, r1
    20b6:	d301      	bcc.n	20bc <STACK_SIZE+0xbc>
    20b8:	008b      	lsls	r3, r1, #2
    20ba:	1ac0      	subs	r0, r0, r3
    20bc:	4152      	adcs	r2, r2
    20be:	0843      	lsrs	r3, r0, #1
    20c0:	428b      	cmp	r3, r1
    20c2:	d301      	bcc.n	20c8 <STACK_SIZE+0xc8>
    20c4:	004b      	lsls	r3, r1, #1
    20c6:	1ac0      	subs	r0, r0, r3
    20c8:	4152      	adcs	r2, r2
    20ca:	1a41      	subs	r1, r0, r1
    20cc:	d200      	bcs.n	20d0 <STACK_SIZE+0xd0>
    20ce:	4601      	mov	r1, r0
    20d0:	4152      	adcs	r2, r2
    20d2:	4610      	mov	r0, r2
    20d4:	4770      	bx	lr
    20d6:	e7ff      	b.n	20d8 <STACK_SIZE+0xd8>
    20d8:	b501      	push	{r0, lr}
    20da:	2000      	movs	r0, #0
    20dc:	f000 f8f0 	bl	22c0 <__aeabi_idiv0>
    20e0:	bd02      	pop	{r1, pc}
    20e2:	46c0      	nop			; (mov r8, r8)

000020e4 <__aeabi_uidivmod>:
    20e4:	2900      	cmp	r1, #0
    20e6:	d0f7      	beq.n	20d8 <STACK_SIZE+0xd8>
    20e8:	e776      	b.n	1fd8 <__udivsi3>
    20ea:	4770      	bx	lr

000020ec <__divsi3>:
    20ec:	4603      	mov	r3, r0
    20ee:	430b      	orrs	r3, r1
    20f0:	d47f      	bmi.n	21f2 <__divsi3+0x106>
    20f2:	2200      	movs	r2, #0
    20f4:	0843      	lsrs	r3, r0, #1
    20f6:	428b      	cmp	r3, r1
    20f8:	d374      	bcc.n	21e4 <__divsi3+0xf8>
    20fa:	0903      	lsrs	r3, r0, #4
    20fc:	428b      	cmp	r3, r1
    20fe:	d35f      	bcc.n	21c0 <__divsi3+0xd4>
    2100:	0a03      	lsrs	r3, r0, #8
    2102:	428b      	cmp	r3, r1
    2104:	d344      	bcc.n	2190 <__divsi3+0xa4>
    2106:	0b03      	lsrs	r3, r0, #12
    2108:	428b      	cmp	r3, r1
    210a:	d328      	bcc.n	215e <__divsi3+0x72>
    210c:	0c03      	lsrs	r3, r0, #16
    210e:	428b      	cmp	r3, r1
    2110:	d30d      	bcc.n	212e <__divsi3+0x42>
    2112:	22ff      	movs	r2, #255	; 0xff
    2114:	0209      	lsls	r1, r1, #8
    2116:	ba12      	rev	r2, r2
    2118:	0c03      	lsrs	r3, r0, #16
    211a:	428b      	cmp	r3, r1
    211c:	d302      	bcc.n	2124 <__divsi3+0x38>
    211e:	1212      	asrs	r2, r2, #8
    2120:	0209      	lsls	r1, r1, #8
    2122:	d065      	beq.n	21f0 <__divsi3+0x104>
    2124:	0b03      	lsrs	r3, r0, #12
    2126:	428b      	cmp	r3, r1
    2128:	d319      	bcc.n	215e <__divsi3+0x72>
    212a:	e000      	b.n	212e <__divsi3+0x42>
    212c:	0a09      	lsrs	r1, r1, #8
    212e:	0bc3      	lsrs	r3, r0, #15
    2130:	428b      	cmp	r3, r1
    2132:	d301      	bcc.n	2138 <__divsi3+0x4c>
    2134:	03cb      	lsls	r3, r1, #15
    2136:	1ac0      	subs	r0, r0, r3
    2138:	4152      	adcs	r2, r2
    213a:	0b83      	lsrs	r3, r0, #14
    213c:	428b      	cmp	r3, r1
    213e:	d301      	bcc.n	2144 <__divsi3+0x58>
    2140:	038b      	lsls	r3, r1, #14
    2142:	1ac0      	subs	r0, r0, r3
    2144:	4152      	adcs	r2, r2
    2146:	0b43      	lsrs	r3, r0, #13
    2148:	428b      	cmp	r3, r1
    214a:	d301      	bcc.n	2150 <__divsi3+0x64>
    214c:	034b      	lsls	r3, r1, #13
    214e:	1ac0      	subs	r0, r0, r3
    2150:	4152      	adcs	r2, r2
    2152:	0b03      	lsrs	r3, r0, #12
    2154:	428b      	cmp	r3, r1
    2156:	d301      	bcc.n	215c <__divsi3+0x70>
    2158:	030b      	lsls	r3, r1, #12
    215a:	1ac0      	subs	r0, r0, r3
    215c:	4152      	adcs	r2, r2
    215e:	0ac3      	lsrs	r3, r0, #11
    2160:	428b      	cmp	r3, r1
    2162:	d301      	bcc.n	2168 <__divsi3+0x7c>
    2164:	02cb      	lsls	r3, r1, #11
    2166:	1ac0      	subs	r0, r0, r3
    2168:	4152      	adcs	r2, r2
    216a:	0a83      	lsrs	r3, r0, #10
    216c:	428b      	cmp	r3, r1
    216e:	d301      	bcc.n	2174 <__divsi3+0x88>
    2170:	028b      	lsls	r3, r1, #10
    2172:	1ac0      	subs	r0, r0, r3
    2174:	4152      	adcs	r2, r2
    2176:	0a43      	lsrs	r3, r0, #9
    2178:	428b      	cmp	r3, r1
    217a:	d301      	bcc.n	2180 <__divsi3+0x94>
    217c:	024b      	lsls	r3, r1, #9
    217e:	1ac0      	subs	r0, r0, r3
    2180:	4152      	adcs	r2, r2
    2182:	0a03      	lsrs	r3, r0, #8
    2184:	428b      	cmp	r3, r1
    2186:	d301      	bcc.n	218c <__divsi3+0xa0>
    2188:	020b      	lsls	r3, r1, #8
    218a:	1ac0      	subs	r0, r0, r3
    218c:	4152      	adcs	r2, r2
    218e:	d2cd      	bcs.n	212c <__divsi3+0x40>
    2190:	09c3      	lsrs	r3, r0, #7
    2192:	428b      	cmp	r3, r1
    2194:	d301      	bcc.n	219a <__divsi3+0xae>
    2196:	01cb      	lsls	r3, r1, #7
    2198:	1ac0      	subs	r0, r0, r3
    219a:	4152      	adcs	r2, r2
    219c:	0983      	lsrs	r3, r0, #6
    219e:	428b      	cmp	r3, r1
    21a0:	d301      	bcc.n	21a6 <__divsi3+0xba>
    21a2:	018b      	lsls	r3, r1, #6
    21a4:	1ac0      	subs	r0, r0, r3
    21a6:	4152      	adcs	r2, r2
    21a8:	0943      	lsrs	r3, r0, #5
    21aa:	428b      	cmp	r3, r1
    21ac:	d301      	bcc.n	21b2 <__divsi3+0xc6>
    21ae:	014b      	lsls	r3, r1, #5
    21b0:	1ac0      	subs	r0, r0, r3
    21b2:	4152      	adcs	r2, r2
    21b4:	0903      	lsrs	r3, r0, #4
    21b6:	428b      	cmp	r3, r1
    21b8:	d301      	bcc.n	21be <__divsi3+0xd2>
    21ba:	010b      	lsls	r3, r1, #4
    21bc:	1ac0      	subs	r0, r0, r3
    21be:	4152      	adcs	r2, r2
    21c0:	08c3      	lsrs	r3, r0, #3
    21c2:	428b      	cmp	r3, r1
    21c4:	d301      	bcc.n	21ca <__divsi3+0xde>
    21c6:	00cb      	lsls	r3, r1, #3
    21c8:	1ac0      	subs	r0, r0, r3
    21ca:	4152      	adcs	r2, r2
    21cc:	0883      	lsrs	r3, r0, #2
    21ce:	428b      	cmp	r3, r1
    21d0:	d301      	bcc.n	21d6 <__divsi3+0xea>
    21d2:	008b      	lsls	r3, r1, #2
    21d4:	1ac0      	subs	r0, r0, r3
    21d6:	4152      	adcs	r2, r2
    21d8:	0843      	lsrs	r3, r0, #1
    21da:	428b      	cmp	r3, r1
    21dc:	d301      	bcc.n	21e2 <__divsi3+0xf6>
    21de:	004b      	lsls	r3, r1, #1
    21e0:	1ac0      	subs	r0, r0, r3
    21e2:	4152      	adcs	r2, r2
    21e4:	1a41      	subs	r1, r0, r1
    21e6:	d200      	bcs.n	21ea <__divsi3+0xfe>
    21e8:	4601      	mov	r1, r0
    21ea:	4152      	adcs	r2, r2
    21ec:	4610      	mov	r0, r2
    21ee:	4770      	bx	lr
    21f0:	e05d      	b.n	22ae <__divsi3+0x1c2>
    21f2:	0fca      	lsrs	r2, r1, #31
    21f4:	d000      	beq.n	21f8 <__divsi3+0x10c>
    21f6:	4249      	negs	r1, r1
    21f8:	1003      	asrs	r3, r0, #32
    21fa:	d300      	bcc.n	21fe <__divsi3+0x112>
    21fc:	4240      	negs	r0, r0
    21fe:	4053      	eors	r3, r2
    2200:	2200      	movs	r2, #0
    2202:	469c      	mov	ip, r3
    2204:	0903      	lsrs	r3, r0, #4
    2206:	428b      	cmp	r3, r1
    2208:	d32d      	bcc.n	2266 <__divsi3+0x17a>
    220a:	0a03      	lsrs	r3, r0, #8
    220c:	428b      	cmp	r3, r1
    220e:	d312      	bcc.n	2236 <__divsi3+0x14a>
    2210:	22fc      	movs	r2, #252	; 0xfc
    2212:	0189      	lsls	r1, r1, #6
    2214:	ba12      	rev	r2, r2
    2216:	0a03      	lsrs	r3, r0, #8
    2218:	428b      	cmp	r3, r1
    221a:	d30c      	bcc.n	2236 <__divsi3+0x14a>
    221c:	0189      	lsls	r1, r1, #6
    221e:	1192      	asrs	r2, r2, #6
    2220:	428b      	cmp	r3, r1
    2222:	d308      	bcc.n	2236 <__divsi3+0x14a>
    2224:	0189      	lsls	r1, r1, #6
    2226:	1192      	asrs	r2, r2, #6
    2228:	428b      	cmp	r3, r1
    222a:	d304      	bcc.n	2236 <__divsi3+0x14a>
    222c:	0189      	lsls	r1, r1, #6
    222e:	d03a      	beq.n	22a6 <__divsi3+0x1ba>
    2230:	1192      	asrs	r2, r2, #6
    2232:	e000      	b.n	2236 <__divsi3+0x14a>
    2234:	0989      	lsrs	r1, r1, #6
    2236:	09c3      	lsrs	r3, r0, #7
    2238:	428b      	cmp	r3, r1
    223a:	d301      	bcc.n	2240 <__divsi3+0x154>
    223c:	01cb      	lsls	r3, r1, #7
    223e:	1ac0      	subs	r0, r0, r3
    2240:	4152      	adcs	r2, r2
    2242:	0983      	lsrs	r3, r0, #6
    2244:	428b      	cmp	r3, r1
    2246:	d301      	bcc.n	224c <__divsi3+0x160>
    2248:	018b      	lsls	r3, r1, #6
    224a:	1ac0      	subs	r0, r0, r3
    224c:	4152      	adcs	r2, r2
    224e:	0943      	lsrs	r3, r0, #5
    2250:	428b      	cmp	r3, r1
    2252:	d301      	bcc.n	2258 <__divsi3+0x16c>
    2254:	014b      	lsls	r3, r1, #5
    2256:	1ac0      	subs	r0, r0, r3
    2258:	4152      	adcs	r2, r2
    225a:	0903      	lsrs	r3, r0, #4
    225c:	428b      	cmp	r3, r1
    225e:	d301      	bcc.n	2264 <__divsi3+0x178>
    2260:	010b      	lsls	r3, r1, #4
    2262:	1ac0      	subs	r0, r0, r3
    2264:	4152      	adcs	r2, r2
    2266:	08c3      	lsrs	r3, r0, #3
    2268:	428b      	cmp	r3, r1
    226a:	d301      	bcc.n	2270 <__divsi3+0x184>
    226c:	00cb      	lsls	r3, r1, #3
    226e:	1ac0      	subs	r0, r0, r3
    2270:	4152      	adcs	r2, r2
    2272:	0883      	lsrs	r3, r0, #2
    2274:	428b      	cmp	r3, r1
    2276:	d301      	bcc.n	227c <__divsi3+0x190>
    2278:	008b      	lsls	r3, r1, #2
    227a:	1ac0      	subs	r0, r0, r3
    227c:	4152      	adcs	r2, r2
    227e:	d2d9      	bcs.n	2234 <__divsi3+0x148>
    2280:	0843      	lsrs	r3, r0, #1
    2282:	428b      	cmp	r3, r1
    2284:	d301      	bcc.n	228a <__divsi3+0x19e>
    2286:	004b      	lsls	r3, r1, #1
    2288:	1ac0      	subs	r0, r0, r3
    228a:	4152      	adcs	r2, r2
    228c:	1a41      	subs	r1, r0, r1
    228e:	d200      	bcs.n	2292 <__divsi3+0x1a6>
    2290:	4601      	mov	r1, r0
    2292:	4663      	mov	r3, ip
    2294:	4152      	adcs	r2, r2
    2296:	105b      	asrs	r3, r3, #1
    2298:	4610      	mov	r0, r2
    229a:	d301      	bcc.n	22a0 <__divsi3+0x1b4>
    229c:	4240      	negs	r0, r0
    229e:	2b00      	cmp	r3, #0
    22a0:	d500      	bpl.n	22a4 <__divsi3+0x1b8>
    22a2:	4249      	negs	r1, r1
    22a4:	4770      	bx	lr
    22a6:	4663      	mov	r3, ip
    22a8:	105b      	asrs	r3, r3, #1
    22aa:	d300      	bcc.n	22ae <__divsi3+0x1c2>
    22ac:	4240      	negs	r0, r0
    22ae:	b501      	push	{r0, lr}
    22b0:	2000      	movs	r0, #0
    22b2:	f000 f805 	bl	22c0 <__aeabi_idiv0>
    22b6:	bd02      	pop	{r1, pc}

000022b8 <__aeabi_idivmod>:
    22b8:	2900      	cmp	r1, #0
    22ba:	d0f8      	beq.n	22ae <__divsi3+0x1c2>
    22bc:	e716      	b.n	20ec <__divsi3>
    22be:	4770      	bx	lr

000022c0 <__aeabi_idiv0>:
    22c0:	4770      	bx	lr
    22c2:	46c0      	nop			; (mov r8, r8)

000022c4 <__aeabi_d2uiz>:
    22c4:	b570      	push	{r4, r5, r6, lr}
    22c6:	2200      	movs	r2, #0
    22c8:	4b0c      	ldr	r3, [pc, #48]	; (22fc <__aeabi_d2uiz+0x38>)
    22ca:	0004      	movs	r4, r0
    22cc:	000d      	movs	r5, r1
    22ce:	f001 f981 	bl	35d4 <__aeabi_dcmpge>
    22d2:	2800      	cmp	r0, #0
    22d4:	d104      	bne.n	22e0 <__aeabi_d2uiz+0x1c>
    22d6:	0020      	movs	r0, r4
    22d8:	0029      	movs	r1, r5
    22da:	f001 f8db 	bl	3494 <__aeabi_d2iz>
    22de:	bd70      	pop	{r4, r5, r6, pc}
    22e0:	4b06      	ldr	r3, [pc, #24]	; (22fc <__aeabi_d2uiz+0x38>)
    22e2:	2200      	movs	r2, #0
    22e4:	0020      	movs	r0, r4
    22e6:	0029      	movs	r1, r5
    22e8:	f000 fdbe 	bl	2e68 <__aeabi_dsub>
    22ec:	f001 f8d2 	bl	3494 <__aeabi_d2iz>
    22f0:	2380      	movs	r3, #128	; 0x80
    22f2:	061b      	lsls	r3, r3, #24
    22f4:	469c      	mov	ip, r3
    22f6:	4460      	add	r0, ip
    22f8:	e7f1      	b.n	22de <__aeabi_d2uiz+0x1a>
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	41e00000 	.word	0x41e00000

00002300 <__aeabi_ddiv>:
    2300:	b5f0      	push	{r4, r5, r6, r7, lr}
    2302:	4657      	mov	r7, sl
    2304:	4645      	mov	r5, r8
    2306:	46de      	mov	lr, fp
    2308:	464e      	mov	r6, r9
    230a:	b5e0      	push	{r5, r6, r7, lr}
    230c:	004c      	lsls	r4, r1, #1
    230e:	030e      	lsls	r6, r1, #12
    2310:	b087      	sub	sp, #28
    2312:	4683      	mov	fp, r0
    2314:	4692      	mov	sl, r2
    2316:	001d      	movs	r5, r3
    2318:	4680      	mov	r8, r0
    231a:	0b36      	lsrs	r6, r6, #12
    231c:	0d64      	lsrs	r4, r4, #21
    231e:	0fcf      	lsrs	r7, r1, #31
    2320:	2c00      	cmp	r4, #0
    2322:	d04f      	beq.n	23c4 <__aeabi_ddiv+0xc4>
    2324:	4b6f      	ldr	r3, [pc, #444]	; (24e4 <__aeabi_ddiv+0x1e4>)
    2326:	429c      	cmp	r4, r3
    2328:	d035      	beq.n	2396 <__aeabi_ddiv+0x96>
    232a:	2380      	movs	r3, #128	; 0x80
    232c:	0f42      	lsrs	r2, r0, #29
    232e:	041b      	lsls	r3, r3, #16
    2330:	00f6      	lsls	r6, r6, #3
    2332:	4313      	orrs	r3, r2
    2334:	4333      	orrs	r3, r6
    2336:	4699      	mov	r9, r3
    2338:	00c3      	lsls	r3, r0, #3
    233a:	4698      	mov	r8, r3
    233c:	4b6a      	ldr	r3, [pc, #424]	; (24e8 <__aeabi_ddiv+0x1e8>)
    233e:	2600      	movs	r6, #0
    2340:	469c      	mov	ip, r3
    2342:	2300      	movs	r3, #0
    2344:	4464      	add	r4, ip
    2346:	9303      	str	r3, [sp, #12]
    2348:	032b      	lsls	r3, r5, #12
    234a:	0b1b      	lsrs	r3, r3, #12
    234c:	469b      	mov	fp, r3
    234e:	006b      	lsls	r3, r5, #1
    2350:	0fed      	lsrs	r5, r5, #31
    2352:	4650      	mov	r0, sl
    2354:	0d5b      	lsrs	r3, r3, #21
    2356:	9501      	str	r5, [sp, #4]
    2358:	d05e      	beq.n	2418 <__aeabi_ddiv+0x118>
    235a:	4a62      	ldr	r2, [pc, #392]	; (24e4 <__aeabi_ddiv+0x1e4>)
    235c:	4293      	cmp	r3, r2
    235e:	d053      	beq.n	2408 <__aeabi_ddiv+0x108>
    2360:	465a      	mov	r2, fp
    2362:	00d1      	lsls	r1, r2, #3
    2364:	2280      	movs	r2, #128	; 0x80
    2366:	0f40      	lsrs	r0, r0, #29
    2368:	0412      	lsls	r2, r2, #16
    236a:	4302      	orrs	r2, r0
    236c:	430a      	orrs	r2, r1
    236e:	4693      	mov	fp, r2
    2370:	4652      	mov	r2, sl
    2372:	00d1      	lsls	r1, r2, #3
    2374:	4a5c      	ldr	r2, [pc, #368]	; (24e8 <__aeabi_ddiv+0x1e8>)
    2376:	4694      	mov	ip, r2
    2378:	2200      	movs	r2, #0
    237a:	4463      	add	r3, ip
    237c:	0038      	movs	r0, r7
    237e:	4068      	eors	r0, r5
    2380:	4684      	mov	ip, r0
    2382:	9002      	str	r0, [sp, #8]
    2384:	1ae4      	subs	r4, r4, r3
    2386:	4316      	orrs	r6, r2
    2388:	2e0f      	cmp	r6, #15
    238a:	d900      	bls.n	238e <__aeabi_ddiv+0x8e>
    238c:	e0b4      	b.n	24f8 <__aeabi_ddiv+0x1f8>
    238e:	4b57      	ldr	r3, [pc, #348]	; (24ec <__aeabi_ddiv+0x1ec>)
    2390:	00b6      	lsls	r6, r6, #2
    2392:	599b      	ldr	r3, [r3, r6]
    2394:	469f      	mov	pc, r3
    2396:	0003      	movs	r3, r0
    2398:	4333      	orrs	r3, r6
    239a:	4699      	mov	r9, r3
    239c:	d16c      	bne.n	2478 <__aeabi_ddiv+0x178>
    239e:	2300      	movs	r3, #0
    23a0:	4698      	mov	r8, r3
    23a2:	3302      	adds	r3, #2
    23a4:	2608      	movs	r6, #8
    23a6:	9303      	str	r3, [sp, #12]
    23a8:	e7ce      	b.n	2348 <__aeabi_ddiv+0x48>
    23aa:	46cb      	mov	fp, r9
    23ac:	4641      	mov	r1, r8
    23ae:	9a03      	ldr	r2, [sp, #12]
    23b0:	9701      	str	r7, [sp, #4]
    23b2:	2a02      	cmp	r2, #2
    23b4:	d165      	bne.n	2482 <__aeabi_ddiv+0x182>
    23b6:	9b01      	ldr	r3, [sp, #4]
    23b8:	4c4a      	ldr	r4, [pc, #296]	; (24e4 <__aeabi_ddiv+0x1e4>)
    23ba:	469c      	mov	ip, r3
    23bc:	2300      	movs	r3, #0
    23be:	2200      	movs	r2, #0
    23c0:	4698      	mov	r8, r3
    23c2:	e06b      	b.n	249c <__aeabi_ddiv+0x19c>
    23c4:	0003      	movs	r3, r0
    23c6:	4333      	orrs	r3, r6
    23c8:	4699      	mov	r9, r3
    23ca:	d04e      	beq.n	246a <__aeabi_ddiv+0x16a>
    23cc:	2e00      	cmp	r6, #0
    23ce:	d100      	bne.n	23d2 <__aeabi_ddiv+0xd2>
    23d0:	e1bc      	b.n	274c <__aeabi_ddiv+0x44c>
    23d2:	0030      	movs	r0, r6
    23d4:	f001 f908 	bl	35e8 <__clzsi2>
    23d8:	0003      	movs	r3, r0
    23da:	3b0b      	subs	r3, #11
    23dc:	2b1c      	cmp	r3, #28
    23de:	dd00      	ble.n	23e2 <__aeabi_ddiv+0xe2>
    23e0:	e1ac      	b.n	273c <__aeabi_ddiv+0x43c>
    23e2:	221d      	movs	r2, #29
    23e4:	1ad3      	subs	r3, r2, r3
    23e6:	465a      	mov	r2, fp
    23e8:	0001      	movs	r1, r0
    23ea:	40da      	lsrs	r2, r3
    23ec:	3908      	subs	r1, #8
    23ee:	408e      	lsls	r6, r1
    23f0:	0013      	movs	r3, r2
    23f2:	4333      	orrs	r3, r6
    23f4:	4699      	mov	r9, r3
    23f6:	465b      	mov	r3, fp
    23f8:	408b      	lsls	r3, r1
    23fa:	4698      	mov	r8, r3
    23fc:	2300      	movs	r3, #0
    23fe:	4c3c      	ldr	r4, [pc, #240]	; (24f0 <__aeabi_ddiv+0x1f0>)
    2400:	2600      	movs	r6, #0
    2402:	1a24      	subs	r4, r4, r0
    2404:	9303      	str	r3, [sp, #12]
    2406:	e79f      	b.n	2348 <__aeabi_ddiv+0x48>
    2408:	4651      	mov	r1, sl
    240a:	465a      	mov	r2, fp
    240c:	4311      	orrs	r1, r2
    240e:	d129      	bne.n	2464 <__aeabi_ddiv+0x164>
    2410:	2200      	movs	r2, #0
    2412:	4693      	mov	fp, r2
    2414:	3202      	adds	r2, #2
    2416:	e7b1      	b.n	237c <__aeabi_ddiv+0x7c>
    2418:	4659      	mov	r1, fp
    241a:	4301      	orrs	r1, r0
    241c:	d01e      	beq.n	245c <__aeabi_ddiv+0x15c>
    241e:	465b      	mov	r3, fp
    2420:	2b00      	cmp	r3, #0
    2422:	d100      	bne.n	2426 <__aeabi_ddiv+0x126>
    2424:	e19e      	b.n	2764 <__aeabi_ddiv+0x464>
    2426:	4658      	mov	r0, fp
    2428:	f001 f8de 	bl	35e8 <__clzsi2>
    242c:	0003      	movs	r3, r0
    242e:	3b0b      	subs	r3, #11
    2430:	2b1c      	cmp	r3, #28
    2432:	dd00      	ble.n	2436 <__aeabi_ddiv+0x136>
    2434:	e18f      	b.n	2756 <__aeabi_ddiv+0x456>
    2436:	0002      	movs	r2, r0
    2438:	4659      	mov	r1, fp
    243a:	3a08      	subs	r2, #8
    243c:	4091      	lsls	r1, r2
    243e:	468b      	mov	fp, r1
    2440:	211d      	movs	r1, #29
    2442:	1acb      	subs	r3, r1, r3
    2444:	4651      	mov	r1, sl
    2446:	40d9      	lsrs	r1, r3
    2448:	000b      	movs	r3, r1
    244a:	4659      	mov	r1, fp
    244c:	430b      	orrs	r3, r1
    244e:	4651      	mov	r1, sl
    2450:	469b      	mov	fp, r3
    2452:	4091      	lsls	r1, r2
    2454:	4b26      	ldr	r3, [pc, #152]	; (24f0 <__aeabi_ddiv+0x1f0>)
    2456:	2200      	movs	r2, #0
    2458:	1a1b      	subs	r3, r3, r0
    245a:	e78f      	b.n	237c <__aeabi_ddiv+0x7c>
    245c:	2300      	movs	r3, #0
    245e:	2201      	movs	r2, #1
    2460:	469b      	mov	fp, r3
    2462:	e78b      	b.n	237c <__aeabi_ddiv+0x7c>
    2464:	4651      	mov	r1, sl
    2466:	2203      	movs	r2, #3
    2468:	e788      	b.n	237c <__aeabi_ddiv+0x7c>
    246a:	2300      	movs	r3, #0
    246c:	4698      	mov	r8, r3
    246e:	3301      	adds	r3, #1
    2470:	2604      	movs	r6, #4
    2472:	2400      	movs	r4, #0
    2474:	9303      	str	r3, [sp, #12]
    2476:	e767      	b.n	2348 <__aeabi_ddiv+0x48>
    2478:	2303      	movs	r3, #3
    247a:	46b1      	mov	r9, r6
    247c:	9303      	str	r3, [sp, #12]
    247e:	260c      	movs	r6, #12
    2480:	e762      	b.n	2348 <__aeabi_ddiv+0x48>
    2482:	2a03      	cmp	r2, #3
    2484:	d100      	bne.n	2488 <__aeabi_ddiv+0x188>
    2486:	e25c      	b.n	2942 <__aeabi_ddiv+0x642>
    2488:	9b01      	ldr	r3, [sp, #4]
    248a:	2a01      	cmp	r2, #1
    248c:	d000      	beq.n	2490 <__aeabi_ddiv+0x190>
    248e:	e1e4      	b.n	285a <__aeabi_ddiv+0x55a>
    2490:	4013      	ands	r3, r2
    2492:	469c      	mov	ip, r3
    2494:	2300      	movs	r3, #0
    2496:	2400      	movs	r4, #0
    2498:	2200      	movs	r2, #0
    249a:	4698      	mov	r8, r3
    249c:	2100      	movs	r1, #0
    249e:	0312      	lsls	r2, r2, #12
    24a0:	0b13      	lsrs	r3, r2, #12
    24a2:	0d0a      	lsrs	r2, r1, #20
    24a4:	0512      	lsls	r2, r2, #20
    24a6:	431a      	orrs	r2, r3
    24a8:	0523      	lsls	r3, r4, #20
    24aa:	4c12      	ldr	r4, [pc, #72]	; (24f4 <__aeabi_ddiv+0x1f4>)
    24ac:	4640      	mov	r0, r8
    24ae:	4022      	ands	r2, r4
    24b0:	4313      	orrs	r3, r2
    24b2:	4662      	mov	r2, ip
    24b4:	005b      	lsls	r3, r3, #1
    24b6:	07d2      	lsls	r2, r2, #31
    24b8:	085b      	lsrs	r3, r3, #1
    24ba:	4313      	orrs	r3, r2
    24bc:	0019      	movs	r1, r3
    24be:	b007      	add	sp, #28
    24c0:	bc3c      	pop	{r2, r3, r4, r5}
    24c2:	4690      	mov	r8, r2
    24c4:	4699      	mov	r9, r3
    24c6:	46a2      	mov	sl, r4
    24c8:	46ab      	mov	fp, r5
    24ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24cc:	2300      	movs	r3, #0
    24ce:	2280      	movs	r2, #128	; 0x80
    24d0:	469c      	mov	ip, r3
    24d2:	0312      	lsls	r2, r2, #12
    24d4:	4698      	mov	r8, r3
    24d6:	4c03      	ldr	r4, [pc, #12]	; (24e4 <__aeabi_ddiv+0x1e4>)
    24d8:	e7e0      	b.n	249c <__aeabi_ddiv+0x19c>
    24da:	2300      	movs	r3, #0
    24dc:	4c01      	ldr	r4, [pc, #4]	; (24e4 <__aeabi_ddiv+0x1e4>)
    24de:	2200      	movs	r2, #0
    24e0:	4698      	mov	r8, r3
    24e2:	e7db      	b.n	249c <__aeabi_ddiv+0x19c>
    24e4:	000007ff 	.word	0x000007ff
    24e8:	fffffc01 	.word	0xfffffc01
    24ec:	00003a5c 	.word	0x00003a5c
    24f0:	fffffc0d 	.word	0xfffffc0d
    24f4:	800fffff 	.word	0x800fffff
    24f8:	45d9      	cmp	r9, fp
    24fa:	d900      	bls.n	24fe <__aeabi_ddiv+0x1fe>
    24fc:	e139      	b.n	2772 <__aeabi_ddiv+0x472>
    24fe:	d100      	bne.n	2502 <__aeabi_ddiv+0x202>
    2500:	e134      	b.n	276c <__aeabi_ddiv+0x46c>
    2502:	2300      	movs	r3, #0
    2504:	4646      	mov	r6, r8
    2506:	464d      	mov	r5, r9
    2508:	469a      	mov	sl, r3
    250a:	3c01      	subs	r4, #1
    250c:	465b      	mov	r3, fp
    250e:	0e0a      	lsrs	r2, r1, #24
    2510:	021b      	lsls	r3, r3, #8
    2512:	431a      	orrs	r2, r3
    2514:	020b      	lsls	r3, r1, #8
    2516:	0c17      	lsrs	r7, r2, #16
    2518:	9303      	str	r3, [sp, #12]
    251a:	0413      	lsls	r3, r2, #16
    251c:	0c1b      	lsrs	r3, r3, #16
    251e:	0039      	movs	r1, r7
    2520:	0028      	movs	r0, r5
    2522:	4690      	mov	r8, r2
    2524:	9301      	str	r3, [sp, #4]
    2526:	f7ff fd57 	bl	1fd8 <__udivsi3>
    252a:	0002      	movs	r2, r0
    252c:	9b01      	ldr	r3, [sp, #4]
    252e:	4683      	mov	fp, r0
    2530:	435a      	muls	r2, r3
    2532:	0028      	movs	r0, r5
    2534:	0039      	movs	r1, r7
    2536:	4691      	mov	r9, r2
    2538:	f7ff fdd4 	bl	20e4 <__aeabi_uidivmod>
    253c:	0c35      	lsrs	r5, r6, #16
    253e:	0409      	lsls	r1, r1, #16
    2540:	430d      	orrs	r5, r1
    2542:	45a9      	cmp	r9, r5
    2544:	d90d      	bls.n	2562 <__aeabi_ddiv+0x262>
    2546:	465b      	mov	r3, fp
    2548:	4445      	add	r5, r8
    254a:	3b01      	subs	r3, #1
    254c:	45a8      	cmp	r8, r5
    254e:	d900      	bls.n	2552 <__aeabi_ddiv+0x252>
    2550:	e13a      	b.n	27c8 <__aeabi_ddiv+0x4c8>
    2552:	45a9      	cmp	r9, r5
    2554:	d800      	bhi.n	2558 <__aeabi_ddiv+0x258>
    2556:	e137      	b.n	27c8 <__aeabi_ddiv+0x4c8>
    2558:	2302      	movs	r3, #2
    255a:	425b      	negs	r3, r3
    255c:	469c      	mov	ip, r3
    255e:	4445      	add	r5, r8
    2560:	44e3      	add	fp, ip
    2562:	464b      	mov	r3, r9
    2564:	1aeb      	subs	r3, r5, r3
    2566:	0039      	movs	r1, r7
    2568:	0018      	movs	r0, r3
    256a:	9304      	str	r3, [sp, #16]
    256c:	f7ff fd34 	bl	1fd8 <__udivsi3>
    2570:	9b01      	ldr	r3, [sp, #4]
    2572:	0005      	movs	r5, r0
    2574:	4343      	muls	r3, r0
    2576:	0039      	movs	r1, r7
    2578:	9804      	ldr	r0, [sp, #16]
    257a:	4699      	mov	r9, r3
    257c:	f7ff fdb2 	bl	20e4 <__aeabi_uidivmod>
    2580:	0433      	lsls	r3, r6, #16
    2582:	0409      	lsls	r1, r1, #16
    2584:	0c1b      	lsrs	r3, r3, #16
    2586:	430b      	orrs	r3, r1
    2588:	4599      	cmp	r9, r3
    258a:	d909      	bls.n	25a0 <__aeabi_ddiv+0x2a0>
    258c:	4443      	add	r3, r8
    258e:	1e6a      	subs	r2, r5, #1
    2590:	4598      	cmp	r8, r3
    2592:	d900      	bls.n	2596 <__aeabi_ddiv+0x296>
    2594:	e11a      	b.n	27cc <__aeabi_ddiv+0x4cc>
    2596:	4599      	cmp	r9, r3
    2598:	d800      	bhi.n	259c <__aeabi_ddiv+0x29c>
    259a:	e117      	b.n	27cc <__aeabi_ddiv+0x4cc>
    259c:	3d02      	subs	r5, #2
    259e:	4443      	add	r3, r8
    25a0:	464a      	mov	r2, r9
    25a2:	1a9b      	subs	r3, r3, r2
    25a4:	465a      	mov	r2, fp
    25a6:	0412      	lsls	r2, r2, #16
    25a8:	432a      	orrs	r2, r5
    25aa:	9903      	ldr	r1, [sp, #12]
    25ac:	4693      	mov	fp, r2
    25ae:	0c10      	lsrs	r0, r2, #16
    25b0:	0c0a      	lsrs	r2, r1, #16
    25b2:	4691      	mov	r9, r2
    25b4:	0409      	lsls	r1, r1, #16
    25b6:	465a      	mov	r2, fp
    25b8:	0c09      	lsrs	r1, r1, #16
    25ba:	464e      	mov	r6, r9
    25bc:	000d      	movs	r5, r1
    25be:	0412      	lsls	r2, r2, #16
    25c0:	0c12      	lsrs	r2, r2, #16
    25c2:	4345      	muls	r5, r0
    25c4:	9105      	str	r1, [sp, #20]
    25c6:	4351      	muls	r1, r2
    25c8:	4372      	muls	r2, r6
    25ca:	4370      	muls	r0, r6
    25cc:	1952      	adds	r2, r2, r5
    25ce:	0c0e      	lsrs	r6, r1, #16
    25d0:	18b2      	adds	r2, r6, r2
    25d2:	4295      	cmp	r5, r2
    25d4:	d903      	bls.n	25de <__aeabi_ddiv+0x2de>
    25d6:	2580      	movs	r5, #128	; 0x80
    25d8:	026d      	lsls	r5, r5, #9
    25da:	46ac      	mov	ip, r5
    25dc:	4460      	add	r0, ip
    25de:	0c15      	lsrs	r5, r2, #16
    25e0:	0409      	lsls	r1, r1, #16
    25e2:	0412      	lsls	r2, r2, #16
    25e4:	0c09      	lsrs	r1, r1, #16
    25e6:	1828      	adds	r0, r5, r0
    25e8:	1852      	adds	r2, r2, r1
    25ea:	4283      	cmp	r3, r0
    25ec:	d200      	bcs.n	25f0 <__aeabi_ddiv+0x2f0>
    25ee:	e0ce      	b.n	278e <__aeabi_ddiv+0x48e>
    25f0:	d100      	bne.n	25f4 <__aeabi_ddiv+0x2f4>
    25f2:	e0c8      	b.n	2786 <__aeabi_ddiv+0x486>
    25f4:	1a1d      	subs	r5, r3, r0
    25f6:	4653      	mov	r3, sl
    25f8:	1a9e      	subs	r6, r3, r2
    25fa:	45b2      	cmp	sl, r6
    25fc:	4192      	sbcs	r2, r2
    25fe:	4252      	negs	r2, r2
    2600:	1aab      	subs	r3, r5, r2
    2602:	469a      	mov	sl, r3
    2604:	4598      	cmp	r8, r3
    2606:	d100      	bne.n	260a <__aeabi_ddiv+0x30a>
    2608:	e117      	b.n	283a <__aeabi_ddiv+0x53a>
    260a:	0039      	movs	r1, r7
    260c:	0018      	movs	r0, r3
    260e:	f7ff fce3 	bl	1fd8 <__udivsi3>
    2612:	9b01      	ldr	r3, [sp, #4]
    2614:	0005      	movs	r5, r0
    2616:	4343      	muls	r3, r0
    2618:	0039      	movs	r1, r7
    261a:	4650      	mov	r0, sl
    261c:	9304      	str	r3, [sp, #16]
    261e:	f7ff fd61 	bl	20e4 <__aeabi_uidivmod>
    2622:	9804      	ldr	r0, [sp, #16]
    2624:	040b      	lsls	r3, r1, #16
    2626:	0c31      	lsrs	r1, r6, #16
    2628:	4319      	orrs	r1, r3
    262a:	4288      	cmp	r0, r1
    262c:	d909      	bls.n	2642 <__aeabi_ddiv+0x342>
    262e:	4441      	add	r1, r8
    2630:	1e6b      	subs	r3, r5, #1
    2632:	4588      	cmp	r8, r1
    2634:	d900      	bls.n	2638 <__aeabi_ddiv+0x338>
    2636:	e107      	b.n	2848 <__aeabi_ddiv+0x548>
    2638:	4288      	cmp	r0, r1
    263a:	d800      	bhi.n	263e <__aeabi_ddiv+0x33e>
    263c:	e104      	b.n	2848 <__aeabi_ddiv+0x548>
    263e:	3d02      	subs	r5, #2
    2640:	4441      	add	r1, r8
    2642:	9b04      	ldr	r3, [sp, #16]
    2644:	1acb      	subs	r3, r1, r3
    2646:	0018      	movs	r0, r3
    2648:	0039      	movs	r1, r7
    264a:	9304      	str	r3, [sp, #16]
    264c:	f7ff fcc4 	bl	1fd8 <__udivsi3>
    2650:	9b01      	ldr	r3, [sp, #4]
    2652:	4682      	mov	sl, r0
    2654:	4343      	muls	r3, r0
    2656:	0039      	movs	r1, r7
    2658:	9804      	ldr	r0, [sp, #16]
    265a:	9301      	str	r3, [sp, #4]
    265c:	f7ff fd42 	bl	20e4 <__aeabi_uidivmod>
    2660:	9801      	ldr	r0, [sp, #4]
    2662:	040b      	lsls	r3, r1, #16
    2664:	0431      	lsls	r1, r6, #16
    2666:	0c09      	lsrs	r1, r1, #16
    2668:	4319      	orrs	r1, r3
    266a:	4288      	cmp	r0, r1
    266c:	d90d      	bls.n	268a <__aeabi_ddiv+0x38a>
    266e:	4653      	mov	r3, sl
    2670:	4441      	add	r1, r8
    2672:	3b01      	subs	r3, #1
    2674:	4588      	cmp	r8, r1
    2676:	d900      	bls.n	267a <__aeabi_ddiv+0x37a>
    2678:	e0e8      	b.n	284c <__aeabi_ddiv+0x54c>
    267a:	4288      	cmp	r0, r1
    267c:	d800      	bhi.n	2680 <__aeabi_ddiv+0x380>
    267e:	e0e5      	b.n	284c <__aeabi_ddiv+0x54c>
    2680:	2302      	movs	r3, #2
    2682:	425b      	negs	r3, r3
    2684:	469c      	mov	ip, r3
    2686:	4441      	add	r1, r8
    2688:	44e2      	add	sl, ip
    268a:	9b01      	ldr	r3, [sp, #4]
    268c:	042d      	lsls	r5, r5, #16
    268e:	1ace      	subs	r6, r1, r3
    2690:	4651      	mov	r1, sl
    2692:	4329      	orrs	r1, r5
    2694:	9d05      	ldr	r5, [sp, #20]
    2696:	464f      	mov	r7, r9
    2698:	002a      	movs	r2, r5
    269a:	040b      	lsls	r3, r1, #16
    269c:	0c08      	lsrs	r0, r1, #16
    269e:	0c1b      	lsrs	r3, r3, #16
    26a0:	435a      	muls	r2, r3
    26a2:	4345      	muls	r5, r0
    26a4:	437b      	muls	r3, r7
    26a6:	4378      	muls	r0, r7
    26a8:	195b      	adds	r3, r3, r5
    26aa:	0c17      	lsrs	r7, r2, #16
    26ac:	18fb      	adds	r3, r7, r3
    26ae:	429d      	cmp	r5, r3
    26b0:	d903      	bls.n	26ba <__aeabi_ddiv+0x3ba>
    26b2:	2580      	movs	r5, #128	; 0x80
    26b4:	026d      	lsls	r5, r5, #9
    26b6:	46ac      	mov	ip, r5
    26b8:	4460      	add	r0, ip
    26ba:	0c1d      	lsrs	r5, r3, #16
    26bc:	0412      	lsls	r2, r2, #16
    26be:	041b      	lsls	r3, r3, #16
    26c0:	0c12      	lsrs	r2, r2, #16
    26c2:	1828      	adds	r0, r5, r0
    26c4:	189b      	adds	r3, r3, r2
    26c6:	4286      	cmp	r6, r0
    26c8:	d200      	bcs.n	26cc <__aeabi_ddiv+0x3cc>
    26ca:	e093      	b.n	27f4 <__aeabi_ddiv+0x4f4>
    26cc:	d100      	bne.n	26d0 <__aeabi_ddiv+0x3d0>
    26ce:	e08e      	b.n	27ee <__aeabi_ddiv+0x4ee>
    26d0:	2301      	movs	r3, #1
    26d2:	4319      	orrs	r1, r3
    26d4:	4ba0      	ldr	r3, [pc, #640]	; (2958 <__aeabi_ddiv+0x658>)
    26d6:	18e3      	adds	r3, r4, r3
    26d8:	2b00      	cmp	r3, #0
    26da:	dc00      	bgt.n	26de <__aeabi_ddiv+0x3de>
    26dc:	e099      	b.n	2812 <__aeabi_ddiv+0x512>
    26de:	074a      	lsls	r2, r1, #29
    26e0:	d000      	beq.n	26e4 <__aeabi_ddiv+0x3e4>
    26e2:	e09e      	b.n	2822 <__aeabi_ddiv+0x522>
    26e4:	465a      	mov	r2, fp
    26e6:	01d2      	lsls	r2, r2, #7
    26e8:	d506      	bpl.n	26f8 <__aeabi_ddiv+0x3f8>
    26ea:	465a      	mov	r2, fp
    26ec:	4b9b      	ldr	r3, [pc, #620]	; (295c <__aeabi_ddiv+0x65c>)
    26ee:	401a      	ands	r2, r3
    26f0:	2380      	movs	r3, #128	; 0x80
    26f2:	4693      	mov	fp, r2
    26f4:	00db      	lsls	r3, r3, #3
    26f6:	18e3      	adds	r3, r4, r3
    26f8:	4a99      	ldr	r2, [pc, #612]	; (2960 <__aeabi_ddiv+0x660>)
    26fa:	4293      	cmp	r3, r2
    26fc:	dd68      	ble.n	27d0 <__aeabi_ddiv+0x4d0>
    26fe:	2301      	movs	r3, #1
    2700:	9a02      	ldr	r2, [sp, #8]
    2702:	4c98      	ldr	r4, [pc, #608]	; (2964 <__aeabi_ddiv+0x664>)
    2704:	401a      	ands	r2, r3
    2706:	2300      	movs	r3, #0
    2708:	4694      	mov	ip, r2
    270a:	4698      	mov	r8, r3
    270c:	2200      	movs	r2, #0
    270e:	e6c5      	b.n	249c <__aeabi_ddiv+0x19c>
    2710:	2280      	movs	r2, #128	; 0x80
    2712:	464b      	mov	r3, r9
    2714:	0312      	lsls	r2, r2, #12
    2716:	4213      	tst	r3, r2
    2718:	d00a      	beq.n	2730 <__aeabi_ddiv+0x430>
    271a:	465b      	mov	r3, fp
    271c:	4213      	tst	r3, r2
    271e:	d106      	bne.n	272e <__aeabi_ddiv+0x42e>
    2720:	431a      	orrs	r2, r3
    2722:	0312      	lsls	r2, r2, #12
    2724:	0b12      	lsrs	r2, r2, #12
    2726:	46ac      	mov	ip, r5
    2728:	4688      	mov	r8, r1
    272a:	4c8e      	ldr	r4, [pc, #568]	; (2964 <__aeabi_ddiv+0x664>)
    272c:	e6b6      	b.n	249c <__aeabi_ddiv+0x19c>
    272e:	464b      	mov	r3, r9
    2730:	431a      	orrs	r2, r3
    2732:	0312      	lsls	r2, r2, #12
    2734:	0b12      	lsrs	r2, r2, #12
    2736:	46bc      	mov	ip, r7
    2738:	4c8a      	ldr	r4, [pc, #552]	; (2964 <__aeabi_ddiv+0x664>)
    273a:	e6af      	b.n	249c <__aeabi_ddiv+0x19c>
    273c:	0003      	movs	r3, r0
    273e:	465a      	mov	r2, fp
    2740:	3b28      	subs	r3, #40	; 0x28
    2742:	409a      	lsls	r2, r3
    2744:	2300      	movs	r3, #0
    2746:	4691      	mov	r9, r2
    2748:	4698      	mov	r8, r3
    274a:	e657      	b.n	23fc <__aeabi_ddiv+0xfc>
    274c:	4658      	mov	r0, fp
    274e:	f000 ff4b 	bl	35e8 <__clzsi2>
    2752:	3020      	adds	r0, #32
    2754:	e640      	b.n	23d8 <__aeabi_ddiv+0xd8>
    2756:	0003      	movs	r3, r0
    2758:	4652      	mov	r2, sl
    275a:	3b28      	subs	r3, #40	; 0x28
    275c:	409a      	lsls	r2, r3
    275e:	2100      	movs	r1, #0
    2760:	4693      	mov	fp, r2
    2762:	e677      	b.n	2454 <__aeabi_ddiv+0x154>
    2764:	f000 ff40 	bl	35e8 <__clzsi2>
    2768:	3020      	adds	r0, #32
    276a:	e65f      	b.n	242c <__aeabi_ddiv+0x12c>
    276c:	4588      	cmp	r8, r1
    276e:	d200      	bcs.n	2772 <__aeabi_ddiv+0x472>
    2770:	e6c7      	b.n	2502 <__aeabi_ddiv+0x202>
    2772:	464b      	mov	r3, r9
    2774:	07de      	lsls	r6, r3, #31
    2776:	085d      	lsrs	r5, r3, #1
    2778:	4643      	mov	r3, r8
    277a:	085b      	lsrs	r3, r3, #1
    277c:	431e      	orrs	r6, r3
    277e:	4643      	mov	r3, r8
    2780:	07db      	lsls	r3, r3, #31
    2782:	469a      	mov	sl, r3
    2784:	e6c2      	b.n	250c <__aeabi_ddiv+0x20c>
    2786:	2500      	movs	r5, #0
    2788:	4592      	cmp	sl, r2
    278a:	d300      	bcc.n	278e <__aeabi_ddiv+0x48e>
    278c:	e733      	b.n	25f6 <__aeabi_ddiv+0x2f6>
    278e:	9e03      	ldr	r6, [sp, #12]
    2790:	4659      	mov	r1, fp
    2792:	46b4      	mov	ip, r6
    2794:	44e2      	add	sl, ip
    2796:	45b2      	cmp	sl, r6
    2798:	41ad      	sbcs	r5, r5
    279a:	426d      	negs	r5, r5
    279c:	4445      	add	r5, r8
    279e:	18eb      	adds	r3, r5, r3
    27a0:	3901      	subs	r1, #1
    27a2:	4598      	cmp	r8, r3
    27a4:	d207      	bcs.n	27b6 <__aeabi_ddiv+0x4b6>
    27a6:	4298      	cmp	r0, r3
    27a8:	d900      	bls.n	27ac <__aeabi_ddiv+0x4ac>
    27aa:	e07f      	b.n	28ac <__aeabi_ddiv+0x5ac>
    27ac:	d100      	bne.n	27b0 <__aeabi_ddiv+0x4b0>
    27ae:	e0bc      	b.n	292a <__aeabi_ddiv+0x62a>
    27b0:	1a1d      	subs	r5, r3, r0
    27b2:	468b      	mov	fp, r1
    27b4:	e71f      	b.n	25f6 <__aeabi_ddiv+0x2f6>
    27b6:	4598      	cmp	r8, r3
    27b8:	d1fa      	bne.n	27b0 <__aeabi_ddiv+0x4b0>
    27ba:	9d03      	ldr	r5, [sp, #12]
    27bc:	4555      	cmp	r5, sl
    27be:	d9f2      	bls.n	27a6 <__aeabi_ddiv+0x4a6>
    27c0:	4643      	mov	r3, r8
    27c2:	468b      	mov	fp, r1
    27c4:	1a1d      	subs	r5, r3, r0
    27c6:	e716      	b.n	25f6 <__aeabi_ddiv+0x2f6>
    27c8:	469b      	mov	fp, r3
    27ca:	e6ca      	b.n	2562 <__aeabi_ddiv+0x262>
    27cc:	0015      	movs	r5, r2
    27ce:	e6e7      	b.n	25a0 <__aeabi_ddiv+0x2a0>
    27d0:	465a      	mov	r2, fp
    27d2:	08c9      	lsrs	r1, r1, #3
    27d4:	0752      	lsls	r2, r2, #29
    27d6:	430a      	orrs	r2, r1
    27d8:	055b      	lsls	r3, r3, #21
    27da:	4690      	mov	r8, r2
    27dc:	0d5c      	lsrs	r4, r3, #21
    27de:	465a      	mov	r2, fp
    27e0:	2301      	movs	r3, #1
    27e2:	9902      	ldr	r1, [sp, #8]
    27e4:	0252      	lsls	r2, r2, #9
    27e6:	4019      	ands	r1, r3
    27e8:	0b12      	lsrs	r2, r2, #12
    27ea:	468c      	mov	ip, r1
    27ec:	e656      	b.n	249c <__aeabi_ddiv+0x19c>
    27ee:	2b00      	cmp	r3, #0
    27f0:	d100      	bne.n	27f4 <__aeabi_ddiv+0x4f4>
    27f2:	e76f      	b.n	26d4 <__aeabi_ddiv+0x3d4>
    27f4:	4446      	add	r6, r8
    27f6:	1e4a      	subs	r2, r1, #1
    27f8:	45b0      	cmp	r8, r6
    27fa:	d929      	bls.n	2850 <__aeabi_ddiv+0x550>
    27fc:	0011      	movs	r1, r2
    27fe:	4286      	cmp	r6, r0
    2800:	d000      	beq.n	2804 <__aeabi_ddiv+0x504>
    2802:	e765      	b.n	26d0 <__aeabi_ddiv+0x3d0>
    2804:	9a03      	ldr	r2, [sp, #12]
    2806:	4293      	cmp	r3, r2
    2808:	d000      	beq.n	280c <__aeabi_ddiv+0x50c>
    280a:	e761      	b.n	26d0 <__aeabi_ddiv+0x3d0>
    280c:	e762      	b.n	26d4 <__aeabi_ddiv+0x3d4>
    280e:	2101      	movs	r1, #1
    2810:	4249      	negs	r1, r1
    2812:	2001      	movs	r0, #1
    2814:	1ac2      	subs	r2, r0, r3
    2816:	2a38      	cmp	r2, #56	; 0x38
    2818:	dd21      	ble.n	285e <__aeabi_ddiv+0x55e>
    281a:	9b02      	ldr	r3, [sp, #8]
    281c:	4003      	ands	r3, r0
    281e:	469c      	mov	ip, r3
    2820:	e638      	b.n	2494 <__aeabi_ddiv+0x194>
    2822:	220f      	movs	r2, #15
    2824:	400a      	ands	r2, r1
    2826:	2a04      	cmp	r2, #4
    2828:	d100      	bne.n	282c <__aeabi_ddiv+0x52c>
    282a:	e75b      	b.n	26e4 <__aeabi_ddiv+0x3e4>
    282c:	000a      	movs	r2, r1
    282e:	1d11      	adds	r1, r2, #4
    2830:	4291      	cmp	r1, r2
    2832:	4192      	sbcs	r2, r2
    2834:	4252      	negs	r2, r2
    2836:	4493      	add	fp, r2
    2838:	e754      	b.n	26e4 <__aeabi_ddiv+0x3e4>
    283a:	4b47      	ldr	r3, [pc, #284]	; (2958 <__aeabi_ddiv+0x658>)
    283c:	18e3      	adds	r3, r4, r3
    283e:	2b00      	cmp	r3, #0
    2840:	dde5      	ble.n	280e <__aeabi_ddiv+0x50e>
    2842:	2201      	movs	r2, #1
    2844:	4252      	negs	r2, r2
    2846:	e7f2      	b.n	282e <__aeabi_ddiv+0x52e>
    2848:	001d      	movs	r5, r3
    284a:	e6fa      	b.n	2642 <__aeabi_ddiv+0x342>
    284c:	469a      	mov	sl, r3
    284e:	e71c      	b.n	268a <__aeabi_ddiv+0x38a>
    2850:	42b0      	cmp	r0, r6
    2852:	d839      	bhi.n	28c8 <__aeabi_ddiv+0x5c8>
    2854:	d06e      	beq.n	2934 <__aeabi_ddiv+0x634>
    2856:	0011      	movs	r1, r2
    2858:	e73a      	b.n	26d0 <__aeabi_ddiv+0x3d0>
    285a:	9302      	str	r3, [sp, #8]
    285c:	e73a      	b.n	26d4 <__aeabi_ddiv+0x3d4>
    285e:	2a1f      	cmp	r2, #31
    2860:	dc3c      	bgt.n	28dc <__aeabi_ddiv+0x5dc>
    2862:	2320      	movs	r3, #32
    2864:	1a9b      	subs	r3, r3, r2
    2866:	000c      	movs	r4, r1
    2868:	4658      	mov	r0, fp
    286a:	4099      	lsls	r1, r3
    286c:	4098      	lsls	r0, r3
    286e:	1e4b      	subs	r3, r1, #1
    2870:	4199      	sbcs	r1, r3
    2872:	465b      	mov	r3, fp
    2874:	40d4      	lsrs	r4, r2
    2876:	40d3      	lsrs	r3, r2
    2878:	4320      	orrs	r0, r4
    287a:	4308      	orrs	r0, r1
    287c:	001a      	movs	r2, r3
    287e:	0743      	lsls	r3, r0, #29
    2880:	d009      	beq.n	2896 <__aeabi_ddiv+0x596>
    2882:	230f      	movs	r3, #15
    2884:	4003      	ands	r3, r0
    2886:	2b04      	cmp	r3, #4
    2888:	d005      	beq.n	2896 <__aeabi_ddiv+0x596>
    288a:	0001      	movs	r1, r0
    288c:	1d08      	adds	r0, r1, #4
    288e:	4288      	cmp	r0, r1
    2890:	419b      	sbcs	r3, r3
    2892:	425b      	negs	r3, r3
    2894:	18d2      	adds	r2, r2, r3
    2896:	0213      	lsls	r3, r2, #8
    2898:	d53a      	bpl.n	2910 <__aeabi_ddiv+0x610>
    289a:	2301      	movs	r3, #1
    289c:	9a02      	ldr	r2, [sp, #8]
    289e:	2401      	movs	r4, #1
    28a0:	401a      	ands	r2, r3
    28a2:	2300      	movs	r3, #0
    28a4:	4694      	mov	ip, r2
    28a6:	4698      	mov	r8, r3
    28a8:	2200      	movs	r2, #0
    28aa:	e5f7      	b.n	249c <__aeabi_ddiv+0x19c>
    28ac:	2102      	movs	r1, #2
    28ae:	4249      	negs	r1, r1
    28b0:	468c      	mov	ip, r1
    28b2:	9d03      	ldr	r5, [sp, #12]
    28b4:	44e3      	add	fp, ip
    28b6:	46ac      	mov	ip, r5
    28b8:	44e2      	add	sl, ip
    28ba:	45aa      	cmp	sl, r5
    28bc:	41ad      	sbcs	r5, r5
    28be:	426d      	negs	r5, r5
    28c0:	4445      	add	r5, r8
    28c2:	18ed      	adds	r5, r5, r3
    28c4:	1a2d      	subs	r5, r5, r0
    28c6:	e696      	b.n	25f6 <__aeabi_ddiv+0x2f6>
    28c8:	1e8a      	subs	r2, r1, #2
    28ca:	9903      	ldr	r1, [sp, #12]
    28cc:	004d      	lsls	r5, r1, #1
    28ce:	428d      	cmp	r5, r1
    28d0:	4189      	sbcs	r1, r1
    28d2:	4249      	negs	r1, r1
    28d4:	4441      	add	r1, r8
    28d6:	1876      	adds	r6, r6, r1
    28d8:	9503      	str	r5, [sp, #12]
    28da:	e78f      	b.n	27fc <__aeabi_ddiv+0x4fc>
    28dc:	201f      	movs	r0, #31
    28de:	4240      	negs	r0, r0
    28e0:	1ac3      	subs	r3, r0, r3
    28e2:	4658      	mov	r0, fp
    28e4:	40d8      	lsrs	r0, r3
    28e6:	0003      	movs	r3, r0
    28e8:	2a20      	cmp	r2, #32
    28ea:	d028      	beq.n	293e <__aeabi_ddiv+0x63e>
    28ec:	2040      	movs	r0, #64	; 0x40
    28ee:	465d      	mov	r5, fp
    28f0:	1a82      	subs	r2, r0, r2
    28f2:	4095      	lsls	r5, r2
    28f4:	4329      	orrs	r1, r5
    28f6:	1e4a      	subs	r2, r1, #1
    28f8:	4191      	sbcs	r1, r2
    28fa:	4319      	orrs	r1, r3
    28fc:	2307      	movs	r3, #7
    28fe:	2200      	movs	r2, #0
    2900:	400b      	ands	r3, r1
    2902:	d009      	beq.n	2918 <__aeabi_ddiv+0x618>
    2904:	230f      	movs	r3, #15
    2906:	2200      	movs	r2, #0
    2908:	400b      	ands	r3, r1
    290a:	0008      	movs	r0, r1
    290c:	2b04      	cmp	r3, #4
    290e:	d1bd      	bne.n	288c <__aeabi_ddiv+0x58c>
    2910:	0001      	movs	r1, r0
    2912:	0753      	lsls	r3, r2, #29
    2914:	0252      	lsls	r2, r2, #9
    2916:	0b12      	lsrs	r2, r2, #12
    2918:	08c9      	lsrs	r1, r1, #3
    291a:	4319      	orrs	r1, r3
    291c:	2301      	movs	r3, #1
    291e:	4688      	mov	r8, r1
    2920:	9902      	ldr	r1, [sp, #8]
    2922:	2400      	movs	r4, #0
    2924:	4019      	ands	r1, r3
    2926:	468c      	mov	ip, r1
    2928:	e5b8      	b.n	249c <__aeabi_ddiv+0x19c>
    292a:	4552      	cmp	r2, sl
    292c:	d8be      	bhi.n	28ac <__aeabi_ddiv+0x5ac>
    292e:	468b      	mov	fp, r1
    2930:	2500      	movs	r5, #0
    2932:	e660      	b.n	25f6 <__aeabi_ddiv+0x2f6>
    2934:	9d03      	ldr	r5, [sp, #12]
    2936:	429d      	cmp	r5, r3
    2938:	d3c6      	bcc.n	28c8 <__aeabi_ddiv+0x5c8>
    293a:	0011      	movs	r1, r2
    293c:	e762      	b.n	2804 <__aeabi_ddiv+0x504>
    293e:	2500      	movs	r5, #0
    2940:	e7d8      	b.n	28f4 <__aeabi_ddiv+0x5f4>
    2942:	2280      	movs	r2, #128	; 0x80
    2944:	465b      	mov	r3, fp
    2946:	0312      	lsls	r2, r2, #12
    2948:	431a      	orrs	r2, r3
    294a:	9b01      	ldr	r3, [sp, #4]
    294c:	0312      	lsls	r2, r2, #12
    294e:	0b12      	lsrs	r2, r2, #12
    2950:	469c      	mov	ip, r3
    2952:	4688      	mov	r8, r1
    2954:	4c03      	ldr	r4, [pc, #12]	; (2964 <__aeabi_ddiv+0x664>)
    2956:	e5a1      	b.n	249c <__aeabi_ddiv+0x19c>
    2958:	000003ff 	.word	0x000003ff
    295c:	feffffff 	.word	0xfeffffff
    2960:	000007fe 	.word	0x000007fe
    2964:	000007ff 	.word	0x000007ff

00002968 <__aeabi_dmul>:
    2968:	b5f0      	push	{r4, r5, r6, r7, lr}
    296a:	4657      	mov	r7, sl
    296c:	4645      	mov	r5, r8
    296e:	46de      	mov	lr, fp
    2970:	464e      	mov	r6, r9
    2972:	b5e0      	push	{r5, r6, r7, lr}
    2974:	030c      	lsls	r4, r1, #12
    2976:	4698      	mov	r8, r3
    2978:	004e      	lsls	r6, r1, #1
    297a:	0b23      	lsrs	r3, r4, #12
    297c:	b087      	sub	sp, #28
    297e:	0007      	movs	r7, r0
    2980:	4692      	mov	sl, r2
    2982:	469b      	mov	fp, r3
    2984:	0d76      	lsrs	r6, r6, #21
    2986:	0fcd      	lsrs	r5, r1, #31
    2988:	2e00      	cmp	r6, #0
    298a:	d06b      	beq.n	2a64 <__aeabi_dmul+0xfc>
    298c:	4b6d      	ldr	r3, [pc, #436]	; (2b44 <__aeabi_dmul+0x1dc>)
    298e:	429e      	cmp	r6, r3
    2990:	d035      	beq.n	29fe <__aeabi_dmul+0x96>
    2992:	2480      	movs	r4, #128	; 0x80
    2994:	465b      	mov	r3, fp
    2996:	0f42      	lsrs	r2, r0, #29
    2998:	0424      	lsls	r4, r4, #16
    299a:	00db      	lsls	r3, r3, #3
    299c:	4314      	orrs	r4, r2
    299e:	431c      	orrs	r4, r3
    29a0:	00c3      	lsls	r3, r0, #3
    29a2:	4699      	mov	r9, r3
    29a4:	4b68      	ldr	r3, [pc, #416]	; (2b48 <__aeabi_dmul+0x1e0>)
    29a6:	46a3      	mov	fp, r4
    29a8:	469c      	mov	ip, r3
    29aa:	2300      	movs	r3, #0
    29ac:	2700      	movs	r7, #0
    29ae:	4466      	add	r6, ip
    29b0:	9302      	str	r3, [sp, #8]
    29b2:	4643      	mov	r3, r8
    29b4:	031c      	lsls	r4, r3, #12
    29b6:	005a      	lsls	r2, r3, #1
    29b8:	0fdb      	lsrs	r3, r3, #31
    29ba:	4650      	mov	r0, sl
    29bc:	0b24      	lsrs	r4, r4, #12
    29be:	0d52      	lsrs	r2, r2, #21
    29c0:	4698      	mov	r8, r3
    29c2:	d100      	bne.n	29c6 <__aeabi_dmul+0x5e>
    29c4:	e076      	b.n	2ab4 <__aeabi_dmul+0x14c>
    29c6:	4b5f      	ldr	r3, [pc, #380]	; (2b44 <__aeabi_dmul+0x1dc>)
    29c8:	429a      	cmp	r2, r3
    29ca:	d06d      	beq.n	2aa8 <__aeabi_dmul+0x140>
    29cc:	2380      	movs	r3, #128	; 0x80
    29ce:	0f41      	lsrs	r1, r0, #29
    29d0:	041b      	lsls	r3, r3, #16
    29d2:	430b      	orrs	r3, r1
    29d4:	495c      	ldr	r1, [pc, #368]	; (2b48 <__aeabi_dmul+0x1e0>)
    29d6:	00e4      	lsls	r4, r4, #3
    29d8:	468c      	mov	ip, r1
    29da:	431c      	orrs	r4, r3
    29dc:	00c3      	lsls	r3, r0, #3
    29de:	2000      	movs	r0, #0
    29e0:	4462      	add	r2, ip
    29e2:	4641      	mov	r1, r8
    29e4:	18b6      	adds	r6, r6, r2
    29e6:	4069      	eors	r1, r5
    29e8:	1c72      	adds	r2, r6, #1
    29ea:	9101      	str	r1, [sp, #4]
    29ec:	4694      	mov	ip, r2
    29ee:	4307      	orrs	r7, r0
    29f0:	2f0f      	cmp	r7, #15
    29f2:	d900      	bls.n	29f6 <__aeabi_dmul+0x8e>
    29f4:	e0b0      	b.n	2b58 <__aeabi_dmul+0x1f0>
    29f6:	4a55      	ldr	r2, [pc, #340]	; (2b4c <__aeabi_dmul+0x1e4>)
    29f8:	00bf      	lsls	r7, r7, #2
    29fa:	59d2      	ldr	r2, [r2, r7]
    29fc:	4697      	mov	pc, r2
    29fe:	465b      	mov	r3, fp
    2a00:	4303      	orrs	r3, r0
    2a02:	4699      	mov	r9, r3
    2a04:	d000      	beq.n	2a08 <__aeabi_dmul+0xa0>
    2a06:	e087      	b.n	2b18 <__aeabi_dmul+0x1b0>
    2a08:	2300      	movs	r3, #0
    2a0a:	469b      	mov	fp, r3
    2a0c:	3302      	adds	r3, #2
    2a0e:	2708      	movs	r7, #8
    2a10:	9302      	str	r3, [sp, #8]
    2a12:	e7ce      	b.n	29b2 <__aeabi_dmul+0x4a>
    2a14:	4642      	mov	r2, r8
    2a16:	9201      	str	r2, [sp, #4]
    2a18:	2802      	cmp	r0, #2
    2a1a:	d067      	beq.n	2aec <__aeabi_dmul+0x184>
    2a1c:	2803      	cmp	r0, #3
    2a1e:	d100      	bne.n	2a22 <__aeabi_dmul+0xba>
    2a20:	e20e      	b.n	2e40 <__aeabi_dmul+0x4d8>
    2a22:	2801      	cmp	r0, #1
    2a24:	d000      	beq.n	2a28 <__aeabi_dmul+0xc0>
    2a26:	e162      	b.n	2cee <__aeabi_dmul+0x386>
    2a28:	2300      	movs	r3, #0
    2a2a:	2400      	movs	r4, #0
    2a2c:	2200      	movs	r2, #0
    2a2e:	4699      	mov	r9, r3
    2a30:	9901      	ldr	r1, [sp, #4]
    2a32:	4001      	ands	r1, r0
    2a34:	b2cd      	uxtb	r5, r1
    2a36:	2100      	movs	r1, #0
    2a38:	0312      	lsls	r2, r2, #12
    2a3a:	0d0b      	lsrs	r3, r1, #20
    2a3c:	0b12      	lsrs	r2, r2, #12
    2a3e:	051b      	lsls	r3, r3, #20
    2a40:	4313      	orrs	r3, r2
    2a42:	4a43      	ldr	r2, [pc, #268]	; (2b50 <__aeabi_dmul+0x1e8>)
    2a44:	0524      	lsls	r4, r4, #20
    2a46:	4013      	ands	r3, r2
    2a48:	431c      	orrs	r4, r3
    2a4a:	0064      	lsls	r4, r4, #1
    2a4c:	07ed      	lsls	r5, r5, #31
    2a4e:	0864      	lsrs	r4, r4, #1
    2a50:	432c      	orrs	r4, r5
    2a52:	4648      	mov	r0, r9
    2a54:	0021      	movs	r1, r4
    2a56:	b007      	add	sp, #28
    2a58:	bc3c      	pop	{r2, r3, r4, r5}
    2a5a:	4690      	mov	r8, r2
    2a5c:	4699      	mov	r9, r3
    2a5e:	46a2      	mov	sl, r4
    2a60:	46ab      	mov	fp, r5
    2a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a64:	4303      	orrs	r3, r0
    2a66:	4699      	mov	r9, r3
    2a68:	d04f      	beq.n	2b0a <__aeabi_dmul+0x1a2>
    2a6a:	465b      	mov	r3, fp
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d100      	bne.n	2a72 <__aeabi_dmul+0x10a>
    2a70:	e189      	b.n	2d86 <__aeabi_dmul+0x41e>
    2a72:	4658      	mov	r0, fp
    2a74:	f000 fdb8 	bl	35e8 <__clzsi2>
    2a78:	0003      	movs	r3, r0
    2a7a:	3b0b      	subs	r3, #11
    2a7c:	2b1c      	cmp	r3, #28
    2a7e:	dd00      	ble.n	2a82 <__aeabi_dmul+0x11a>
    2a80:	e17a      	b.n	2d78 <__aeabi_dmul+0x410>
    2a82:	221d      	movs	r2, #29
    2a84:	1ad3      	subs	r3, r2, r3
    2a86:	003a      	movs	r2, r7
    2a88:	0001      	movs	r1, r0
    2a8a:	465c      	mov	r4, fp
    2a8c:	40da      	lsrs	r2, r3
    2a8e:	3908      	subs	r1, #8
    2a90:	408c      	lsls	r4, r1
    2a92:	0013      	movs	r3, r2
    2a94:	408f      	lsls	r7, r1
    2a96:	4323      	orrs	r3, r4
    2a98:	469b      	mov	fp, r3
    2a9a:	46b9      	mov	r9, r7
    2a9c:	2300      	movs	r3, #0
    2a9e:	4e2d      	ldr	r6, [pc, #180]	; (2b54 <__aeabi_dmul+0x1ec>)
    2aa0:	2700      	movs	r7, #0
    2aa2:	1a36      	subs	r6, r6, r0
    2aa4:	9302      	str	r3, [sp, #8]
    2aa6:	e784      	b.n	29b2 <__aeabi_dmul+0x4a>
    2aa8:	4653      	mov	r3, sl
    2aaa:	4323      	orrs	r3, r4
    2aac:	d12a      	bne.n	2b04 <__aeabi_dmul+0x19c>
    2aae:	2400      	movs	r4, #0
    2ab0:	2002      	movs	r0, #2
    2ab2:	e796      	b.n	29e2 <__aeabi_dmul+0x7a>
    2ab4:	4653      	mov	r3, sl
    2ab6:	4323      	orrs	r3, r4
    2ab8:	d020      	beq.n	2afc <__aeabi_dmul+0x194>
    2aba:	2c00      	cmp	r4, #0
    2abc:	d100      	bne.n	2ac0 <__aeabi_dmul+0x158>
    2abe:	e157      	b.n	2d70 <__aeabi_dmul+0x408>
    2ac0:	0020      	movs	r0, r4
    2ac2:	f000 fd91 	bl	35e8 <__clzsi2>
    2ac6:	0003      	movs	r3, r0
    2ac8:	3b0b      	subs	r3, #11
    2aca:	2b1c      	cmp	r3, #28
    2acc:	dd00      	ble.n	2ad0 <__aeabi_dmul+0x168>
    2ace:	e149      	b.n	2d64 <__aeabi_dmul+0x3fc>
    2ad0:	211d      	movs	r1, #29
    2ad2:	1acb      	subs	r3, r1, r3
    2ad4:	4651      	mov	r1, sl
    2ad6:	0002      	movs	r2, r0
    2ad8:	40d9      	lsrs	r1, r3
    2ada:	4653      	mov	r3, sl
    2adc:	3a08      	subs	r2, #8
    2ade:	4094      	lsls	r4, r2
    2ae0:	4093      	lsls	r3, r2
    2ae2:	430c      	orrs	r4, r1
    2ae4:	4a1b      	ldr	r2, [pc, #108]	; (2b54 <__aeabi_dmul+0x1ec>)
    2ae6:	1a12      	subs	r2, r2, r0
    2ae8:	2000      	movs	r0, #0
    2aea:	e77a      	b.n	29e2 <__aeabi_dmul+0x7a>
    2aec:	2501      	movs	r5, #1
    2aee:	9b01      	ldr	r3, [sp, #4]
    2af0:	4c14      	ldr	r4, [pc, #80]	; (2b44 <__aeabi_dmul+0x1dc>)
    2af2:	401d      	ands	r5, r3
    2af4:	2300      	movs	r3, #0
    2af6:	2200      	movs	r2, #0
    2af8:	4699      	mov	r9, r3
    2afa:	e79c      	b.n	2a36 <__aeabi_dmul+0xce>
    2afc:	2400      	movs	r4, #0
    2afe:	2200      	movs	r2, #0
    2b00:	2001      	movs	r0, #1
    2b02:	e76e      	b.n	29e2 <__aeabi_dmul+0x7a>
    2b04:	4653      	mov	r3, sl
    2b06:	2003      	movs	r0, #3
    2b08:	e76b      	b.n	29e2 <__aeabi_dmul+0x7a>
    2b0a:	2300      	movs	r3, #0
    2b0c:	469b      	mov	fp, r3
    2b0e:	3301      	adds	r3, #1
    2b10:	2704      	movs	r7, #4
    2b12:	2600      	movs	r6, #0
    2b14:	9302      	str	r3, [sp, #8]
    2b16:	e74c      	b.n	29b2 <__aeabi_dmul+0x4a>
    2b18:	2303      	movs	r3, #3
    2b1a:	4681      	mov	r9, r0
    2b1c:	270c      	movs	r7, #12
    2b1e:	9302      	str	r3, [sp, #8]
    2b20:	e747      	b.n	29b2 <__aeabi_dmul+0x4a>
    2b22:	2280      	movs	r2, #128	; 0x80
    2b24:	2300      	movs	r3, #0
    2b26:	2500      	movs	r5, #0
    2b28:	0312      	lsls	r2, r2, #12
    2b2a:	4699      	mov	r9, r3
    2b2c:	4c05      	ldr	r4, [pc, #20]	; (2b44 <__aeabi_dmul+0x1dc>)
    2b2e:	e782      	b.n	2a36 <__aeabi_dmul+0xce>
    2b30:	465c      	mov	r4, fp
    2b32:	464b      	mov	r3, r9
    2b34:	9802      	ldr	r0, [sp, #8]
    2b36:	e76f      	b.n	2a18 <__aeabi_dmul+0xb0>
    2b38:	465c      	mov	r4, fp
    2b3a:	464b      	mov	r3, r9
    2b3c:	9501      	str	r5, [sp, #4]
    2b3e:	9802      	ldr	r0, [sp, #8]
    2b40:	e76a      	b.n	2a18 <__aeabi_dmul+0xb0>
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	000007ff 	.word	0x000007ff
    2b48:	fffffc01 	.word	0xfffffc01
    2b4c:	00003a9c 	.word	0x00003a9c
    2b50:	800fffff 	.word	0x800fffff
    2b54:	fffffc0d 	.word	0xfffffc0d
    2b58:	464a      	mov	r2, r9
    2b5a:	4649      	mov	r1, r9
    2b5c:	0c17      	lsrs	r7, r2, #16
    2b5e:	0c1a      	lsrs	r2, r3, #16
    2b60:	041b      	lsls	r3, r3, #16
    2b62:	0c1b      	lsrs	r3, r3, #16
    2b64:	0408      	lsls	r0, r1, #16
    2b66:	0019      	movs	r1, r3
    2b68:	0c00      	lsrs	r0, r0, #16
    2b6a:	4341      	muls	r1, r0
    2b6c:	0015      	movs	r5, r2
    2b6e:	4688      	mov	r8, r1
    2b70:	0019      	movs	r1, r3
    2b72:	437d      	muls	r5, r7
    2b74:	4379      	muls	r1, r7
    2b76:	9503      	str	r5, [sp, #12]
    2b78:	4689      	mov	r9, r1
    2b7a:	0029      	movs	r1, r5
    2b7c:	0015      	movs	r5, r2
    2b7e:	4345      	muls	r5, r0
    2b80:	444d      	add	r5, r9
    2b82:	9502      	str	r5, [sp, #8]
    2b84:	4645      	mov	r5, r8
    2b86:	0c2d      	lsrs	r5, r5, #16
    2b88:	46aa      	mov	sl, r5
    2b8a:	9d02      	ldr	r5, [sp, #8]
    2b8c:	4455      	add	r5, sl
    2b8e:	45a9      	cmp	r9, r5
    2b90:	d906      	bls.n	2ba0 <__aeabi_dmul+0x238>
    2b92:	468a      	mov	sl, r1
    2b94:	2180      	movs	r1, #128	; 0x80
    2b96:	0249      	lsls	r1, r1, #9
    2b98:	4689      	mov	r9, r1
    2b9a:	44ca      	add	sl, r9
    2b9c:	4651      	mov	r1, sl
    2b9e:	9103      	str	r1, [sp, #12]
    2ba0:	0c29      	lsrs	r1, r5, #16
    2ba2:	9104      	str	r1, [sp, #16]
    2ba4:	4641      	mov	r1, r8
    2ba6:	0409      	lsls	r1, r1, #16
    2ba8:	042d      	lsls	r5, r5, #16
    2baa:	0c09      	lsrs	r1, r1, #16
    2bac:	4688      	mov	r8, r1
    2bae:	0029      	movs	r1, r5
    2bb0:	0c25      	lsrs	r5, r4, #16
    2bb2:	0424      	lsls	r4, r4, #16
    2bb4:	4441      	add	r1, r8
    2bb6:	0c24      	lsrs	r4, r4, #16
    2bb8:	9105      	str	r1, [sp, #20]
    2bba:	0021      	movs	r1, r4
    2bbc:	4341      	muls	r1, r0
    2bbe:	4688      	mov	r8, r1
    2bc0:	0021      	movs	r1, r4
    2bc2:	4379      	muls	r1, r7
    2bc4:	468a      	mov	sl, r1
    2bc6:	4368      	muls	r0, r5
    2bc8:	4641      	mov	r1, r8
    2bca:	4450      	add	r0, sl
    2bcc:	4681      	mov	r9, r0
    2bce:	0c08      	lsrs	r0, r1, #16
    2bd0:	4448      	add	r0, r9
    2bd2:	436f      	muls	r7, r5
    2bd4:	4582      	cmp	sl, r0
    2bd6:	d903      	bls.n	2be0 <__aeabi_dmul+0x278>
    2bd8:	2180      	movs	r1, #128	; 0x80
    2bda:	0249      	lsls	r1, r1, #9
    2bdc:	4689      	mov	r9, r1
    2bde:	444f      	add	r7, r9
    2be0:	0c01      	lsrs	r1, r0, #16
    2be2:	4689      	mov	r9, r1
    2be4:	0039      	movs	r1, r7
    2be6:	4449      	add	r1, r9
    2be8:	9102      	str	r1, [sp, #8]
    2bea:	4641      	mov	r1, r8
    2bec:	040f      	lsls	r7, r1, #16
    2bee:	9904      	ldr	r1, [sp, #16]
    2bf0:	0c3f      	lsrs	r7, r7, #16
    2bf2:	4688      	mov	r8, r1
    2bf4:	0400      	lsls	r0, r0, #16
    2bf6:	19c0      	adds	r0, r0, r7
    2bf8:	4480      	add	r8, r0
    2bfa:	4641      	mov	r1, r8
    2bfc:	9104      	str	r1, [sp, #16]
    2bfe:	4659      	mov	r1, fp
    2c00:	0c0f      	lsrs	r7, r1, #16
    2c02:	0409      	lsls	r1, r1, #16
    2c04:	0c09      	lsrs	r1, r1, #16
    2c06:	4688      	mov	r8, r1
    2c08:	4359      	muls	r1, r3
    2c0a:	468a      	mov	sl, r1
    2c0c:	0039      	movs	r1, r7
    2c0e:	4351      	muls	r1, r2
    2c10:	4689      	mov	r9, r1
    2c12:	4641      	mov	r1, r8
    2c14:	434a      	muls	r2, r1
    2c16:	4651      	mov	r1, sl
    2c18:	0c09      	lsrs	r1, r1, #16
    2c1a:	468b      	mov	fp, r1
    2c1c:	437b      	muls	r3, r7
    2c1e:	18d2      	adds	r2, r2, r3
    2c20:	445a      	add	r2, fp
    2c22:	4293      	cmp	r3, r2
    2c24:	d903      	bls.n	2c2e <__aeabi_dmul+0x2c6>
    2c26:	2380      	movs	r3, #128	; 0x80
    2c28:	025b      	lsls	r3, r3, #9
    2c2a:	469b      	mov	fp, r3
    2c2c:	44d9      	add	r9, fp
    2c2e:	4651      	mov	r1, sl
    2c30:	0409      	lsls	r1, r1, #16
    2c32:	0c09      	lsrs	r1, r1, #16
    2c34:	468a      	mov	sl, r1
    2c36:	4641      	mov	r1, r8
    2c38:	4361      	muls	r1, r4
    2c3a:	437c      	muls	r4, r7
    2c3c:	0c13      	lsrs	r3, r2, #16
    2c3e:	0412      	lsls	r2, r2, #16
    2c40:	444b      	add	r3, r9
    2c42:	4452      	add	r2, sl
    2c44:	46a1      	mov	r9, r4
    2c46:	468a      	mov	sl, r1
    2c48:	003c      	movs	r4, r7
    2c4a:	4641      	mov	r1, r8
    2c4c:	436c      	muls	r4, r5
    2c4e:	434d      	muls	r5, r1
    2c50:	4651      	mov	r1, sl
    2c52:	444d      	add	r5, r9
    2c54:	0c0f      	lsrs	r7, r1, #16
    2c56:	197d      	adds	r5, r7, r5
    2c58:	45a9      	cmp	r9, r5
    2c5a:	d903      	bls.n	2c64 <__aeabi_dmul+0x2fc>
    2c5c:	2180      	movs	r1, #128	; 0x80
    2c5e:	0249      	lsls	r1, r1, #9
    2c60:	4688      	mov	r8, r1
    2c62:	4444      	add	r4, r8
    2c64:	9f04      	ldr	r7, [sp, #16]
    2c66:	9903      	ldr	r1, [sp, #12]
    2c68:	46b8      	mov	r8, r7
    2c6a:	4441      	add	r1, r8
    2c6c:	468b      	mov	fp, r1
    2c6e:	4583      	cmp	fp, r0
    2c70:	4180      	sbcs	r0, r0
    2c72:	4241      	negs	r1, r0
    2c74:	4688      	mov	r8, r1
    2c76:	4651      	mov	r1, sl
    2c78:	0408      	lsls	r0, r1, #16
    2c7a:	042f      	lsls	r7, r5, #16
    2c7c:	0c00      	lsrs	r0, r0, #16
    2c7e:	183f      	adds	r7, r7, r0
    2c80:	4658      	mov	r0, fp
    2c82:	9902      	ldr	r1, [sp, #8]
    2c84:	1810      	adds	r0, r2, r0
    2c86:	4689      	mov	r9, r1
    2c88:	4290      	cmp	r0, r2
    2c8a:	4192      	sbcs	r2, r2
    2c8c:	444f      	add	r7, r9
    2c8e:	46ba      	mov	sl, r7
    2c90:	4252      	negs	r2, r2
    2c92:	4699      	mov	r9, r3
    2c94:	4693      	mov	fp, r2
    2c96:	44c2      	add	sl, r8
    2c98:	44d1      	add	r9, sl
    2c9a:	44cb      	add	fp, r9
    2c9c:	428f      	cmp	r7, r1
    2c9e:	41bf      	sbcs	r7, r7
    2ca0:	45c2      	cmp	sl, r8
    2ca2:	4189      	sbcs	r1, r1
    2ca4:	4599      	cmp	r9, r3
    2ca6:	419b      	sbcs	r3, r3
    2ca8:	4593      	cmp	fp, r2
    2caa:	4192      	sbcs	r2, r2
    2cac:	427f      	negs	r7, r7
    2cae:	4249      	negs	r1, r1
    2cb0:	0c2d      	lsrs	r5, r5, #16
    2cb2:	4252      	negs	r2, r2
    2cb4:	430f      	orrs	r7, r1
    2cb6:	425b      	negs	r3, r3
    2cb8:	4313      	orrs	r3, r2
    2cba:	197f      	adds	r7, r7, r5
    2cbc:	18ff      	adds	r7, r7, r3
    2cbe:	465b      	mov	r3, fp
    2cc0:	193c      	adds	r4, r7, r4
    2cc2:	0ddb      	lsrs	r3, r3, #23
    2cc4:	9a05      	ldr	r2, [sp, #20]
    2cc6:	0264      	lsls	r4, r4, #9
    2cc8:	431c      	orrs	r4, r3
    2cca:	0243      	lsls	r3, r0, #9
    2ccc:	4313      	orrs	r3, r2
    2cce:	1e5d      	subs	r5, r3, #1
    2cd0:	41ab      	sbcs	r3, r5
    2cd2:	465a      	mov	r2, fp
    2cd4:	0dc0      	lsrs	r0, r0, #23
    2cd6:	4303      	orrs	r3, r0
    2cd8:	0252      	lsls	r2, r2, #9
    2cda:	4313      	orrs	r3, r2
    2cdc:	01e2      	lsls	r2, r4, #7
    2cde:	d556      	bpl.n	2d8e <__aeabi_dmul+0x426>
    2ce0:	2001      	movs	r0, #1
    2ce2:	085a      	lsrs	r2, r3, #1
    2ce4:	4003      	ands	r3, r0
    2ce6:	4313      	orrs	r3, r2
    2ce8:	07e2      	lsls	r2, r4, #31
    2cea:	4313      	orrs	r3, r2
    2cec:	0864      	lsrs	r4, r4, #1
    2cee:	485a      	ldr	r0, [pc, #360]	; (2e58 <__aeabi_dmul+0x4f0>)
    2cf0:	4460      	add	r0, ip
    2cf2:	2800      	cmp	r0, #0
    2cf4:	dd4d      	ble.n	2d92 <__aeabi_dmul+0x42a>
    2cf6:	075a      	lsls	r2, r3, #29
    2cf8:	d009      	beq.n	2d0e <__aeabi_dmul+0x3a6>
    2cfa:	220f      	movs	r2, #15
    2cfc:	401a      	ands	r2, r3
    2cfe:	2a04      	cmp	r2, #4
    2d00:	d005      	beq.n	2d0e <__aeabi_dmul+0x3a6>
    2d02:	1d1a      	adds	r2, r3, #4
    2d04:	429a      	cmp	r2, r3
    2d06:	419b      	sbcs	r3, r3
    2d08:	425b      	negs	r3, r3
    2d0a:	18e4      	adds	r4, r4, r3
    2d0c:	0013      	movs	r3, r2
    2d0e:	01e2      	lsls	r2, r4, #7
    2d10:	d504      	bpl.n	2d1c <__aeabi_dmul+0x3b4>
    2d12:	2080      	movs	r0, #128	; 0x80
    2d14:	4a51      	ldr	r2, [pc, #324]	; (2e5c <__aeabi_dmul+0x4f4>)
    2d16:	00c0      	lsls	r0, r0, #3
    2d18:	4014      	ands	r4, r2
    2d1a:	4460      	add	r0, ip
    2d1c:	4a50      	ldr	r2, [pc, #320]	; (2e60 <__aeabi_dmul+0x4f8>)
    2d1e:	4290      	cmp	r0, r2
    2d20:	dd00      	ble.n	2d24 <__aeabi_dmul+0x3bc>
    2d22:	e6e3      	b.n	2aec <__aeabi_dmul+0x184>
    2d24:	2501      	movs	r5, #1
    2d26:	08db      	lsrs	r3, r3, #3
    2d28:	0762      	lsls	r2, r4, #29
    2d2a:	431a      	orrs	r2, r3
    2d2c:	0264      	lsls	r4, r4, #9
    2d2e:	9b01      	ldr	r3, [sp, #4]
    2d30:	4691      	mov	r9, r2
    2d32:	0b22      	lsrs	r2, r4, #12
    2d34:	0544      	lsls	r4, r0, #21
    2d36:	0d64      	lsrs	r4, r4, #21
    2d38:	401d      	ands	r5, r3
    2d3a:	e67c      	b.n	2a36 <__aeabi_dmul+0xce>
    2d3c:	2280      	movs	r2, #128	; 0x80
    2d3e:	4659      	mov	r1, fp
    2d40:	0312      	lsls	r2, r2, #12
    2d42:	4211      	tst	r1, r2
    2d44:	d008      	beq.n	2d58 <__aeabi_dmul+0x3f0>
    2d46:	4214      	tst	r4, r2
    2d48:	d106      	bne.n	2d58 <__aeabi_dmul+0x3f0>
    2d4a:	4322      	orrs	r2, r4
    2d4c:	0312      	lsls	r2, r2, #12
    2d4e:	0b12      	lsrs	r2, r2, #12
    2d50:	4645      	mov	r5, r8
    2d52:	4699      	mov	r9, r3
    2d54:	4c43      	ldr	r4, [pc, #268]	; (2e64 <__aeabi_dmul+0x4fc>)
    2d56:	e66e      	b.n	2a36 <__aeabi_dmul+0xce>
    2d58:	465b      	mov	r3, fp
    2d5a:	431a      	orrs	r2, r3
    2d5c:	0312      	lsls	r2, r2, #12
    2d5e:	0b12      	lsrs	r2, r2, #12
    2d60:	4c40      	ldr	r4, [pc, #256]	; (2e64 <__aeabi_dmul+0x4fc>)
    2d62:	e668      	b.n	2a36 <__aeabi_dmul+0xce>
    2d64:	0003      	movs	r3, r0
    2d66:	4654      	mov	r4, sl
    2d68:	3b28      	subs	r3, #40	; 0x28
    2d6a:	409c      	lsls	r4, r3
    2d6c:	2300      	movs	r3, #0
    2d6e:	e6b9      	b.n	2ae4 <__aeabi_dmul+0x17c>
    2d70:	f000 fc3a 	bl	35e8 <__clzsi2>
    2d74:	3020      	adds	r0, #32
    2d76:	e6a6      	b.n	2ac6 <__aeabi_dmul+0x15e>
    2d78:	0003      	movs	r3, r0
    2d7a:	3b28      	subs	r3, #40	; 0x28
    2d7c:	409f      	lsls	r7, r3
    2d7e:	2300      	movs	r3, #0
    2d80:	46bb      	mov	fp, r7
    2d82:	4699      	mov	r9, r3
    2d84:	e68a      	b.n	2a9c <__aeabi_dmul+0x134>
    2d86:	f000 fc2f 	bl	35e8 <__clzsi2>
    2d8a:	3020      	adds	r0, #32
    2d8c:	e674      	b.n	2a78 <__aeabi_dmul+0x110>
    2d8e:	46b4      	mov	ip, r6
    2d90:	e7ad      	b.n	2cee <__aeabi_dmul+0x386>
    2d92:	2501      	movs	r5, #1
    2d94:	1a2a      	subs	r2, r5, r0
    2d96:	2a38      	cmp	r2, #56	; 0x38
    2d98:	dd06      	ble.n	2da8 <__aeabi_dmul+0x440>
    2d9a:	9b01      	ldr	r3, [sp, #4]
    2d9c:	2400      	movs	r4, #0
    2d9e:	401d      	ands	r5, r3
    2da0:	2300      	movs	r3, #0
    2da2:	2200      	movs	r2, #0
    2da4:	4699      	mov	r9, r3
    2da6:	e646      	b.n	2a36 <__aeabi_dmul+0xce>
    2da8:	2a1f      	cmp	r2, #31
    2daa:	dc21      	bgt.n	2df0 <__aeabi_dmul+0x488>
    2dac:	2520      	movs	r5, #32
    2dae:	0020      	movs	r0, r4
    2db0:	1aad      	subs	r5, r5, r2
    2db2:	001e      	movs	r6, r3
    2db4:	40ab      	lsls	r3, r5
    2db6:	40a8      	lsls	r0, r5
    2db8:	40d6      	lsrs	r6, r2
    2dba:	1e5d      	subs	r5, r3, #1
    2dbc:	41ab      	sbcs	r3, r5
    2dbe:	4330      	orrs	r0, r6
    2dc0:	4318      	orrs	r0, r3
    2dc2:	40d4      	lsrs	r4, r2
    2dc4:	0743      	lsls	r3, r0, #29
    2dc6:	d009      	beq.n	2ddc <__aeabi_dmul+0x474>
    2dc8:	230f      	movs	r3, #15
    2dca:	4003      	ands	r3, r0
    2dcc:	2b04      	cmp	r3, #4
    2dce:	d005      	beq.n	2ddc <__aeabi_dmul+0x474>
    2dd0:	0003      	movs	r3, r0
    2dd2:	1d18      	adds	r0, r3, #4
    2dd4:	4298      	cmp	r0, r3
    2dd6:	419b      	sbcs	r3, r3
    2dd8:	425b      	negs	r3, r3
    2dda:	18e4      	adds	r4, r4, r3
    2ddc:	0223      	lsls	r3, r4, #8
    2dde:	d521      	bpl.n	2e24 <__aeabi_dmul+0x4bc>
    2de0:	2501      	movs	r5, #1
    2de2:	9b01      	ldr	r3, [sp, #4]
    2de4:	2401      	movs	r4, #1
    2de6:	401d      	ands	r5, r3
    2de8:	2300      	movs	r3, #0
    2dea:	2200      	movs	r2, #0
    2dec:	4699      	mov	r9, r3
    2dee:	e622      	b.n	2a36 <__aeabi_dmul+0xce>
    2df0:	251f      	movs	r5, #31
    2df2:	0021      	movs	r1, r4
    2df4:	426d      	negs	r5, r5
    2df6:	1a28      	subs	r0, r5, r0
    2df8:	40c1      	lsrs	r1, r0
    2dfa:	0008      	movs	r0, r1
    2dfc:	2a20      	cmp	r2, #32
    2dfe:	d01d      	beq.n	2e3c <__aeabi_dmul+0x4d4>
    2e00:	355f      	adds	r5, #95	; 0x5f
    2e02:	1aaa      	subs	r2, r5, r2
    2e04:	4094      	lsls	r4, r2
    2e06:	4323      	orrs	r3, r4
    2e08:	1e5c      	subs	r4, r3, #1
    2e0a:	41a3      	sbcs	r3, r4
    2e0c:	2507      	movs	r5, #7
    2e0e:	4303      	orrs	r3, r0
    2e10:	401d      	ands	r5, r3
    2e12:	2200      	movs	r2, #0
    2e14:	2d00      	cmp	r5, #0
    2e16:	d009      	beq.n	2e2c <__aeabi_dmul+0x4c4>
    2e18:	220f      	movs	r2, #15
    2e1a:	2400      	movs	r4, #0
    2e1c:	401a      	ands	r2, r3
    2e1e:	0018      	movs	r0, r3
    2e20:	2a04      	cmp	r2, #4
    2e22:	d1d6      	bne.n	2dd2 <__aeabi_dmul+0x46a>
    2e24:	0003      	movs	r3, r0
    2e26:	0765      	lsls	r5, r4, #29
    2e28:	0264      	lsls	r4, r4, #9
    2e2a:	0b22      	lsrs	r2, r4, #12
    2e2c:	08db      	lsrs	r3, r3, #3
    2e2e:	432b      	orrs	r3, r5
    2e30:	2501      	movs	r5, #1
    2e32:	4699      	mov	r9, r3
    2e34:	9b01      	ldr	r3, [sp, #4]
    2e36:	2400      	movs	r4, #0
    2e38:	401d      	ands	r5, r3
    2e3a:	e5fc      	b.n	2a36 <__aeabi_dmul+0xce>
    2e3c:	2400      	movs	r4, #0
    2e3e:	e7e2      	b.n	2e06 <__aeabi_dmul+0x49e>
    2e40:	2280      	movs	r2, #128	; 0x80
    2e42:	2501      	movs	r5, #1
    2e44:	0312      	lsls	r2, r2, #12
    2e46:	4322      	orrs	r2, r4
    2e48:	9901      	ldr	r1, [sp, #4]
    2e4a:	0312      	lsls	r2, r2, #12
    2e4c:	0b12      	lsrs	r2, r2, #12
    2e4e:	400d      	ands	r5, r1
    2e50:	4699      	mov	r9, r3
    2e52:	4c04      	ldr	r4, [pc, #16]	; (2e64 <__aeabi_dmul+0x4fc>)
    2e54:	e5ef      	b.n	2a36 <__aeabi_dmul+0xce>
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	000003ff 	.word	0x000003ff
    2e5c:	feffffff 	.word	0xfeffffff
    2e60:	000007fe 	.word	0x000007fe
    2e64:	000007ff 	.word	0x000007ff

00002e68 <__aeabi_dsub>:
    2e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e6a:	4646      	mov	r6, r8
    2e6c:	46d6      	mov	lr, sl
    2e6e:	464f      	mov	r7, r9
    2e70:	030c      	lsls	r4, r1, #12
    2e72:	b5c0      	push	{r6, r7, lr}
    2e74:	0fcd      	lsrs	r5, r1, #31
    2e76:	004e      	lsls	r6, r1, #1
    2e78:	0a61      	lsrs	r1, r4, #9
    2e7a:	0f44      	lsrs	r4, r0, #29
    2e7c:	430c      	orrs	r4, r1
    2e7e:	00c1      	lsls	r1, r0, #3
    2e80:	0058      	lsls	r0, r3, #1
    2e82:	0d40      	lsrs	r0, r0, #21
    2e84:	4684      	mov	ip, r0
    2e86:	468a      	mov	sl, r1
    2e88:	000f      	movs	r7, r1
    2e8a:	0319      	lsls	r1, r3, #12
    2e8c:	0f50      	lsrs	r0, r2, #29
    2e8e:	0a49      	lsrs	r1, r1, #9
    2e90:	4301      	orrs	r1, r0
    2e92:	48c6      	ldr	r0, [pc, #792]	; (31ac <__aeabi_dsub+0x344>)
    2e94:	0d76      	lsrs	r6, r6, #21
    2e96:	46a8      	mov	r8, r5
    2e98:	0fdb      	lsrs	r3, r3, #31
    2e9a:	00d2      	lsls	r2, r2, #3
    2e9c:	4584      	cmp	ip, r0
    2e9e:	d100      	bne.n	2ea2 <__aeabi_dsub+0x3a>
    2ea0:	e0d8      	b.n	3054 <__aeabi_dsub+0x1ec>
    2ea2:	2001      	movs	r0, #1
    2ea4:	4043      	eors	r3, r0
    2ea6:	42ab      	cmp	r3, r5
    2ea8:	d100      	bne.n	2eac <__aeabi_dsub+0x44>
    2eaa:	e0a6      	b.n	2ffa <__aeabi_dsub+0x192>
    2eac:	4660      	mov	r0, ip
    2eae:	1a35      	subs	r5, r6, r0
    2eb0:	2d00      	cmp	r5, #0
    2eb2:	dc00      	bgt.n	2eb6 <__aeabi_dsub+0x4e>
    2eb4:	e105      	b.n	30c2 <__aeabi_dsub+0x25a>
    2eb6:	2800      	cmp	r0, #0
    2eb8:	d110      	bne.n	2edc <__aeabi_dsub+0x74>
    2eba:	000b      	movs	r3, r1
    2ebc:	4313      	orrs	r3, r2
    2ebe:	d100      	bne.n	2ec2 <__aeabi_dsub+0x5a>
    2ec0:	e0d7      	b.n	3072 <__aeabi_dsub+0x20a>
    2ec2:	1e6b      	subs	r3, r5, #1
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d000      	beq.n	2eca <__aeabi_dsub+0x62>
    2ec8:	e14b      	b.n	3162 <__aeabi_dsub+0x2fa>
    2eca:	4653      	mov	r3, sl
    2ecc:	1a9f      	subs	r7, r3, r2
    2ece:	45ba      	cmp	sl, r7
    2ed0:	4180      	sbcs	r0, r0
    2ed2:	1a64      	subs	r4, r4, r1
    2ed4:	4240      	negs	r0, r0
    2ed6:	1a24      	subs	r4, r4, r0
    2ed8:	2601      	movs	r6, #1
    2eda:	e01e      	b.n	2f1a <__aeabi_dsub+0xb2>
    2edc:	4bb3      	ldr	r3, [pc, #716]	; (31ac <__aeabi_dsub+0x344>)
    2ede:	429e      	cmp	r6, r3
    2ee0:	d048      	beq.n	2f74 <__aeabi_dsub+0x10c>
    2ee2:	2380      	movs	r3, #128	; 0x80
    2ee4:	041b      	lsls	r3, r3, #16
    2ee6:	4319      	orrs	r1, r3
    2ee8:	2d38      	cmp	r5, #56	; 0x38
    2eea:	dd00      	ble.n	2eee <__aeabi_dsub+0x86>
    2eec:	e119      	b.n	3122 <__aeabi_dsub+0x2ba>
    2eee:	2d1f      	cmp	r5, #31
    2ef0:	dd00      	ble.n	2ef4 <__aeabi_dsub+0x8c>
    2ef2:	e14c      	b.n	318e <__aeabi_dsub+0x326>
    2ef4:	2320      	movs	r3, #32
    2ef6:	000f      	movs	r7, r1
    2ef8:	1b5b      	subs	r3, r3, r5
    2efa:	0010      	movs	r0, r2
    2efc:	409a      	lsls	r2, r3
    2efe:	409f      	lsls	r7, r3
    2f00:	40e8      	lsrs	r0, r5
    2f02:	1e53      	subs	r3, r2, #1
    2f04:	419a      	sbcs	r2, r3
    2f06:	40e9      	lsrs	r1, r5
    2f08:	4307      	orrs	r7, r0
    2f0a:	4317      	orrs	r7, r2
    2f0c:	4653      	mov	r3, sl
    2f0e:	1bdf      	subs	r7, r3, r7
    2f10:	1a61      	subs	r1, r4, r1
    2f12:	45ba      	cmp	sl, r7
    2f14:	41a4      	sbcs	r4, r4
    2f16:	4264      	negs	r4, r4
    2f18:	1b0c      	subs	r4, r1, r4
    2f1a:	0223      	lsls	r3, r4, #8
    2f1c:	d400      	bmi.n	2f20 <__aeabi_dsub+0xb8>
    2f1e:	e0c5      	b.n	30ac <__aeabi_dsub+0x244>
    2f20:	0264      	lsls	r4, r4, #9
    2f22:	0a65      	lsrs	r5, r4, #9
    2f24:	2d00      	cmp	r5, #0
    2f26:	d100      	bne.n	2f2a <__aeabi_dsub+0xc2>
    2f28:	e0f6      	b.n	3118 <__aeabi_dsub+0x2b0>
    2f2a:	0028      	movs	r0, r5
    2f2c:	f000 fb5c 	bl	35e8 <__clzsi2>
    2f30:	0003      	movs	r3, r0
    2f32:	3b08      	subs	r3, #8
    2f34:	2b1f      	cmp	r3, #31
    2f36:	dd00      	ble.n	2f3a <__aeabi_dsub+0xd2>
    2f38:	e0e9      	b.n	310e <__aeabi_dsub+0x2a6>
    2f3a:	2220      	movs	r2, #32
    2f3c:	003c      	movs	r4, r7
    2f3e:	1ad2      	subs	r2, r2, r3
    2f40:	409d      	lsls	r5, r3
    2f42:	40d4      	lsrs	r4, r2
    2f44:	409f      	lsls	r7, r3
    2f46:	4325      	orrs	r5, r4
    2f48:	429e      	cmp	r6, r3
    2f4a:	dd00      	ble.n	2f4e <__aeabi_dsub+0xe6>
    2f4c:	e0db      	b.n	3106 <__aeabi_dsub+0x29e>
    2f4e:	1b9e      	subs	r6, r3, r6
    2f50:	1c73      	adds	r3, r6, #1
    2f52:	2b1f      	cmp	r3, #31
    2f54:	dd00      	ble.n	2f58 <__aeabi_dsub+0xf0>
    2f56:	e10a      	b.n	316e <__aeabi_dsub+0x306>
    2f58:	2220      	movs	r2, #32
    2f5a:	0038      	movs	r0, r7
    2f5c:	1ad2      	subs	r2, r2, r3
    2f5e:	0029      	movs	r1, r5
    2f60:	4097      	lsls	r7, r2
    2f62:	002c      	movs	r4, r5
    2f64:	4091      	lsls	r1, r2
    2f66:	40d8      	lsrs	r0, r3
    2f68:	1e7a      	subs	r2, r7, #1
    2f6a:	4197      	sbcs	r7, r2
    2f6c:	40dc      	lsrs	r4, r3
    2f6e:	2600      	movs	r6, #0
    2f70:	4301      	orrs	r1, r0
    2f72:	430f      	orrs	r7, r1
    2f74:	077b      	lsls	r3, r7, #29
    2f76:	d009      	beq.n	2f8c <__aeabi_dsub+0x124>
    2f78:	230f      	movs	r3, #15
    2f7a:	403b      	ands	r3, r7
    2f7c:	2b04      	cmp	r3, #4
    2f7e:	d005      	beq.n	2f8c <__aeabi_dsub+0x124>
    2f80:	1d3b      	adds	r3, r7, #4
    2f82:	42bb      	cmp	r3, r7
    2f84:	41bf      	sbcs	r7, r7
    2f86:	427f      	negs	r7, r7
    2f88:	19e4      	adds	r4, r4, r7
    2f8a:	001f      	movs	r7, r3
    2f8c:	0223      	lsls	r3, r4, #8
    2f8e:	d525      	bpl.n	2fdc <__aeabi_dsub+0x174>
    2f90:	4b86      	ldr	r3, [pc, #536]	; (31ac <__aeabi_dsub+0x344>)
    2f92:	3601      	adds	r6, #1
    2f94:	429e      	cmp	r6, r3
    2f96:	d100      	bne.n	2f9a <__aeabi_dsub+0x132>
    2f98:	e0af      	b.n	30fa <__aeabi_dsub+0x292>
    2f9a:	4b85      	ldr	r3, [pc, #532]	; (31b0 <__aeabi_dsub+0x348>)
    2f9c:	2501      	movs	r5, #1
    2f9e:	401c      	ands	r4, r3
    2fa0:	4643      	mov	r3, r8
    2fa2:	0762      	lsls	r2, r4, #29
    2fa4:	08ff      	lsrs	r7, r7, #3
    2fa6:	0264      	lsls	r4, r4, #9
    2fa8:	0576      	lsls	r6, r6, #21
    2faa:	4317      	orrs	r7, r2
    2fac:	0b24      	lsrs	r4, r4, #12
    2fae:	0d76      	lsrs	r6, r6, #21
    2fb0:	401d      	ands	r5, r3
    2fb2:	2100      	movs	r1, #0
    2fb4:	0324      	lsls	r4, r4, #12
    2fb6:	0b23      	lsrs	r3, r4, #12
    2fb8:	0d0c      	lsrs	r4, r1, #20
    2fba:	4a7e      	ldr	r2, [pc, #504]	; (31b4 <__aeabi_dsub+0x34c>)
    2fbc:	0524      	lsls	r4, r4, #20
    2fbe:	431c      	orrs	r4, r3
    2fc0:	4014      	ands	r4, r2
    2fc2:	0533      	lsls	r3, r6, #20
    2fc4:	4323      	orrs	r3, r4
    2fc6:	005b      	lsls	r3, r3, #1
    2fc8:	07ed      	lsls	r5, r5, #31
    2fca:	085b      	lsrs	r3, r3, #1
    2fcc:	432b      	orrs	r3, r5
    2fce:	0038      	movs	r0, r7
    2fd0:	0019      	movs	r1, r3
    2fd2:	bc1c      	pop	{r2, r3, r4}
    2fd4:	4690      	mov	r8, r2
    2fd6:	4699      	mov	r9, r3
    2fd8:	46a2      	mov	sl, r4
    2fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fdc:	2501      	movs	r5, #1
    2fde:	4643      	mov	r3, r8
    2fe0:	0762      	lsls	r2, r4, #29
    2fe2:	08ff      	lsrs	r7, r7, #3
    2fe4:	4317      	orrs	r7, r2
    2fe6:	08e4      	lsrs	r4, r4, #3
    2fe8:	401d      	ands	r5, r3
    2fea:	4b70      	ldr	r3, [pc, #448]	; (31ac <__aeabi_dsub+0x344>)
    2fec:	429e      	cmp	r6, r3
    2fee:	d036      	beq.n	305e <__aeabi_dsub+0x1f6>
    2ff0:	0324      	lsls	r4, r4, #12
    2ff2:	0576      	lsls	r6, r6, #21
    2ff4:	0b24      	lsrs	r4, r4, #12
    2ff6:	0d76      	lsrs	r6, r6, #21
    2ff8:	e7db      	b.n	2fb2 <__aeabi_dsub+0x14a>
    2ffa:	4663      	mov	r3, ip
    2ffc:	1af3      	subs	r3, r6, r3
    2ffe:	2b00      	cmp	r3, #0
    3000:	dc00      	bgt.n	3004 <__aeabi_dsub+0x19c>
    3002:	e094      	b.n	312e <__aeabi_dsub+0x2c6>
    3004:	4660      	mov	r0, ip
    3006:	2800      	cmp	r0, #0
    3008:	d035      	beq.n	3076 <__aeabi_dsub+0x20e>
    300a:	4868      	ldr	r0, [pc, #416]	; (31ac <__aeabi_dsub+0x344>)
    300c:	4286      	cmp	r6, r0
    300e:	d0b1      	beq.n	2f74 <__aeabi_dsub+0x10c>
    3010:	2780      	movs	r7, #128	; 0x80
    3012:	043f      	lsls	r7, r7, #16
    3014:	4339      	orrs	r1, r7
    3016:	2b38      	cmp	r3, #56	; 0x38
    3018:	dc00      	bgt.n	301c <__aeabi_dsub+0x1b4>
    301a:	e0fd      	b.n	3218 <__aeabi_dsub+0x3b0>
    301c:	430a      	orrs	r2, r1
    301e:	0017      	movs	r7, r2
    3020:	2100      	movs	r1, #0
    3022:	1e7a      	subs	r2, r7, #1
    3024:	4197      	sbcs	r7, r2
    3026:	4457      	add	r7, sl
    3028:	4557      	cmp	r7, sl
    302a:	4180      	sbcs	r0, r0
    302c:	1909      	adds	r1, r1, r4
    302e:	4244      	negs	r4, r0
    3030:	190c      	adds	r4, r1, r4
    3032:	0223      	lsls	r3, r4, #8
    3034:	d53a      	bpl.n	30ac <__aeabi_dsub+0x244>
    3036:	4b5d      	ldr	r3, [pc, #372]	; (31ac <__aeabi_dsub+0x344>)
    3038:	3601      	adds	r6, #1
    303a:	429e      	cmp	r6, r3
    303c:	d100      	bne.n	3040 <__aeabi_dsub+0x1d8>
    303e:	e14b      	b.n	32d8 <__aeabi_dsub+0x470>
    3040:	2201      	movs	r2, #1
    3042:	4b5b      	ldr	r3, [pc, #364]	; (31b0 <__aeabi_dsub+0x348>)
    3044:	401c      	ands	r4, r3
    3046:	087b      	lsrs	r3, r7, #1
    3048:	4017      	ands	r7, r2
    304a:	431f      	orrs	r7, r3
    304c:	07e2      	lsls	r2, r4, #31
    304e:	4317      	orrs	r7, r2
    3050:	0864      	lsrs	r4, r4, #1
    3052:	e78f      	b.n	2f74 <__aeabi_dsub+0x10c>
    3054:	0008      	movs	r0, r1
    3056:	4310      	orrs	r0, r2
    3058:	d000      	beq.n	305c <__aeabi_dsub+0x1f4>
    305a:	e724      	b.n	2ea6 <__aeabi_dsub+0x3e>
    305c:	e721      	b.n	2ea2 <__aeabi_dsub+0x3a>
    305e:	0023      	movs	r3, r4
    3060:	433b      	orrs	r3, r7
    3062:	d100      	bne.n	3066 <__aeabi_dsub+0x1fe>
    3064:	e1b9      	b.n	33da <__aeabi_dsub+0x572>
    3066:	2280      	movs	r2, #128	; 0x80
    3068:	0312      	lsls	r2, r2, #12
    306a:	4314      	orrs	r4, r2
    306c:	0324      	lsls	r4, r4, #12
    306e:	0b24      	lsrs	r4, r4, #12
    3070:	e79f      	b.n	2fb2 <__aeabi_dsub+0x14a>
    3072:	002e      	movs	r6, r5
    3074:	e77e      	b.n	2f74 <__aeabi_dsub+0x10c>
    3076:	0008      	movs	r0, r1
    3078:	4310      	orrs	r0, r2
    307a:	d100      	bne.n	307e <__aeabi_dsub+0x216>
    307c:	e0ca      	b.n	3214 <__aeabi_dsub+0x3ac>
    307e:	1e58      	subs	r0, r3, #1
    3080:	4684      	mov	ip, r0
    3082:	2800      	cmp	r0, #0
    3084:	d000      	beq.n	3088 <__aeabi_dsub+0x220>
    3086:	e0e7      	b.n	3258 <__aeabi_dsub+0x3f0>
    3088:	4452      	add	r2, sl
    308a:	4552      	cmp	r2, sl
    308c:	4180      	sbcs	r0, r0
    308e:	1864      	adds	r4, r4, r1
    3090:	4240      	negs	r0, r0
    3092:	1824      	adds	r4, r4, r0
    3094:	0017      	movs	r7, r2
    3096:	2601      	movs	r6, #1
    3098:	0223      	lsls	r3, r4, #8
    309a:	d507      	bpl.n	30ac <__aeabi_dsub+0x244>
    309c:	2602      	movs	r6, #2
    309e:	e7cf      	b.n	3040 <__aeabi_dsub+0x1d8>
    30a0:	4664      	mov	r4, ip
    30a2:	432c      	orrs	r4, r5
    30a4:	d100      	bne.n	30a8 <__aeabi_dsub+0x240>
    30a6:	e1b3      	b.n	3410 <__aeabi_dsub+0x5a8>
    30a8:	002c      	movs	r4, r5
    30aa:	4667      	mov	r7, ip
    30ac:	077b      	lsls	r3, r7, #29
    30ae:	d000      	beq.n	30b2 <__aeabi_dsub+0x24a>
    30b0:	e762      	b.n	2f78 <__aeabi_dsub+0x110>
    30b2:	0763      	lsls	r3, r4, #29
    30b4:	08ff      	lsrs	r7, r7, #3
    30b6:	431f      	orrs	r7, r3
    30b8:	2501      	movs	r5, #1
    30ba:	4643      	mov	r3, r8
    30bc:	08e4      	lsrs	r4, r4, #3
    30be:	401d      	ands	r5, r3
    30c0:	e793      	b.n	2fea <__aeabi_dsub+0x182>
    30c2:	2d00      	cmp	r5, #0
    30c4:	d178      	bne.n	31b8 <__aeabi_dsub+0x350>
    30c6:	1c75      	adds	r5, r6, #1
    30c8:	056d      	lsls	r5, r5, #21
    30ca:	0d6d      	lsrs	r5, r5, #21
    30cc:	2d01      	cmp	r5, #1
    30ce:	dc00      	bgt.n	30d2 <__aeabi_dsub+0x26a>
    30d0:	e0f2      	b.n	32b8 <__aeabi_dsub+0x450>
    30d2:	4650      	mov	r0, sl
    30d4:	1a80      	subs	r0, r0, r2
    30d6:	4582      	cmp	sl, r0
    30d8:	41bf      	sbcs	r7, r7
    30da:	1a65      	subs	r5, r4, r1
    30dc:	427f      	negs	r7, r7
    30de:	1bed      	subs	r5, r5, r7
    30e0:	4684      	mov	ip, r0
    30e2:	0228      	lsls	r0, r5, #8
    30e4:	d400      	bmi.n	30e8 <__aeabi_dsub+0x280>
    30e6:	e08c      	b.n	3202 <__aeabi_dsub+0x39a>
    30e8:	4650      	mov	r0, sl
    30ea:	1a17      	subs	r7, r2, r0
    30ec:	42ba      	cmp	r2, r7
    30ee:	4192      	sbcs	r2, r2
    30f0:	1b0c      	subs	r4, r1, r4
    30f2:	4255      	negs	r5, r2
    30f4:	1b65      	subs	r5, r4, r5
    30f6:	4698      	mov	r8, r3
    30f8:	e714      	b.n	2f24 <__aeabi_dsub+0xbc>
    30fa:	2501      	movs	r5, #1
    30fc:	4643      	mov	r3, r8
    30fe:	2400      	movs	r4, #0
    3100:	401d      	ands	r5, r3
    3102:	2700      	movs	r7, #0
    3104:	e755      	b.n	2fb2 <__aeabi_dsub+0x14a>
    3106:	4c2a      	ldr	r4, [pc, #168]	; (31b0 <__aeabi_dsub+0x348>)
    3108:	1af6      	subs	r6, r6, r3
    310a:	402c      	ands	r4, r5
    310c:	e732      	b.n	2f74 <__aeabi_dsub+0x10c>
    310e:	003d      	movs	r5, r7
    3110:	3828      	subs	r0, #40	; 0x28
    3112:	4085      	lsls	r5, r0
    3114:	2700      	movs	r7, #0
    3116:	e717      	b.n	2f48 <__aeabi_dsub+0xe0>
    3118:	0038      	movs	r0, r7
    311a:	f000 fa65 	bl	35e8 <__clzsi2>
    311e:	3020      	adds	r0, #32
    3120:	e706      	b.n	2f30 <__aeabi_dsub+0xc8>
    3122:	430a      	orrs	r2, r1
    3124:	0017      	movs	r7, r2
    3126:	2100      	movs	r1, #0
    3128:	1e7a      	subs	r2, r7, #1
    312a:	4197      	sbcs	r7, r2
    312c:	e6ee      	b.n	2f0c <__aeabi_dsub+0xa4>
    312e:	2b00      	cmp	r3, #0
    3130:	d000      	beq.n	3134 <__aeabi_dsub+0x2cc>
    3132:	e0e5      	b.n	3300 <__aeabi_dsub+0x498>
    3134:	1c73      	adds	r3, r6, #1
    3136:	469c      	mov	ip, r3
    3138:	055b      	lsls	r3, r3, #21
    313a:	0d5b      	lsrs	r3, r3, #21
    313c:	2b01      	cmp	r3, #1
    313e:	dc00      	bgt.n	3142 <__aeabi_dsub+0x2da>
    3140:	e09f      	b.n	3282 <__aeabi_dsub+0x41a>
    3142:	4b1a      	ldr	r3, [pc, #104]	; (31ac <__aeabi_dsub+0x344>)
    3144:	459c      	cmp	ip, r3
    3146:	d100      	bne.n	314a <__aeabi_dsub+0x2e2>
    3148:	e0c5      	b.n	32d6 <__aeabi_dsub+0x46e>
    314a:	4452      	add	r2, sl
    314c:	4552      	cmp	r2, sl
    314e:	4180      	sbcs	r0, r0
    3150:	1864      	adds	r4, r4, r1
    3152:	4240      	negs	r0, r0
    3154:	1824      	adds	r4, r4, r0
    3156:	07e7      	lsls	r7, r4, #31
    3158:	0852      	lsrs	r2, r2, #1
    315a:	4317      	orrs	r7, r2
    315c:	0864      	lsrs	r4, r4, #1
    315e:	4666      	mov	r6, ip
    3160:	e708      	b.n	2f74 <__aeabi_dsub+0x10c>
    3162:	4812      	ldr	r0, [pc, #72]	; (31ac <__aeabi_dsub+0x344>)
    3164:	4285      	cmp	r5, r0
    3166:	d100      	bne.n	316a <__aeabi_dsub+0x302>
    3168:	e085      	b.n	3276 <__aeabi_dsub+0x40e>
    316a:	001d      	movs	r5, r3
    316c:	e6bc      	b.n	2ee8 <__aeabi_dsub+0x80>
    316e:	0029      	movs	r1, r5
    3170:	3e1f      	subs	r6, #31
    3172:	40f1      	lsrs	r1, r6
    3174:	2b20      	cmp	r3, #32
    3176:	d100      	bne.n	317a <__aeabi_dsub+0x312>
    3178:	e07f      	b.n	327a <__aeabi_dsub+0x412>
    317a:	2240      	movs	r2, #64	; 0x40
    317c:	1ad3      	subs	r3, r2, r3
    317e:	409d      	lsls	r5, r3
    3180:	432f      	orrs	r7, r5
    3182:	1e7d      	subs	r5, r7, #1
    3184:	41af      	sbcs	r7, r5
    3186:	2400      	movs	r4, #0
    3188:	430f      	orrs	r7, r1
    318a:	2600      	movs	r6, #0
    318c:	e78e      	b.n	30ac <__aeabi_dsub+0x244>
    318e:	002b      	movs	r3, r5
    3190:	000f      	movs	r7, r1
    3192:	3b20      	subs	r3, #32
    3194:	40df      	lsrs	r7, r3
    3196:	2d20      	cmp	r5, #32
    3198:	d071      	beq.n	327e <__aeabi_dsub+0x416>
    319a:	2340      	movs	r3, #64	; 0x40
    319c:	1b5d      	subs	r5, r3, r5
    319e:	40a9      	lsls	r1, r5
    31a0:	430a      	orrs	r2, r1
    31a2:	1e51      	subs	r1, r2, #1
    31a4:	418a      	sbcs	r2, r1
    31a6:	2100      	movs	r1, #0
    31a8:	4317      	orrs	r7, r2
    31aa:	e6af      	b.n	2f0c <__aeabi_dsub+0xa4>
    31ac:	000007ff 	.word	0x000007ff
    31b0:	ff7fffff 	.word	0xff7fffff
    31b4:	800fffff 	.word	0x800fffff
    31b8:	2e00      	cmp	r6, #0
    31ba:	d03e      	beq.n	323a <__aeabi_dsub+0x3d2>
    31bc:	4eb3      	ldr	r6, [pc, #716]	; (348c <__aeabi_dsub+0x624>)
    31be:	45b4      	cmp	ip, r6
    31c0:	d045      	beq.n	324e <__aeabi_dsub+0x3e6>
    31c2:	2680      	movs	r6, #128	; 0x80
    31c4:	0436      	lsls	r6, r6, #16
    31c6:	426d      	negs	r5, r5
    31c8:	4334      	orrs	r4, r6
    31ca:	2d38      	cmp	r5, #56	; 0x38
    31cc:	dd00      	ble.n	31d0 <__aeabi_dsub+0x368>
    31ce:	e0a8      	b.n	3322 <__aeabi_dsub+0x4ba>
    31d0:	2d1f      	cmp	r5, #31
    31d2:	dd00      	ble.n	31d6 <__aeabi_dsub+0x36e>
    31d4:	e11f      	b.n	3416 <__aeabi_dsub+0x5ae>
    31d6:	2620      	movs	r6, #32
    31d8:	0027      	movs	r7, r4
    31da:	4650      	mov	r0, sl
    31dc:	1b76      	subs	r6, r6, r5
    31de:	40b7      	lsls	r7, r6
    31e0:	40e8      	lsrs	r0, r5
    31e2:	4307      	orrs	r7, r0
    31e4:	4650      	mov	r0, sl
    31e6:	40b0      	lsls	r0, r6
    31e8:	1e46      	subs	r6, r0, #1
    31ea:	41b0      	sbcs	r0, r6
    31ec:	40ec      	lsrs	r4, r5
    31ee:	4338      	orrs	r0, r7
    31f0:	1a17      	subs	r7, r2, r0
    31f2:	42ba      	cmp	r2, r7
    31f4:	4192      	sbcs	r2, r2
    31f6:	1b0c      	subs	r4, r1, r4
    31f8:	4252      	negs	r2, r2
    31fa:	1aa4      	subs	r4, r4, r2
    31fc:	4666      	mov	r6, ip
    31fe:	4698      	mov	r8, r3
    3200:	e68b      	b.n	2f1a <__aeabi_dsub+0xb2>
    3202:	4664      	mov	r4, ip
    3204:	4667      	mov	r7, ip
    3206:	432c      	orrs	r4, r5
    3208:	d000      	beq.n	320c <__aeabi_dsub+0x3a4>
    320a:	e68b      	b.n	2f24 <__aeabi_dsub+0xbc>
    320c:	2500      	movs	r5, #0
    320e:	2600      	movs	r6, #0
    3210:	2700      	movs	r7, #0
    3212:	e6ea      	b.n	2fea <__aeabi_dsub+0x182>
    3214:	001e      	movs	r6, r3
    3216:	e6ad      	b.n	2f74 <__aeabi_dsub+0x10c>
    3218:	2b1f      	cmp	r3, #31
    321a:	dc60      	bgt.n	32de <__aeabi_dsub+0x476>
    321c:	2720      	movs	r7, #32
    321e:	1af8      	subs	r0, r7, r3
    3220:	000f      	movs	r7, r1
    3222:	4684      	mov	ip, r0
    3224:	4087      	lsls	r7, r0
    3226:	0010      	movs	r0, r2
    3228:	40d8      	lsrs	r0, r3
    322a:	4307      	orrs	r7, r0
    322c:	4660      	mov	r0, ip
    322e:	4082      	lsls	r2, r0
    3230:	1e50      	subs	r0, r2, #1
    3232:	4182      	sbcs	r2, r0
    3234:	40d9      	lsrs	r1, r3
    3236:	4317      	orrs	r7, r2
    3238:	e6f5      	b.n	3026 <__aeabi_dsub+0x1be>
    323a:	0026      	movs	r6, r4
    323c:	4650      	mov	r0, sl
    323e:	4306      	orrs	r6, r0
    3240:	d005      	beq.n	324e <__aeabi_dsub+0x3e6>
    3242:	43ed      	mvns	r5, r5
    3244:	2d00      	cmp	r5, #0
    3246:	d0d3      	beq.n	31f0 <__aeabi_dsub+0x388>
    3248:	4e90      	ldr	r6, [pc, #576]	; (348c <__aeabi_dsub+0x624>)
    324a:	45b4      	cmp	ip, r6
    324c:	d1bd      	bne.n	31ca <__aeabi_dsub+0x362>
    324e:	000c      	movs	r4, r1
    3250:	0017      	movs	r7, r2
    3252:	4666      	mov	r6, ip
    3254:	4698      	mov	r8, r3
    3256:	e68d      	b.n	2f74 <__aeabi_dsub+0x10c>
    3258:	488c      	ldr	r0, [pc, #560]	; (348c <__aeabi_dsub+0x624>)
    325a:	4283      	cmp	r3, r0
    325c:	d00b      	beq.n	3276 <__aeabi_dsub+0x40e>
    325e:	4663      	mov	r3, ip
    3260:	e6d9      	b.n	3016 <__aeabi_dsub+0x1ae>
    3262:	2d00      	cmp	r5, #0
    3264:	d000      	beq.n	3268 <__aeabi_dsub+0x400>
    3266:	e096      	b.n	3396 <__aeabi_dsub+0x52e>
    3268:	0008      	movs	r0, r1
    326a:	4310      	orrs	r0, r2
    326c:	d100      	bne.n	3270 <__aeabi_dsub+0x408>
    326e:	e0e2      	b.n	3436 <__aeabi_dsub+0x5ce>
    3270:	000c      	movs	r4, r1
    3272:	0017      	movs	r7, r2
    3274:	4698      	mov	r8, r3
    3276:	4e85      	ldr	r6, [pc, #532]	; (348c <__aeabi_dsub+0x624>)
    3278:	e67c      	b.n	2f74 <__aeabi_dsub+0x10c>
    327a:	2500      	movs	r5, #0
    327c:	e780      	b.n	3180 <__aeabi_dsub+0x318>
    327e:	2100      	movs	r1, #0
    3280:	e78e      	b.n	31a0 <__aeabi_dsub+0x338>
    3282:	0023      	movs	r3, r4
    3284:	4650      	mov	r0, sl
    3286:	4303      	orrs	r3, r0
    3288:	2e00      	cmp	r6, #0
    328a:	d000      	beq.n	328e <__aeabi_dsub+0x426>
    328c:	e0a8      	b.n	33e0 <__aeabi_dsub+0x578>
    328e:	2b00      	cmp	r3, #0
    3290:	d100      	bne.n	3294 <__aeabi_dsub+0x42c>
    3292:	e0de      	b.n	3452 <__aeabi_dsub+0x5ea>
    3294:	000b      	movs	r3, r1
    3296:	4313      	orrs	r3, r2
    3298:	d100      	bne.n	329c <__aeabi_dsub+0x434>
    329a:	e66b      	b.n	2f74 <__aeabi_dsub+0x10c>
    329c:	4452      	add	r2, sl
    329e:	4552      	cmp	r2, sl
    32a0:	4180      	sbcs	r0, r0
    32a2:	1864      	adds	r4, r4, r1
    32a4:	4240      	negs	r0, r0
    32a6:	1824      	adds	r4, r4, r0
    32a8:	0017      	movs	r7, r2
    32aa:	0223      	lsls	r3, r4, #8
    32ac:	d400      	bmi.n	32b0 <__aeabi_dsub+0x448>
    32ae:	e6fd      	b.n	30ac <__aeabi_dsub+0x244>
    32b0:	4b77      	ldr	r3, [pc, #476]	; (3490 <__aeabi_dsub+0x628>)
    32b2:	4666      	mov	r6, ip
    32b4:	401c      	ands	r4, r3
    32b6:	e65d      	b.n	2f74 <__aeabi_dsub+0x10c>
    32b8:	0025      	movs	r5, r4
    32ba:	4650      	mov	r0, sl
    32bc:	4305      	orrs	r5, r0
    32be:	2e00      	cmp	r6, #0
    32c0:	d1cf      	bne.n	3262 <__aeabi_dsub+0x3fa>
    32c2:	2d00      	cmp	r5, #0
    32c4:	d14f      	bne.n	3366 <__aeabi_dsub+0x4fe>
    32c6:	000c      	movs	r4, r1
    32c8:	4314      	orrs	r4, r2
    32ca:	d100      	bne.n	32ce <__aeabi_dsub+0x466>
    32cc:	e0a0      	b.n	3410 <__aeabi_dsub+0x5a8>
    32ce:	000c      	movs	r4, r1
    32d0:	0017      	movs	r7, r2
    32d2:	4698      	mov	r8, r3
    32d4:	e64e      	b.n	2f74 <__aeabi_dsub+0x10c>
    32d6:	4666      	mov	r6, ip
    32d8:	2400      	movs	r4, #0
    32da:	2700      	movs	r7, #0
    32dc:	e685      	b.n	2fea <__aeabi_dsub+0x182>
    32de:	001f      	movs	r7, r3
    32e0:	0008      	movs	r0, r1
    32e2:	3f20      	subs	r7, #32
    32e4:	40f8      	lsrs	r0, r7
    32e6:	0007      	movs	r7, r0
    32e8:	2b20      	cmp	r3, #32
    32ea:	d100      	bne.n	32ee <__aeabi_dsub+0x486>
    32ec:	e08e      	b.n	340c <__aeabi_dsub+0x5a4>
    32ee:	2040      	movs	r0, #64	; 0x40
    32f0:	1ac3      	subs	r3, r0, r3
    32f2:	4099      	lsls	r1, r3
    32f4:	430a      	orrs	r2, r1
    32f6:	1e51      	subs	r1, r2, #1
    32f8:	418a      	sbcs	r2, r1
    32fa:	2100      	movs	r1, #0
    32fc:	4317      	orrs	r7, r2
    32fe:	e692      	b.n	3026 <__aeabi_dsub+0x1be>
    3300:	2e00      	cmp	r6, #0
    3302:	d114      	bne.n	332e <__aeabi_dsub+0x4c6>
    3304:	0026      	movs	r6, r4
    3306:	4650      	mov	r0, sl
    3308:	4306      	orrs	r6, r0
    330a:	d062      	beq.n	33d2 <__aeabi_dsub+0x56a>
    330c:	43db      	mvns	r3, r3
    330e:	2b00      	cmp	r3, #0
    3310:	d15c      	bne.n	33cc <__aeabi_dsub+0x564>
    3312:	1887      	adds	r7, r0, r2
    3314:	4297      	cmp	r7, r2
    3316:	4192      	sbcs	r2, r2
    3318:	1864      	adds	r4, r4, r1
    331a:	4252      	negs	r2, r2
    331c:	18a4      	adds	r4, r4, r2
    331e:	4666      	mov	r6, ip
    3320:	e687      	b.n	3032 <__aeabi_dsub+0x1ca>
    3322:	4650      	mov	r0, sl
    3324:	4320      	orrs	r0, r4
    3326:	1e44      	subs	r4, r0, #1
    3328:	41a0      	sbcs	r0, r4
    332a:	2400      	movs	r4, #0
    332c:	e760      	b.n	31f0 <__aeabi_dsub+0x388>
    332e:	4e57      	ldr	r6, [pc, #348]	; (348c <__aeabi_dsub+0x624>)
    3330:	45b4      	cmp	ip, r6
    3332:	d04e      	beq.n	33d2 <__aeabi_dsub+0x56a>
    3334:	2680      	movs	r6, #128	; 0x80
    3336:	0436      	lsls	r6, r6, #16
    3338:	425b      	negs	r3, r3
    333a:	4334      	orrs	r4, r6
    333c:	2b38      	cmp	r3, #56	; 0x38
    333e:	dd00      	ble.n	3342 <__aeabi_dsub+0x4da>
    3340:	e07f      	b.n	3442 <__aeabi_dsub+0x5da>
    3342:	2b1f      	cmp	r3, #31
    3344:	dd00      	ble.n	3348 <__aeabi_dsub+0x4e0>
    3346:	e08b      	b.n	3460 <__aeabi_dsub+0x5f8>
    3348:	2620      	movs	r6, #32
    334a:	0027      	movs	r7, r4
    334c:	4650      	mov	r0, sl
    334e:	1af6      	subs	r6, r6, r3
    3350:	40b7      	lsls	r7, r6
    3352:	40d8      	lsrs	r0, r3
    3354:	4307      	orrs	r7, r0
    3356:	4650      	mov	r0, sl
    3358:	40b0      	lsls	r0, r6
    335a:	1e46      	subs	r6, r0, #1
    335c:	41b0      	sbcs	r0, r6
    335e:	4307      	orrs	r7, r0
    3360:	40dc      	lsrs	r4, r3
    3362:	18bf      	adds	r7, r7, r2
    3364:	e7d6      	b.n	3314 <__aeabi_dsub+0x4ac>
    3366:	000d      	movs	r5, r1
    3368:	4315      	orrs	r5, r2
    336a:	d100      	bne.n	336e <__aeabi_dsub+0x506>
    336c:	e602      	b.n	2f74 <__aeabi_dsub+0x10c>
    336e:	4650      	mov	r0, sl
    3370:	1a80      	subs	r0, r0, r2
    3372:	4582      	cmp	sl, r0
    3374:	41bf      	sbcs	r7, r7
    3376:	1a65      	subs	r5, r4, r1
    3378:	427f      	negs	r7, r7
    337a:	1bed      	subs	r5, r5, r7
    337c:	4684      	mov	ip, r0
    337e:	0228      	lsls	r0, r5, #8
    3380:	d400      	bmi.n	3384 <__aeabi_dsub+0x51c>
    3382:	e68d      	b.n	30a0 <__aeabi_dsub+0x238>
    3384:	4650      	mov	r0, sl
    3386:	1a17      	subs	r7, r2, r0
    3388:	42ba      	cmp	r2, r7
    338a:	4192      	sbcs	r2, r2
    338c:	1b0c      	subs	r4, r1, r4
    338e:	4252      	negs	r2, r2
    3390:	1aa4      	subs	r4, r4, r2
    3392:	4698      	mov	r8, r3
    3394:	e5ee      	b.n	2f74 <__aeabi_dsub+0x10c>
    3396:	000d      	movs	r5, r1
    3398:	4315      	orrs	r5, r2
    339a:	d100      	bne.n	339e <__aeabi_dsub+0x536>
    339c:	e76b      	b.n	3276 <__aeabi_dsub+0x40e>
    339e:	4650      	mov	r0, sl
    33a0:	0767      	lsls	r7, r4, #29
    33a2:	08c0      	lsrs	r0, r0, #3
    33a4:	4307      	orrs	r7, r0
    33a6:	2080      	movs	r0, #128	; 0x80
    33a8:	08e4      	lsrs	r4, r4, #3
    33aa:	0300      	lsls	r0, r0, #12
    33ac:	4204      	tst	r4, r0
    33ae:	d007      	beq.n	33c0 <__aeabi_dsub+0x558>
    33b0:	08cd      	lsrs	r5, r1, #3
    33b2:	4205      	tst	r5, r0
    33b4:	d104      	bne.n	33c0 <__aeabi_dsub+0x558>
    33b6:	002c      	movs	r4, r5
    33b8:	4698      	mov	r8, r3
    33ba:	08d7      	lsrs	r7, r2, #3
    33bc:	0749      	lsls	r1, r1, #29
    33be:	430f      	orrs	r7, r1
    33c0:	0f7b      	lsrs	r3, r7, #29
    33c2:	00e4      	lsls	r4, r4, #3
    33c4:	431c      	orrs	r4, r3
    33c6:	00ff      	lsls	r7, r7, #3
    33c8:	4e30      	ldr	r6, [pc, #192]	; (348c <__aeabi_dsub+0x624>)
    33ca:	e5d3      	b.n	2f74 <__aeabi_dsub+0x10c>
    33cc:	4e2f      	ldr	r6, [pc, #188]	; (348c <__aeabi_dsub+0x624>)
    33ce:	45b4      	cmp	ip, r6
    33d0:	d1b4      	bne.n	333c <__aeabi_dsub+0x4d4>
    33d2:	000c      	movs	r4, r1
    33d4:	0017      	movs	r7, r2
    33d6:	4666      	mov	r6, ip
    33d8:	e5cc      	b.n	2f74 <__aeabi_dsub+0x10c>
    33da:	2700      	movs	r7, #0
    33dc:	2400      	movs	r4, #0
    33de:	e5e8      	b.n	2fb2 <__aeabi_dsub+0x14a>
    33e0:	2b00      	cmp	r3, #0
    33e2:	d039      	beq.n	3458 <__aeabi_dsub+0x5f0>
    33e4:	000b      	movs	r3, r1
    33e6:	4313      	orrs	r3, r2
    33e8:	d100      	bne.n	33ec <__aeabi_dsub+0x584>
    33ea:	e744      	b.n	3276 <__aeabi_dsub+0x40e>
    33ec:	08c0      	lsrs	r0, r0, #3
    33ee:	0767      	lsls	r7, r4, #29
    33f0:	4307      	orrs	r7, r0
    33f2:	2080      	movs	r0, #128	; 0x80
    33f4:	08e4      	lsrs	r4, r4, #3
    33f6:	0300      	lsls	r0, r0, #12
    33f8:	4204      	tst	r4, r0
    33fa:	d0e1      	beq.n	33c0 <__aeabi_dsub+0x558>
    33fc:	08cb      	lsrs	r3, r1, #3
    33fe:	4203      	tst	r3, r0
    3400:	d1de      	bne.n	33c0 <__aeabi_dsub+0x558>
    3402:	08d7      	lsrs	r7, r2, #3
    3404:	0749      	lsls	r1, r1, #29
    3406:	430f      	orrs	r7, r1
    3408:	001c      	movs	r4, r3
    340a:	e7d9      	b.n	33c0 <__aeabi_dsub+0x558>
    340c:	2100      	movs	r1, #0
    340e:	e771      	b.n	32f4 <__aeabi_dsub+0x48c>
    3410:	2500      	movs	r5, #0
    3412:	2700      	movs	r7, #0
    3414:	e5e9      	b.n	2fea <__aeabi_dsub+0x182>
    3416:	002e      	movs	r6, r5
    3418:	0027      	movs	r7, r4
    341a:	3e20      	subs	r6, #32
    341c:	40f7      	lsrs	r7, r6
    341e:	2d20      	cmp	r5, #32
    3420:	d02f      	beq.n	3482 <__aeabi_dsub+0x61a>
    3422:	2640      	movs	r6, #64	; 0x40
    3424:	1b75      	subs	r5, r6, r5
    3426:	40ac      	lsls	r4, r5
    3428:	4650      	mov	r0, sl
    342a:	4320      	orrs	r0, r4
    342c:	1e44      	subs	r4, r0, #1
    342e:	41a0      	sbcs	r0, r4
    3430:	2400      	movs	r4, #0
    3432:	4338      	orrs	r0, r7
    3434:	e6dc      	b.n	31f0 <__aeabi_dsub+0x388>
    3436:	2480      	movs	r4, #128	; 0x80
    3438:	2500      	movs	r5, #0
    343a:	0324      	lsls	r4, r4, #12
    343c:	4e13      	ldr	r6, [pc, #76]	; (348c <__aeabi_dsub+0x624>)
    343e:	2700      	movs	r7, #0
    3440:	e5d3      	b.n	2fea <__aeabi_dsub+0x182>
    3442:	4650      	mov	r0, sl
    3444:	4320      	orrs	r0, r4
    3446:	0007      	movs	r7, r0
    3448:	1e78      	subs	r0, r7, #1
    344a:	4187      	sbcs	r7, r0
    344c:	2400      	movs	r4, #0
    344e:	18bf      	adds	r7, r7, r2
    3450:	e760      	b.n	3314 <__aeabi_dsub+0x4ac>
    3452:	000c      	movs	r4, r1
    3454:	0017      	movs	r7, r2
    3456:	e58d      	b.n	2f74 <__aeabi_dsub+0x10c>
    3458:	000c      	movs	r4, r1
    345a:	0017      	movs	r7, r2
    345c:	4e0b      	ldr	r6, [pc, #44]	; (348c <__aeabi_dsub+0x624>)
    345e:	e589      	b.n	2f74 <__aeabi_dsub+0x10c>
    3460:	001e      	movs	r6, r3
    3462:	0027      	movs	r7, r4
    3464:	3e20      	subs	r6, #32
    3466:	40f7      	lsrs	r7, r6
    3468:	2b20      	cmp	r3, #32
    346a:	d00c      	beq.n	3486 <__aeabi_dsub+0x61e>
    346c:	2640      	movs	r6, #64	; 0x40
    346e:	1af3      	subs	r3, r6, r3
    3470:	409c      	lsls	r4, r3
    3472:	4650      	mov	r0, sl
    3474:	4320      	orrs	r0, r4
    3476:	1e44      	subs	r4, r0, #1
    3478:	41a0      	sbcs	r0, r4
    347a:	4307      	orrs	r7, r0
    347c:	2400      	movs	r4, #0
    347e:	18bf      	adds	r7, r7, r2
    3480:	e748      	b.n	3314 <__aeabi_dsub+0x4ac>
    3482:	2400      	movs	r4, #0
    3484:	e7d0      	b.n	3428 <__aeabi_dsub+0x5c0>
    3486:	2400      	movs	r4, #0
    3488:	e7f3      	b.n	3472 <__aeabi_dsub+0x60a>
    348a:	46c0      	nop			; (mov r8, r8)
    348c:	000007ff 	.word	0x000007ff
    3490:	ff7fffff 	.word	0xff7fffff

00003494 <__aeabi_d2iz>:
    3494:	b530      	push	{r4, r5, lr}
    3496:	4d13      	ldr	r5, [pc, #76]	; (34e4 <__aeabi_d2iz+0x50>)
    3498:	030a      	lsls	r2, r1, #12
    349a:	004b      	lsls	r3, r1, #1
    349c:	0b12      	lsrs	r2, r2, #12
    349e:	0d5b      	lsrs	r3, r3, #21
    34a0:	0fc9      	lsrs	r1, r1, #31
    34a2:	2400      	movs	r4, #0
    34a4:	42ab      	cmp	r3, r5
    34a6:	dd10      	ble.n	34ca <__aeabi_d2iz+0x36>
    34a8:	4c0f      	ldr	r4, [pc, #60]	; (34e8 <__aeabi_d2iz+0x54>)
    34aa:	42a3      	cmp	r3, r4
    34ac:	dc0f      	bgt.n	34ce <__aeabi_d2iz+0x3a>
    34ae:	2480      	movs	r4, #128	; 0x80
    34b0:	4d0e      	ldr	r5, [pc, #56]	; (34ec <__aeabi_d2iz+0x58>)
    34b2:	0364      	lsls	r4, r4, #13
    34b4:	4322      	orrs	r2, r4
    34b6:	1aed      	subs	r5, r5, r3
    34b8:	2d1f      	cmp	r5, #31
    34ba:	dd0b      	ble.n	34d4 <__aeabi_d2iz+0x40>
    34bc:	480c      	ldr	r0, [pc, #48]	; (34f0 <__aeabi_d2iz+0x5c>)
    34be:	1ac3      	subs	r3, r0, r3
    34c0:	40da      	lsrs	r2, r3
    34c2:	4254      	negs	r4, r2
    34c4:	2900      	cmp	r1, #0
    34c6:	d100      	bne.n	34ca <__aeabi_d2iz+0x36>
    34c8:	0014      	movs	r4, r2
    34ca:	0020      	movs	r0, r4
    34cc:	bd30      	pop	{r4, r5, pc}
    34ce:	4b09      	ldr	r3, [pc, #36]	; (34f4 <__aeabi_d2iz+0x60>)
    34d0:	18cc      	adds	r4, r1, r3
    34d2:	e7fa      	b.n	34ca <__aeabi_d2iz+0x36>
    34d4:	4c08      	ldr	r4, [pc, #32]	; (34f8 <__aeabi_d2iz+0x64>)
    34d6:	40e8      	lsrs	r0, r5
    34d8:	46a4      	mov	ip, r4
    34da:	4463      	add	r3, ip
    34dc:	409a      	lsls	r2, r3
    34de:	4302      	orrs	r2, r0
    34e0:	e7ef      	b.n	34c2 <__aeabi_d2iz+0x2e>
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	000003fe 	.word	0x000003fe
    34e8:	0000041d 	.word	0x0000041d
    34ec:	00000433 	.word	0x00000433
    34f0:	00000413 	.word	0x00000413
    34f4:	7fffffff 	.word	0x7fffffff
    34f8:	fffffbed 	.word	0xfffffbed

000034fc <__aeabi_ui2d>:
    34fc:	b510      	push	{r4, lr}
    34fe:	1e04      	subs	r4, r0, #0
    3500:	d028      	beq.n	3554 <__aeabi_ui2d+0x58>
    3502:	f000 f871 	bl	35e8 <__clzsi2>
    3506:	4b15      	ldr	r3, [pc, #84]	; (355c <__aeabi_ui2d+0x60>)
    3508:	4a15      	ldr	r2, [pc, #84]	; (3560 <__aeabi_ui2d+0x64>)
    350a:	1a1b      	subs	r3, r3, r0
    350c:	1ad2      	subs	r2, r2, r3
    350e:	2a1f      	cmp	r2, #31
    3510:	dd15      	ble.n	353e <__aeabi_ui2d+0x42>
    3512:	4a14      	ldr	r2, [pc, #80]	; (3564 <__aeabi_ui2d+0x68>)
    3514:	1ad2      	subs	r2, r2, r3
    3516:	4094      	lsls	r4, r2
    3518:	2200      	movs	r2, #0
    351a:	0324      	lsls	r4, r4, #12
    351c:	055b      	lsls	r3, r3, #21
    351e:	0b24      	lsrs	r4, r4, #12
    3520:	0d5b      	lsrs	r3, r3, #21
    3522:	2100      	movs	r1, #0
    3524:	0010      	movs	r0, r2
    3526:	0324      	lsls	r4, r4, #12
    3528:	0d0a      	lsrs	r2, r1, #20
    352a:	0b24      	lsrs	r4, r4, #12
    352c:	0512      	lsls	r2, r2, #20
    352e:	4322      	orrs	r2, r4
    3530:	4c0d      	ldr	r4, [pc, #52]	; (3568 <__aeabi_ui2d+0x6c>)
    3532:	051b      	lsls	r3, r3, #20
    3534:	4022      	ands	r2, r4
    3536:	4313      	orrs	r3, r2
    3538:	005b      	lsls	r3, r3, #1
    353a:	0859      	lsrs	r1, r3, #1
    353c:	bd10      	pop	{r4, pc}
    353e:	0021      	movs	r1, r4
    3540:	4091      	lsls	r1, r2
    3542:	000a      	movs	r2, r1
    3544:	210b      	movs	r1, #11
    3546:	1a08      	subs	r0, r1, r0
    3548:	40c4      	lsrs	r4, r0
    354a:	055b      	lsls	r3, r3, #21
    354c:	0324      	lsls	r4, r4, #12
    354e:	0b24      	lsrs	r4, r4, #12
    3550:	0d5b      	lsrs	r3, r3, #21
    3552:	e7e6      	b.n	3522 <__aeabi_ui2d+0x26>
    3554:	2300      	movs	r3, #0
    3556:	2400      	movs	r4, #0
    3558:	2200      	movs	r2, #0
    355a:	e7e2      	b.n	3522 <__aeabi_ui2d+0x26>
    355c:	0000041e 	.word	0x0000041e
    3560:	00000433 	.word	0x00000433
    3564:	00000413 	.word	0x00000413
    3568:	800fffff 	.word	0x800fffff

0000356c <__aeabi_cdrcmple>:
    356c:	4684      	mov	ip, r0
    356e:	1c10      	adds	r0, r2, #0
    3570:	4662      	mov	r2, ip
    3572:	468c      	mov	ip, r1
    3574:	1c19      	adds	r1, r3, #0
    3576:	4663      	mov	r3, ip
    3578:	e000      	b.n	357c <__aeabi_cdcmpeq>
    357a:	46c0      	nop			; (mov r8, r8)

0000357c <__aeabi_cdcmpeq>:
    357c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    357e:	f000 f8ef 	bl	3760 <__ledf2>
    3582:	2800      	cmp	r0, #0
    3584:	d401      	bmi.n	358a <__aeabi_cdcmpeq+0xe>
    3586:	2100      	movs	r1, #0
    3588:	42c8      	cmn	r0, r1
    358a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000358c <__aeabi_dcmpeq>:
    358c:	b510      	push	{r4, lr}
    358e:	f000 f849 	bl	3624 <__eqdf2>
    3592:	4240      	negs	r0, r0
    3594:	3001      	adds	r0, #1
    3596:	bd10      	pop	{r4, pc}

00003598 <__aeabi_dcmplt>:
    3598:	b510      	push	{r4, lr}
    359a:	f000 f8e1 	bl	3760 <__ledf2>
    359e:	2800      	cmp	r0, #0
    35a0:	db01      	blt.n	35a6 <__aeabi_dcmplt+0xe>
    35a2:	2000      	movs	r0, #0
    35a4:	bd10      	pop	{r4, pc}
    35a6:	2001      	movs	r0, #1
    35a8:	bd10      	pop	{r4, pc}
    35aa:	46c0      	nop			; (mov r8, r8)

000035ac <__aeabi_dcmple>:
    35ac:	b510      	push	{r4, lr}
    35ae:	f000 f8d7 	bl	3760 <__ledf2>
    35b2:	2800      	cmp	r0, #0
    35b4:	dd01      	ble.n	35ba <__aeabi_dcmple+0xe>
    35b6:	2000      	movs	r0, #0
    35b8:	bd10      	pop	{r4, pc}
    35ba:	2001      	movs	r0, #1
    35bc:	bd10      	pop	{r4, pc}
    35be:	46c0      	nop			; (mov r8, r8)

000035c0 <__aeabi_dcmpgt>:
    35c0:	b510      	push	{r4, lr}
    35c2:	f000 f869 	bl	3698 <__gedf2>
    35c6:	2800      	cmp	r0, #0
    35c8:	dc01      	bgt.n	35ce <__aeabi_dcmpgt+0xe>
    35ca:	2000      	movs	r0, #0
    35cc:	bd10      	pop	{r4, pc}
    35ce:	2001      	movs	r0, #1
    35d0:	bd10      	pop	{r4, pc}
    35d2:	46c0      	nop			; (mov r8, r8)

000035d4 <__aeabi_dcmpge>:
    35d4:	b510      	push	{r4, lr}
    35d6:	f000 f85f 	bl	3698 <__gedf2>
    35da:	2800      	cmp	r0, #0
    35dc:	da01      	bge.n	35e2 <__aeabi_dcmpge+0xe>
    35de:	2000      	movs	r0, #0
    35e0:	bd10      	pop	{r4, pc}
    35e2:	2001      	movs	r0, #1
    35e4:	bd10      	pop	{r4, pc}
    35e6:	46c0      	nop			; (mov r8, r8)

000035e8 <__clzsi2>:
    35e8:	211c      	movs	r1, #28
    35ea:	2301      	movs	r3, #1
    35ec:	041b      	lsls	r3, r3, #16
    35ee:	4298      	cmp	r0, r3
    35f0:	d301      	bcc.n	35f6 <__clzsi2+0xe>
    35f2:	0c00      	lsrs	r0, r0, #16
    35f4:	3910      	subs	r1, #16
    35f6:	0a1b      	lsrs	r3, r3, #8
    35f8:	4298      	cmp	r0, r3
    35fa:	d301      	bcc.n	3600 <__clzsi2+0x18>
    35fc:	0a00      	lsrs	r0, r0, #8
    35fe:	3908      	subs	r1, #8
    3600:	091b      	lsrs	r3, r3, #4
    3602:	4298      	cmp	r0, r3
    3604:	d301      	bcc.n	360a <__clzsi2+0x22>
    3606:	0900      	lsrs	r0, r0, #4
    3608:	3904      	subs	r1, #4
    360a:	a202      	add	r2, pc, #8	; (adr r2, 3614 <__clzsi2+0x2c>)
    360c:	5c10      	ldrb	r0, [r2, r0]
    360e:	1840      	adds	r0, r0, r1
    3610:	4770      	bx	lr
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	02020304 	.word	0x02020304
    3618:	01010101 	.word	0x01010101
	...

00003624 <__eqdf2>:
    3624:	b5f0      	push	{r4, r5, r6, r7, lr}
    3626:	464f      	mov	r7, r9
    3628:	4646      	mov	r6, r8
    362a:	46d6      	mov	lr, sl
    362c:	005c      	lsls	r4, r3, #1
    362e:	b5c0      	push	{r6, r7, lr}
    3630:	031f      	lsls	r7, r3, #12
    3632:	0fdb      	lsrs	r3, r3, #31
    3634:	469a      	mov	sl, r3
    3636:	4b17      	ldr	r3, [pc, #92]	; (3694 <__eqdf2+0x70>)
    3638:	030e      	lsls	r6, r1, #12
    363a:	004d      	lsls	r5, r1, #1
    363c:	4684      	mov	ip, r0
    363e:	4680      	mov	r8, r0
    3640:	0b36      	lsrs	r6, r6, #12
    3642:	0d6d      	lsrs	r5, r5, #21
    3644:	0fc9      	lsrs	r1, r1, #31
    3646:	4691      	mov	r9, r2
    3648:	0b3f      	lsrs	r7, r7, #12
    364a:	0d64      	lsrs	r4, r4, #21
    364c:	2001      	movs	r0, #1
    364e:	429d      	cmp	r5, r3
    3650:	d008      	beq.n	3664 <__eqdf2+0x40>
    3652:	429c      	cmp	r4, r3
    3654:	d001      	beq.n	365a <__eqdf2+0x36>
    3656:	42a5      	cmp	r5, r4
    3658:	d00b      	beq.n	3672 <__eqdf2+0x4e>
    365a:	bc1c      	pop	{r2, r3, r4}
    365c:	4690      	mov	r8, r2
    365e:	4699      	mov	r9, r3
    3660:	46a2      	mov	sl, r4
    3662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3664:	4663      	mov	r3, ip
    3666:	4333      	orrs	r3, r6
    3668:	d1f7      	bne.n	365a <__eqdf2+0x36>
    366a:	42ac      	cmp	r4, r5
    366c:	d1f5      	bne.n	365a <__eqdf2+0x36>
    366e:	433a      	orrs	r2, r7
    3670:	d1f3      	bne.n	365a <__eqdf2+0x36>
    3672:	2001      	movs	r0, #1
    3674:	42be      	cmp	r6, r7
    3676:	d1f0      	bne.n	365a <__eqdf2+0x36>
    3678:	45c8      	cmp	r8, r9
    367a:	d1ee      	bne.n	365a <__eqdf2+0x36>
    367c:	4551      	cmp	r1, sl
    367e:	d007      	beq.n	3690 <__eqdf2+0x6c>
    3680:	2d00      	cmp	r5, #0
    3682:	d1ea      	bne.n	365a <__eqdf2+0x36>
    3684:	4663      	mov	r3, ip
    3686:	431e      	orrs	r6, r3
    3688:	0030      	movs	r0, r6
    368a:	1e46      	subs	r6, r0, #1
    368c:	41b0      	sbcs	r0, r6
    368e:	e7e4      	b.n	365a <__eqdf2+0x36>
    3690:	2000      	movs	r0, #0
    3692:	e7e2      	b.n	365a <__eqdf2+0x36>
    3694:	000007ff 	.word	0x000007ff

00003698 <__gedf2>:
    3698:	b5f0      	push	{r4, r5, r6, r7, lr}
    369a:	4645      	mov	r5, r8
    369c:	46de      	mov	lr, fp
    369e:	4657      	mov	r7, sl
    36a0:	464e      	mov	r6, r9
    36a2:	b5e0      	push	{r5, r6, r7, lr}
    36a4:	031f      	lsls	r7, r3, #12
    36a6:	0b3d      	lsrs	r5, r7, #12
    36a8:	4f2c      	ldr	r7, [pc, #176]	; (375c <__gedf2+0xc4>)
    36aa:	030e      	lsls	r6, r1, #12
    36ac:	004c      	lsls	r4, r1, #1
    36ae:	46ab      	mov	fp, r5
    36b0:	005d      	lsls	r5, r3, #1
    36b2:	4684      	mov	ip, r0
    36b4:	0b36      	lsrs	r6, r6, #12
    36b6:	0d64      	lsrs	r4, r4, #21
    36b8:	0fc9      	lsrs	r1, r1, #31
    36ba:	4690      	mov	r8, r2
    36bc:	0d6d      	lsrs	r5, r5, #21
    36be:	0fdb      	lsrs	r3, r3, #31
    36c0:	42bc      	cmp	r4, r7
    36c2:	d02a      	beq.n	371a <__gedf2+0x82>
    36c4:	4f25      	ldr	r7, [pc, #148]	; (375c <__gedf2+0xc4>)
    36c6:	42bd      	cmp	r5, r7
    36c8:	d02d      	beq.n	3726 <__gedf2+0x8e>
    36ca:	2c00      	cmp	r4, #0
    36cc:	d10f      	bne.n	36ee <__gedf2+0x56>
    36ce:	4330      	orrs	r0, r6
    36d0:	0007      	movs	r7, r0
    36d2:	4681      	mov	r9, r0
    36d4:	4278      	negs	r0, r7
    36d6:	4178      	adcs	r0, r7
    36d8:	b2c0      	uxtb	r0, r0
    36da:	2d00      	cmp	r5, #0
    36dc:	d117      	bne.n	370e <__gedf2+0x76>
    36de:	465f      	mov	r7, fp
    36e0:	433a      	orrs	r2, r7
    36e2:	d114      	bne.n	370e <__gedf2+0x76>
    36e4:	464b      	mov	r3, r9
    36e6:	2000      	movs	r0, #0
    36e8:	2b00      	cmp	r3, #0
    36ea:	d00a      	beq.n	3702 <__gedf2+0x6a>
    36ec:	e006      	b.n	36fc <__gedf2+0x64>
    36ee:	2d00      	cmp	r5, #0
    36f0:	d102      	bne.n	36f8 <__gedf2+0x60>
    36f2:	4658      	mov	r0, fp
    36f4:	4302      	orrs	r2, r0
    36f6:	d001      	beq.n	36fc <__gedf2+0x64>
    36f8:	4299      	cmp	r1, r3
    36fa:	d018      	beq.n	372e <__gedf2+0x96>
    36fc:	4248      	negs	r0, r1
    36fe:	2101      	movs	r1, #1
    3700:	4308      	orrs	r0, r1
    3702:	bc3c      	pop	{r2, r3, r4, r5}
    3704:	4690      	mov	r8, r2
    3706:	4699      	mov	r9, r3
    3708:	46a2      	mov	sl, r4
    370a:	46ab      	mov	fp, r5
    370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    370e:	2800      	cmp	r0, #0
    3710:	d0f2      	beq.n	36f8 <__gedf2+0x60>
    3712:	2001      	movs	r0, #1
    3714:	3b01      	subs	r3, #1
    3716:	4318      	orrs	r0, r3
    3718:	e7f3      	b.n	3702 <__gedf2+0x6a>
    371a:	0037      	movs	r7, r6
    371c:	4307      	orrs	r7, r0
    371e:	d0d1      	beq.n	36c4 <__gedf2+0x2c>
    3720:	2002      	movs	r0, #2
    3722:	4240      	negs	r0, r0
    3724:	e7ed      	b.n	3702 <__gedf2+0x6a>
    3726:	465f      	mov	r7, fp
    3728:	4317      	orrs	r7, r2
    372a:	d0ce      	beq.n	36ca <__gedf2+0x32>
    372c:	e7f8      	b.n	3720 <__gedf2+0x88>
    372e:	42ac      	cmp	r4, r5
    3730:	dce4      	bgt.n	36fc <__gedf2+0x64>
    3732:	da03      	bge.n	373c <__gedf2+0xa4>
    3734:	1e48      	subs	r0, r1, #1
    3736:	2101      	movs	r1, #1
    3738:	4308      	orrs	r0, r1
    373a:	e7e2      	b.n	3702 <__gedf2+0x6a>
    373c:	455e      	cmp	r6, fp
    373e:	d8dd      	bhi.n	36fc <__gedf2+0x64>
    3740:	d006      	beq.n	3750 <__gedf2+0xb8>
    3742:	2000      	movs	r0, #0
    3744:	455e      	cmp	r6, fp
    3746:	d2dc      	bcs.n	3702 <__gedf2+0x6a>
    3748:	2301      	movs	r3, #1
    374a:	1e48      	subs	r0, r1, #1
    374c:	4318      	orrs	r0, r3
    374e:	e7d8      	b.n	3702 <__gedf2+0x6a>
    3750:	45c4      	cmp	ip, r8
    3752:	d8d3      	bhi.n	36fc <__gedf2+0x64>
    3754:	2000      	movs	r0, #0
    3756:	45c4      	cmp	ip, r8
    3758:	d3f6      	bcc.n	3748 <__gedf2+0xb0>
    375a:	e7d2      	b.n	3702 <__gedf2+0x6a>
    375c:	000007ff 	.word	0x000007ff

00003760 <__ledf2>:
    3760:	b5f0      	push	{r4, r5, r6, r7, lr}
    3762:	464e      	mov	r6, r9
    3764:	4645      	mov	r5, r8
    3766:	46de      	mov	lr, fp
    3768:	4657      	mov	r7, sl
    376a:	005c      	lsls	r4, r3, #1
    376c:	b5e0      	push	{r5, r6, r7, lr}
    376e:	031f      	lsls	r7, r3, #12
    3770:	0fdb      	lsrs	r3, r3, #31
    3772:	4699      	mov	r9, r3
    3774:	4b2a      	ldr	r3, [pc, #168]	; (3820 <__ledf2+0xc0>)
    3776:	030e      	lsls	r6, r1, #12
    3778:	004d      	lsls	r5, r1, #1
    377a:	0fc9      	lsrs	r1, r1, #31
    377c:	4684      	mov	ip, r0
    377e:	0b36      	lsrs	r6, r6, #12
    3780:	0d6d      	lsrs	r5, r5, #21
    3782:	468b      	mov	fp, r1
    3784:	4690      	mov	r8, r2
    3786:	0b3f      	lsrs	r7, r7, #12
    3788:	0d64      	lsrs	r4, r4, #21
    378a:	429d      	cmp	r5, r3
    378c:	d020      	beq.n	37d0 <__ledf2+0x70>
    378e:	4b24      	ldr	r3, [pc, #144]	; (3820 <__ledf2+0xc0>)
    3790:	429c      	cmp	r4, r3
    3792:	d022      	beq.n	37da <__ledf2+0x7a>
    3794:	2d00      	cmp	r5, #0
    3796:	d112      	bne.n	37be <__ledf2+0x5e>
    3798:	4330      	orrs	r0, r6
    379a:	4243      	negs	r3, r0
    379c:	4143      	adcs	r3, r0
    379e:	b2db      	uxtb	r3, r3
    37a0:	2c00      	cmp	r4, #0
    37a2:	d01f      	beq.n	37e4 <__ledf2+0x84>
    37a4:	2b00      	cmp	r3, #0
    37a6:	d00c      	beq.n	37c2 <__ledf2+0x62>
    37a8:	464b      	mov	r3, r9
    37aa:	2001      	movs	r0, #1
    37ac:	3b01      	subs	r3, #1
    37ae:	4303      	orrs	r3, r0
    37b0:	0018      	movs	r0, r3
    37b2:	bc3c      	pop	{r2, r3, r4, r5}
    37b4:	4690      	mov	r8, r2
    37b6:	4699      	mov	r9, r3
    37b8:	46a2      	mov	sl, r4
    37ba:	46ab      	mov	fp, r5
    37bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37be:	2c00      	cmp	r4, #0
    37c0:	d016      	beq.n	37f0 <__ledf2+0x90>
    37c2:	45cb      	cmp	fp, r9
    37c4:	d017      	beq.n	37f6 <__ledf2+0x96>
    37c6:	465b      	mov	r3, fp
    37c8:	4259      	negs	r1, r3
    37ca:	2301      	movs	r3, #1
    37cc:	430b      	orrs	r3, r1
    37ce:	e7ef      	b.n	37b0 <__ledf2+0x50>
    37d0:	0031      	movs	r1, r6
    37d2:	2302      	movs	r3, #2
    37d4:	4301      	orrs	r1, r0
    37d6:	d1eb      	bne.n	37b0 <__ledf2+0x50>
    37d8:	e7d9      	b.n	378e <__ledf2+0x2e>
    37da:	0039      	movs	r1, r7
    37dc:	2302      	movs	r3, #2
    37de:	4311      	orrs	r1, r2
    37e0:	d1e6      	bne.n	37b0 <__ledf2+0x50>
    37e2:	e7d7      	b.n	3794 <__ledf2+0x34>
    37e4:	433a      	orrs	r2, r7
    37e6:	d1dd      	bne.n	37a4 <__ledf2+0x44>
    37e8:	2300      	movs	r3, #0
    37ea:	2800      	cmp	r0, #0
    37ec:	d0e0      	beq.n	37b0 <__ledf2+0x50>
    37ee:	e7ea      	b.n	37c6 <__ledf2+0x66>
    37f0:	433a      	orrs	r2, r7
    37f2:	d1e6      	bne.n	37c2 <__ledf2+0x62>
    37f4:	e7e7      	b.n	37c6 <__ledf2+0x66>
    37f6:	42a5      	cmp	r5, r4
    37f8:	dce5      	bgt.n	37c6 <__ledf2+0x66>
    37fa:	db05      	blt.n	3808 <__ledf2+0xa8>
    37fc:	42be      	cmp	r6, r7
    37fe:	d8e2      	bhi.n	37c6 <__ledf2+0x66>
    3800:	d007      	beq.n	3812 <__ledf2+0xb2>
    3802:	2300      	movs	r3, #0
    3804:	42be      	cmp	r6, r7
    3806:	d2d3      	bcs.n	37b0 <__ledf2+0x50>
    3808:	4659      	mov	r1, fp
    380a:	2301      	movs	r3, #1
    380c:	3901      	subs	r1, #1
    380e:	430b      	orrs	r3, r1
    3810:	e7ce      	b.n	37b0 <__ledf2+0x50>
    3812:	45c4      	cmp	ip, r8
    3814:	d8d7      	bhi.n	37c6 <__ledf2+0x66>
    3816:	2300      	movs	r3, #0
    3818:	45c4      	cmp	ip, r8
    381a:	d3f5      	bcc.n	3808 <__ledf2+0xa8>
    381c:	e7c8      	b.n	37b0 <__ledf2+0x50>
    381e:	46c0      	nop			; (mov r8, r8)
    3820:	000007ff 	.word	0x000007ff

00003824 <__libc_init_array>:
    3824:	b570      	push	{r4, r5, r6, lr}
    3826:	2600      	movs	r6, #0
    3828:	4d0c      	ldr	r5, [pc, #48]	; (385c <__libc_init_array+0x38>)
    382a:	4c0d      	ldr	r4, [pc, #52]	; (3860 <__libc_init_array+0x3c>)
    382c:	1b64      	subs	r4, r4, r5
    382e:	10a4      	asrs	r4, r4, #2
    3830:	42a6      	cmp	r6, r4
    3832:	d109      	bne.n	3848 <__libc_init_array+0x24>
    3834:	2600      	movs	r6, #0
    3836:	f000 f965 	bl	3b04 <_init>
    383a:	4d0a      	ldr	r5, [pc, #40]	; (3864 <__libc_init_array+0x40>)
    383c:	4c0a      	ldr	r4, [pc, #40]	; (3868 <__libc_init_array+0x44>)
    383e:	1b64      	subs	r4, r4, r5
    3840:	10a4      	asrs	r4, r4, #2
    3842:	42a6      	cmp	r6, r4
    3844:	d105      	bne.n	3852 <__libc_init_array+0x2e>
    3846:	bd70      	pop	{r4, r5, r6, pc}
    3848:	00b3      	lsls	r3, r6, #2
    384a:	58eb      	ldr	r3, [r5, r3]
    384c:	4798      	blx	r3
    384e:	3601      	adds	r6, #1
    3850:	e7ee      	b.n	3830 <__libc_init_array+0xc>
    3852:	00b3      	lsls	r3, r6, #2
    3854:	58eb      	ldr	r3, [r5, r3]
    3856:	4798      	blx	r3
    3858:	3601      	adds	r6, #1
    385a:	e7f2      	b.n	3842 <__libc_init_array+0x1e>
    385c:	00003b10 	.word	0x00003b10
    3860:	00003b10 	.word	0x00003b10
    3864:	00003b10 	.word	0x00003b10
    3868:	00003b14 	.word	0x00003b14

0000386c <__utoa>:
    386c:	b5f0      	push	{r4, r5, r6, r7, lr}
    386e:	0017      	movs	r7, r2
    3870:	b08f      	sub	sp, #60	; 0x3c
    3872:	2225      	movs	r2, #37	; 0x25
    3874:	0006      	movs	r6, r0
    3876:	000d      	movs	r5, r1
    3878:	a804      	add	r0, sp, #16
    387a:	4918      	ldr	r1, [pc, #96]	; (38dc <__utoa+0x70>)
    387c:	f000 f834 	bl	38e8 <memcpy>
    3880:	aa04      	add	r2, sp, #16
    3882:	1ebb      	subs	r3, r7, #2
    3884:	2400      	movs	r4, #0
    3886:	9203      	str	r2, [sp, #12]
    3888:	2b22      	cmp	r3, #34	; 0x22
    388a:	d905      	bls.n	3898 <__utoa+0x2c>
    388c:	702c      	strb	r4, [r5, #0]
    388e:	0025      	movs	r5, r4
    3890:	0028      	movs	r0, r5
    3892:	b00f      	add	sp, #60	; 0x3c
    3894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3896:	9c01      	ldr	r4, [sp, #4]
    3898:	1c63      	adds	r3, r4, #1
    389a:	9301      	str	r3, [sp, #4]
    389c:	18eb      	adds	r3, r5, r3
    389e:	9300      	str	r3, [sp, #0]
    38a0:	0030      	movs	r0, r6
    38a2:	3b01      	subs	r3, #1
    38a4:	0039      	movs	r1, r7
    38a6:	9302      	str	r3, [sp, #8]
    38a8:	f7fe fc1c 	bl	20e4 <__aeabi_uidivmod>
    38ac:	9b03      	ldr	r3, [sp, #12]
    38ae:	9a02      	ldr	r2, [sp, #8]
    38b0:	5c5b      	ldrb	r3, [r3, r1]
    38b2:	0030      	movs	r0, r6
    38b4:	7013      	strb	r3, [r2, #0]
    38b6:	0039      	movs	r1, r7
    38b8:	f7fe fb8e 	bl	1fd8 <__udivsi3>
    38bc:	1e06      	subs	r6, r0, #0
    38be:	d1ea      	bne.n	3896 <__utoa+0x2a>
    38c0:	9b00      	ldr	r3, [sp, #0]
    38c2:	7018      	strb	r0, [r3, #0]
    38c4:	002b      	movs	r3, r5
    38c6:	1b5a      	subs	r2, r3, r5
    38c8:	4294      	cmp	r4, r2
    38ca:	dde1      	ble.n	3890 <__utoa+0x24>
    38cc:	781a      	ldrb	r2, [r3, #0]
    38ce:	5d29      	ldrb	r1, [r5, r4]
    38d0:	7019      	strb	r1, [r3, #0]
    38d2:	552a      	strb	r2, [r5, r4]
    38d4:	3301      	adds	r3, #1
    38d6:	3c01      	subs	r4, #1
    38d8:	e7f5      	b.n	38c6 <__utoa+0x5a>
    38da:	46c0      	nop			; (mov r8, r8)
    38dc:	00003adc 	.word	0x00003adc

000038e0 <utoa>:
    38e0:	b510      	push	{r4, lr}
    38e2:	f7ff ffc3 	bl	386c <__utoa>
    38e6:	bd10      	pop	{r4, pc}

000038e8 <memcpy>:
    38e8:	2300      	movs	r3, #0
    38ea:	b510      	push	{r4, lr}
    38ec:	429a      	cmp	r2, r3
    38ee:	d100      	bne.n	38f2 <memcpy+0xa>
    38f0:	bd10      	pop	{r4, pc}
    38f2:	5ccc      	ldrb	r4, [r1, r3]
    38f4:	54c4      	strb	r4, [r0, r3]
    38f6:	3301      	adds	r3, #1
    38f8:	e7f8      	b.n	38ec <memcpy+0x4>
	...

000038fc <_AD_reg>:
    38fc:	0280 0382 0385 0288 028a 018f 0292 0294     ................
    390c:	0296 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    391c:	6c61 615f 6364 735f 6e79 2e63 0063 0000     al_adc_sync.c...
    392c:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
    393c:	6332 6d5f 735f 6e79 2e63 0063 2e2e 682f     2c_m_sync.c.../h
    394c:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.

0000395c <_adcs>:
    395c:	0000 0501 0000 1807 0000 1044 0000 0000     ..........D.....
	...
    3978:	2e2e 682f 6c70 612f 6364 682f 6c70 615f     ../hpl/adc/hpl_a
    3988:	6364 632e 0000 0000                         dc.c....

00003990 <_usarts>:
	...

000039a4 <_i2cms>:
    39a4:	0001 0000 0014 0020 0100 0000 0f0e 0000     ...... .........
    39b4:	0000 00d7 0900 003d                         ......=.

000039bc <_i2css>:
	...

000039cc <sercomspi_regs>:
	...
    39e0:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    39f0:	5f6c 6573 6372 6d6f 632e 0000 1c3e 0000     l_sercom.c..>...
    3a00:	1c4c 0000 1c5a 0000 1c68 0000 1c76 0000     L...Z...h...v...
    3a10:	1c84 0000 1c98 0000 1ca8 0000 1cc2 0000     ................
    3a20:	1cdc 0000 1cf6 0000 1d02 0000 1d12 0000     ................
    3a30:	1d24 0000 1ea2 0000 1eae 0000 1eb4 0000     $...............
    3a40:	1ea6 0000 1ea6 0000 1ea6 0000 1ea6 0000     ................
    3a50:	1eba 0000 1eea 0000 1f02 0000 24f8 0000     .............$..
    3a60:	24da 0000 2494 0000 23b2 0000 2494 0000     .$...$...#...$..
    3a70:	24cc 0000 2494 0000 23b2 0000 24da 0000     .$...$...#...$..
    3a80:	24da 0000 24cc 0000 23b2 0000 23aa 0000     .$...$...#...#..
    3a90:	23aa 0000 23aa 0000 2710 0000 2b58 0000     .#...#...'..X+..
    3aa0:	2a18 0000 2a18 0000 2a14 0000 2b30 0000     .*...*...*..0+..
    3ab0:	2b30 0000 2b22 0000 2a14 0000 2b30 0000     0+.."+...*..0+..
    3ac0:	2b22 0000 2b30 0000 2a14 0000 2b38 0000     "+..0+...*..8+..
    3ad0:	2b38 0000 2b38 0000 2d3c 0000 3130 3332     8+..8+..<-..0123
    3ae0:	3534 3736 3938 6261 6463 6665 6867 6a69     456789abcdefghij
    3af0:	6c6b 6e6d 706f 7271 7473 7675 7877 7a79     klmnopqrstuvwxyz
    3b00:	0000 0000                                   ....

00003b04 <_init>:
    3b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b06:	46c0      	nop			; (mov r8, r8)
    3b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3b0a:	bc08      	pop	{r3}
    3b0c:	469e      	mov	lr, r3
    3b0e:	4770      	bx	lr

00003b10 <__init_array_start>:
    3b10:	000000dd 	.word	0x000000dd

00003b14 <_fini>:
    3b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3b1a:	bc08      	pop	{r3}
    3b1c:	469e      	mov	lr, r3
    3b1e:	4770      	bx	lr

00003b20 <__fini_array_start>:
    3b20:	000000b5 	.word	0x000000b5
